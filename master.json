{
  "source": {
    "LICENSE": {
      "path": "LICENSE",
      "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "mode": "100644",
      "type": "blob"
    },
    "README.md": {
      "path": "README.md",
      "content": "# honegar\nA sweet sweet honeypot of a game.\n\nIn scope comprable to Dwarf Fortress but with a few differences in philosophy.\n\nThis game will be open and accessible. Web based, playable in the browser. It\nwill be collaborative. We'll explore many of the same themes: society building,\nemergent behavior from complex systems, fantasy and rpg elements, autonamous\nagents, procedural generation.\n\n## Features\n\nBirth and death\n\nLineage and family trees\n\nCultural evolution\n\nHistory and legends\n\nProcedurally generated songs and music that you can hear, rendered in MIDI.\n\nNatural and synthetic drugs, hallucinogens, alcohol.\n\nDrunk Driving\n\nProcedurally generated books\n\nBasic perceptual modelling of autonamous agents.\n\nRoles like surveyor and planner can designate work for others.\n\nLaws, legal system, jurisdictions, detection and enforcibility of crimes.\n\nEmergent economics: asset bubbles and crashes.\n\nWater, magma, oil\n\nCollectivist and individualist societies\n\nEvolutionary selection of laws, social customs, prejudices.\n\nMental illness, depression bi-polar disorder.\n\nDisease and medicine.\n\nProcedurally generated sex acts.\n\nWar, famine, capitalism, class struggle\n\nReligious texts encouraging and prohibiting certain actions (expect to see an \nemergence of memetics and proselytizing)\n\nEcosystems, plants, fungus, trees, animals.\n\nProperty ownership, rent seeking.\n\nDebt backed securites.\n\nCollaborative networked play\n\nPlugins and user generated subsystems.\n\n## Scenarios\n\nA goblin is put to death for violating an emergent law by telling a procedurally\ngenerated joke.\n\nSpring rains and favorable weather cause an immense bloom of flowers, causing a\nboom and then bust in the bee population.\n\nRowdy elf teens get high off of cave fungus.\n\nAlcohol is prohibited and the local sheriff comissions a posse to destroy all\nthe stills.\n\nA famine causes waves of migrant gnomes to spread forth throughout the land\nsharing their culture and over hundreds of years assimilating into different\nsocieties to varying degrees. Some are always treated as second class citizens\nwhile others arriving among more tolerant cultures are equals and can own land\nand property.\n\n## Overview\n\nThis is vast in scope, but the goal will be to find the simplest systems that\ncan be composed together to create vibrant emergent behavior.\n\nHopefully will be a never ending source of fun work!\n",
      "mode": "100644",
      "type": "blob"
    },
    "canvas.coffee": {
      "path": "canvas.coffee",
      "content": "TouchCanvas = require \"touch-canvas\"\n\nmodule.exports = (state) ->\n  canvas = TouchCanvas\n    width: 512\n    height: 288\n\n  canvas.on \"touch\", (e) ->\n    Tools[state.activeTool].touch(e, state)\n\n  canvas.on \"move\", (e) ->\n    Tools[state.activeTool].move(e, state)\n\n  canvas.on \"release\", (e) ->\n    Tools[state.activeTool].release(e, state)\n\n  return canvas\n\nSimpleTool = (touch) ->\n  touch: touch\n  move: ->\n  release: ->\n\nTools =\n  pan: do ->\n    startPos = null\n    initialPan = null\n\n    touch: (e, {viewport}) ->\n      startPos = e\n      initialPan =\n        x: viewport.x\n        y: viewport.y\n\n    move: ({x, y}, {viewport}) ->\n      if startPos\n        {x:sX, y:sY} = startPos\n        deltaX = (sX - x) * viewport.width\n        deltaY = (sY - y) * viewport.height\n\n        viewport.x = initialPan.x + deltaX\n        viewport.y = initialPan.y + deltaY\n\n    release: (e, {viewport}) ->\n      console.log e, viewport\n      startPos = null\n\n  inspect: SimpleTool (e, state) ->\n    console.log worldPosition(e, state.viewport)\n\nworldPosition = ({x, y}, viewport) ->\n  x: x * viewport.width\n  y: y * viewport.height\n",
      "mode": "100644",
      "type": "blob"
    },
    "input.coffee": {
      "path": "input.coffee",
      "content": "module.exports = ->\n  active = false\n  \n  document.addEventListener \"mousedown\", (e) ->\n    console.log e\n    active = true\n\n  document.addEventListener \"mousemove\", (e) ->\n    if active\n      console.log e\n\n  document.addEventListener \"mouseup\", (e) ->\n    console.log e\n    active = false\n",
      "mode": "100644",
      "type": "blob"
    },
    "lib/byte-grid.coffee": {
      "path": "lib/byte-grid.coffee",
      "content": "module.exports = ({width, height, data}) ->\n  length = width * height\n\n  data ?= new Uint8Array(length)\n\n  self =\n    region: (rect, iterator) ->\n      xStart = rect.x\n      yStart = rect.y\n\n      y = 0\n      while y < rect.height\n        x = 0\n        while x < rect.width\n          xPosition = x + xStart\n          yPosition = y + yStart\n          iterator self.get(xPosition, yPosition), xPosition, yPosition\n          x += 1\n        y += 1\n\n      return self\n\n    get: (x, y) ->\n      if 0 <= x < width and 0 <= y < height\n        data[y * width + x]\n\n    set: (x, y, value) ->\n      if 0 <= x < width and 0 <= y < height\n        data[y * width + x] = value\n      else\n        throw new Error \"index out of bounds\"\n\n    data: data\n",
      "mode": "100644",
      "type": "blob"
    },
    "lib/extensions.coffee": {
      "path": "lib/extensions.coffee",
      "content": "CanvasRenderingContext2D::withTransform ?= (matrix, block) ->\n  @save()\n\n  @transform(\n    matrix.a,\n    matrix.b,\n    matrix.c,\n    matrix.d,\n    matrix.tx,\n    matrix.ty\n  )\n\n  try\n    block(this)\n  finally\n    @restore()\n\n  return this\n",
      "mode": "100644",
      "type": "blob"
    },
    "main.coffee": {
      "path": "main.coffee",
      "content": "# This is what passes for the game at any point in time. I expect to have\n# a lot of experiments going in other files to mess around with systems!\n\n# TODO\n# Render a byte array as a tile map\n# Designate jobs for your dwarfs\n# Watch as they scamper around\n\nrequire \"./setup\"\n#require(\"./input\")()\n\nWorld = require \"./world\"\n\nRenderer = require \"./render\"\nrenderer = null\n\nview =\n  x: 0\n  y: 0\n  width: 32\n  height: 18\nglobal.view = view\n\nworld = World\n  width: 512\n  height: 512\n\nstate =\n  viewport: view\n  world: world\n  activeTool: \"pan\"\n\ncanvas = require(\"./canvas\")(state)\ndocument.body.appendChild canvas.element()\n\nupdate = ->\n\ndraw = ->\n  renderer?.draw(canvas, state)\n\nstep = ->\n  update()\n  draw()\n\n  requestAnimationFrame step\n\nstep()\n\nPreload = require \"./preload\"\n\nPromise.all [\n  \"Objects/Wall\"\n  \"Objects/Floor\"\n  \"Objects/Ground0\"\n  \"Objects/Ground1\"\n  \"Characters/Player0\"\n  \"Characters/Player1\"\n  \"Objects/Pit0\"\n  \"Objects/Pit1\"\n].map Preload.image\n.then (sheets) ->\n  # Sheet index, sheetX, sheetY\n  tiles = [\n    [1, 1, 19]\n    [6, 1, 11]\n    [1, 8, 7, true]\n    [1, 15, 7, true]\n    [1, 15, 19, true]\n    [0, 3, 3]\n    [4, 0, 0]\n    [5, 0, 0]\n  ]\n\n  characters = [0...8].map (x) ->\n    [4, x, 0]\n\n  renderer = Renderer(sheets, tiles, characters)\n",
      "mode": "100644",
      "type": "blob"
    },
    "pixie.cson": {
      "path": "pixie.cson",
      "content": "width: 1536\nheight: 864\ndependencies:\n  ajax: \"distri/ajax:master\"\n  matrix: \"distri/matrix:master\"\n  \"touch-canvas\": \"distri/touch-canvas:v0.3.1\"\n",
      "mode": "100644",
      "type": "blob"
    },
    "preload.coffee": {
      "path": "preload.coffee",
      "content": "Ajax = require \"ajax\"\najax = Ajax()\n\nbasePath = \"https://danielx.whimsy.space/DawnLike/\"\n\nmodule.exports =\n  image: (name) ->\n    ajax.getBlob(\"#{basePath}#{name}.png?o_0\")\n    .then (blob) ->\n      new Promise (resolve, reject) ->\n        img = new Image\n        img.onload = ->\n          resolve(img)\n        img.onerror = reject\n        img.src = URL.createObjectURL(blob)\n",
      "mode": "100644",
      "type": "blob"
    },
    "render.coffee": {
      "path": "render.coffee",
      "content": "Matrix = require \"matrix\"\n\nmodule.exports = (sheets, tiles, characters) ->\n  S = 16 # Tile size\n\n  autoTileDelta = [\n    [4, -1]\n    [2, 1]\n    [3, 0]\n    [-1, 1]\n    [2, -1]\n    [2, 0]\n    [-1, -1]\n    [-1, 0]\n    [5, 0] # 8\n    [1, 1]\n    [4, 0]\n    [0, 1]\n    [1, -1]\n    [1, 0]\n    [0, -1]\n    [0, 0]\n  ]\n\n  adjacents = [\n    [0, -1]\n    [1, 0]\n    [0, 1]\n    [-1, 0]\n  ]\n  # Compute an auto-tile n-value 0-15\n  # Count up top, right, bottom, left, tiles that are the same\n  # Assume off-grid tiles are the same\n  autoTileValue = (world, tile, x, y) ->\n    mult = 1\n\n    adjacents.map ([dx, dy]) ->\n      (world.getTile(x + dx, y + dy) ? tile) is tile\n    .reduce (total, match) ->\n      total = total + match * mult\n      mult *= 2\n      total\n    , 0\n\n  drawSprite = (canvas, sheet, sx, sy, x, y) ->\n    canvas.drawImage(sheet,\n      sx * S, sy * S, S, S, # Source\n      x * S, y * S, S, S # Destination\n    )\n\n  drawCharacter = (canvas, index, t, x, y) ->\n    [sheetIndex, tx, ty] = characters[index]\n\n    if t % 1000 < 500\n      sheetIndex += 1\n\n    sheet = sheets[sheetIndex]\n\n    drawSprite(canvas, sheet, tx, ty, x, y)\n\n    return\n\n  drawTile = (canvas, world, index, x, y) ->\n    return unless index?\n\n    [sheetIndex, tx, ty, autoTile] = tiles[index]\n    sheet = sheets[sheetIndex]\n\n    if autoTile\n      [dtx, dty] = autoTileDelta[autoTileValue(world, index, x, y)]\n      tx += dtx\n      ty += dty\n\n    drawSprite(canvas, sheet, tx, ty, x, y)\n\n    return\n\n  draw: (canvas, {world, viewport}) ->\n    t = +new Date\n    canvas.fill('rgb(89, 125, 206)')\n\n    transform = Matrix.translate((-S * viewport.x)|0, (-S * viewport.y)|0)\n\n    renderView =\n      x: Math.floor viewport.x\n      y: Math.floor viewport.y\n      width: viewport.width + 1\n      height: viewport.height + 1\n\n    canvas.withTransform transform, (canvas) ->\n      # Draw Tiles\n      world.region renderView, (value, x, y) ->\n        drawTile(canvas, world, value, x, y)\n        return\n\n      # Draw Objects\n\n      # Draw Characters\n      world.entities().forEach ([index, x, y]) ->\n        drawCharacter canvas, index, t, x, y\n",
      "mode": "100644",
      "type": "blob"
    },
    "setup.coffee": {
      "path": "setup.coffee",
      "content": "styleNode = document.createElement(\"style\")\nstyleNode.innerHTML = require \"./style\"\n\ndocument.head.appendChild(styleNode)\n",
      "mode": "100644",
      "type": "blob"
    },
    "style.styl": {
      "path": "style.styl",
      "content": "*\n  box-sizing: border-box\n\nhtml\n  height: 100%\n\nbody\n  background-color: rgb(20,12,28)\n  font-family: \"HelveticaNeue-Light\", \"Helvetica Neue Light\", \"Helvetica Neue\", Helvetica, Arial, \"Lucida Grande\", sans-serif\n  font-weight: 300\n  font-size: 18px\n  height: 100%\n  margin: 0\n  overflow: hidden\n  user-select: none\n\ncanvas\n  bottom: 0\n  position: absolute\n  top: 0\n  left: 0\n  right: 0\n  margin: auto\n  width: 1536px\n  height: 864px\n  image-rendering: -moz-crisp-edges\n  image-rendering: -o-crisp-edges\n  image-rendering: -webkit-optimize-contrast\n  image-rendering: pixelated\n  -ms-interpolation-mode: nearest-neighbor\n",
      "mode": "100644",
      "type": "blob"
    },
    "test/byte-grid.coffee": {
      "path": "test/byte-grid.coffee",
      "content": "ByteGrid = require \"../lib/byte-grid\"\n\ndescribe \"Byte Grid\", ->\n  it \"should be a grid of bytes\", ->\n    grid = ByteGrid\n      width: 10\n      height: 10\n\n    [0...10].forEach (y) ->\n      [0...10].forEach (x) ->\n        grid.set(x, y, x + 10 * y)\n\n    assert.equal grid.get(5, 5), 55\n    assert.equal grid.get(7, 1), 17\n\n  it \"should iterate a region\", ->\n    grid = ByteGrid\n      width: 10\n      height: 10\n\n    [0...10].forEach (y) ->\n      [0...10].forEach (x) ->\n        grid.set(x, y, x + 10 * y)\n\n    rect =\n      x: 3\n      y: 2\n      width: 3\n      height: 2\n\n    grid.region rect, (value, x, y) ->\n      console.log x, y, value\n",
      "mode": "100644",
      "type": "blob"
    },
    "world.coffee": {
      "path": "world.coffee",
      "content": "ByteGrid = require \"./lib/byte-grid\"\n\nrand = (n) ->\n  Math.floor(Math.random() * n)\n\nmodule.exports = (I) ->\n  {width, height} = I\n\n  grid = ByteGrid\n    width: width\n    height: height\n\n  [0...128].forEach (y) ->\n    [0...128].forEach (x) ->\n      grid.set(x, y, rand(3))\n\n  entities = [0...8].map (x) ->\n    [x, 16 + x % 5, 13 + x % 3]\n\n  self =\n    getTile: grid.get\n    region: grid.region\n\n    entities: ->\n      entities\n",
      "mode": "100644",
      "type": "blob"
    },
    "culture/name_generator.coffee": {
      "path": "culture/name_generator.coffee",
      "content": "AngloSaxon = require \"./data/names/anglo-saxon\"\n\nrand = (array) ->\n  index = Math.floor Math.random() * array.length\n\n  array[index]\n\nmodule.exports = ->\n  generate: ->\n    rand(AngloSaxon.male)[0]\n    \n",
      "mode": "100644"
    },
    "culture/data/names/anglo-saxon.coffee": {
      "path": "culture/data/names/anglo-saxon.coffee",
      "content": "# Names extracted from http://www.babynameguide.com/categoryanglo-saxon.asp?strGender=&strAlpha=A&strCat=Anglo-Saxon&strOrder=Name\n\nmodule.exports = \n  male: [[\"Aart\",\"Like an eagle\",\"English\"],[\"Ace\",\"Unity\",\"Latin\"],[\"Acey\",\"Unity\",\"Latin\"],[\"Acton\",\"Town by the oak tree\",\"Old English\"],[\"Acwel\",\"Kills\",\"Unknown\"],[\"Acwellen\",\"Kills\",\"Unknown\"],[\"Aidan\",\"Little fiery one\",\"Irish\"],[\"Aiken\",\"Oaken\",\"English\"],[\"Alban\",\"Town on the white hill\",\"Latin\"],[\"Alden\",\"Old and wise protector\",\"Old English\"],[\"Aldin\",\"Old and wise protector\",\"Old English\"],[\"Aldred\",\"Wise counselor\",\"English\"],[\"Aldwyn\",\"Old friend\",\"English\"],[\"Alfred\",\"Wise counselor\",\"Old English\"],[\"Algar\",\"Noble spearman\",\"German\"],[\"Alger\",\"Noble spearman\",\"German\"],[\"Almund\",\"Defender of the temple\",\"Unknown\"],[\"Alton\",\"From the old town\",\"Old English\"],[\"Alwin\",\"Noble friend\",\"German\"],[\"Anson\",\"Divine\",\"German\"],[\"Archard\",\"Sacred\",\"Unknown\"],[\"Archerd\",\"Sacred\",\"Unknown\"],[\"Archibald\",\"Bold\",\"German\"],[\"Arian\",\"Echanted\",\"Greek\"],[\"Arlice\",\"Honorable\",\"Unknown\"],[\"Arlys\",\"Honorable\",\"Unknown\"],[\"Arlyss\",\"Honorable\",\"Unknown\"],[\"Artair\",\"Bear\",\"Scottish\"],[\"Arth\",\"Rock\",\"English\"],[\"Aston\",\"Eastern settlement\",\"English\"],[\"Audley\",\"Prosperous guardian or old friend\",\"English\"],[\"Averil\",\"Wild boar\",\"English\"],[\"Averill\",\"Wild boar\",\"English\"],[\"Avery\",\"Elf ruler\",\"English\"],[\"Banning\",\"Small and fair\",\"Irish\"],[\"Bar\",\"From the birch meadow\",\"English\"],[\"Barclay\",\"From the birch tree meadow\",\"English\"],[\"Barney\",\"Son of comfort\",\"English\"],[\"Barrett\",\"Commerce\",\"French\"],[\"Barton\",\"From the barley settlement\",\"Old English\"],[\"Basil\",\"Kingly\",\"Latin\"],[\"Baxter\",\"Baker\",\"Old English\"],[\"Bede\",\"Prayer\",\"English\"],[\"Berkeley\",\"From the birch tree meadow\",\"English\"],[\"Bernard\",\"Brave as a bear\",\"German\"],[\"Bertram\",\"Bright raven\",\"English\"],[\"Betlic\",\"Splendid\",\"English\"],[\"Boden\",\"Messenger\",\"French\"],[\"Boniface\",\"To do good\",\"Latin\"],[\"Bordan\",\"From the boar valley\",\"English\"],[\"Borden\",\"From the boar valley\",\"English\"],[\"Brant\",\"Proud\",\"Old English\"],[\"Brecc\",\"Freckled\",\"Irish\"],[\"Brice\",\"Strength or valor\",\"Welsh\"],[\"Brigham\",\"Dwells at the bridge\",\"Old English\"],[\"Bron\",\"Brown or dark\",\"English\"],[\"Bronson\",\"Son of the dark man\",\"English\"],[\"Brun\",\"Dark skinned\",\"German\"],[\"Bryce\",\"Strength or valor\",\"Welsh\"],[\"Burgess\",\"Town dweller\",\"English\"],[\"Burton\",\"From the fortified town\",\"Old English\"],[\"Byron\",\"At the cowshed\",\"Old English\"],[\"Camden\",\"From the winding valley\",\"Scottish\"],[\"Camdene\",\"From the winding valley\",\"Scottish\"],[\"Cary\",\"Descendant of the dark one\",\"Welsh\"],[\"Cecil\",\"Dim sighted or blind\",\"Latin\"],[\"Cerdic\",\"Beloved\",\"Welsh\"],[\"Chad\",\"Warrior\",\"Old English\"],[\"Chapman\",\"Merchant\",\"English\"],[\"Chester\",\"Rocky fortress\",\"Old English\"],[\"Clifford\",\"Ford near the cliff\",\"Old English\"],[\"Clive\",\"Cliff by the river\",\"Old English\"],[\"Colby\",\"Dark or dark haired\",\"Old English\"],[\"Corey\",\"Dweller near a hollow\",\"Irish\"],[\"Cosmo\",\"Order or harmony\",\"Greek\"],[\"Courtland\",\"From the court's land\",\"English\"],[\"Courtnay\",\"Courtier or court attendant\",\"English\"],[\"Courtney\",\"Courtier or court attendant\",\"English\"],[\"Creighton\",\"Dweller by the rocks\",\"English\"],[\"Cyril\",\"Master or Lord\",\"Greek\"],[\"Daegal\",\"Dweller by the dark stream\",\"English\"],[\"Dalston\",\"From Dougal's place\",\"English\"],[\"Delbert\",\"Bright as day\",\"English\"],[\"Dell\",\"Hollow or valley\",\"Old English\"],[\"Deman\",\"Man\",\"Scandinavian\"],[\"Denby\",\"From the Danish settlement\",\"Scandinavian\"],[\"Denton\",\"Settlement in the valley\",\"Old English\"],[\"Derian\",\"Small rocky hill\",\"English\"],[\"Desmond\",\"From south Munster\",\"Irish\"],[\"Devon\",\"Poet\",\"Irish\"],[\"Devyn\",\"Poet\",\"Irish\"],[\"Dougal\",\"Dark stranger\",\"Scottish\"],[\"Douglas\",\"Dark stream or dark river\",\"Scottish\"],[\"Drew\",\"Manly\",\"English\"],[\"Dudley\",\"The people's meadow\",\"Old English\"],[\"Duke\",\"Leader\",\"French\"],[\"Durwin\",\"Friend of the deer\",\"English\"],[\"Durwyn\",\"Friend of the deer\",\"English\"],[\"Eamon\",\"Wealthy guardian\",\"Irish\"],[\"Earl\",\"Nobleman\",\"English\"],[\"Earle\",\"Nobleman\",\"English\"],[\"Eddison\",\"Son of Edward\",\"English\"],[\"Edgar\",\"Lucky spearman\",\"Old English\"],[\"Edgard\",\"Lucky spearman\",\"Old English\"],[\"Edlin\",\"Wealthy friend\",\"English\"],[\"Edlyn\",\"Wealthy friend\",\"English\"],[\"Edmond\",\"Prosperous protector\",\"Old English\"],[\"Edmund\",\"Prosperous protector\",\"Old English\"],[\"Edric\",\"Wealthy ruler\",\"English\"],[\"Edsel\",\"Rich mans house\",\"English\"],[\"Edson\",\"Son of Edward\",\"English\"],[\"Edward\",\"Wealthy guardian\",\"Old English\"],[\"Edwin\",\"Prosperous friend\",\"Old English\"],[\"Edwyn\",\"Prosperous friend\",\"Old English\"],[\"Egbert\",\"Bright sword\",\"English\"],[\"Eldon\",\"Foreign hill\",\"Old English\"],[\"Eldred\",\"Old and wise advisor\",\"English\"],[\"Eldrid\",\"Old and wise advisor\",\"English\"],[\"Eldwin\",\"Old and wise friend\",\"English\"],[\"Eldwyn\",\"Old and wise friend\",\"English\"],[\"Elmer\",\"Noble\",\"Old English\"],[\"Emmet\",\"Industrious\",\"German\"],[\"Erian\",\"Enchanted\",\"Greek\"],[\"Erol\",\"Courageous\",\"Turkish\"],[\"Errol\",\"Wanderer\",\"Latin\"],[\"Esmond\",\"Wealthy protector\",\"English\"],[\"Faran\",\"Baker\",\"Arabic\"],[\"Felix\",\"Fortunate or happy\",\"Latin\"],[\"Fenton\",\"Marshland farm\",\"Old English\"],[\"Feran\",\"Traveler\",\"Old english\"],[\"Finian\",\"Light skinned\",\"Irish\"],[\"Firman\",\"Firm or strong\",\"French\"],[\"Fleming\",\"Dutchman from Flanders\",\"Old English\"],[\"Fletcher\",\"Arrow maker\",\"Old English\"],[\"Floyd\",\"Gray or white haired\",\"English\"],[\"Ford\",\"Dweller near the ford\",\"Old English\"],[\"Freeman\",\"Free man\",\"English\"],[\"Gaderian\",\"Gathers\",\"Unknown\"],[\"Galan\",\"Healer\",\"Greek\"],[\"Gar\",\"Spear\",\"English\"],[\"Gareth\",\"Gentle\",\"Welsh\"],[\"Garr\",\"Spear\",\"English\"],[\"Garrett\",\"Mighty with a spear\",\"Irish\"],[\"Garvin\",\"Friend in battle\",\"Old English\"],[\"Geoff\",\"Peaceful\",\"English\"],[\"Geoffrey\",\"Peaceful\",\"English\"],[\"Geraint\",\"Old\",\"English\"],[\"Gerard\",\"Brave with a spear\",\"Old English\"],[\"Gervaise\",\"Honorable\",\"French\"],[\"Giles\",\"Shield bearer\",\"French\"],[\"Godric\",\"Rules with God\",\"Unknown\"],[\"Godwine\",\"Friend of God\",\"Old English\"],[\"Gordie\",\"Hill near the meadow\",\"Old English\"],[\"Gordon\",\"Hill near the meadow\",\"Old English\"],[\"Gordy\",\"Hill near the meadow\",\"Old English\"],[\"Graeme\",\"Grand home\",\"Scottish\"],[\"Graham\",\"Grand home\",\"English\"],[\"Grahem\",\"Grand home\",\"English\"],[\"Gram\",\"Grand home\",\"English\"],[\"Grimm\",\"Fierce\",\"English\"],[\"Grimme\",\"Fierce\",\"English\"],[\"Grindan\",\"Sharp\",\"Unknown\"],[\"Hall\",\"That which is covered\",\"Old English\"],[\"Ham\",\"Hot\",\"Hebrew\"],[\"Holt\",\"Forest\",\"English\"],[\"Hugh\",\"Bright mind\",\"English\"],[\"Ingram\",\"Angel\",\"Old English\"],[\"Irwin\",\"Sea friend\",\"English\"],[\"Irwyn\",\"Sea friend\",\"English\"],[\"Ivor\",\"Archer's bow\",\"Scandinavian\"],[\"Jarvis\",\"Servant with a spear\",\"German\"],[\"Jeffrey\",\"Divinely peaceful\",\"Old English\"],[\"Judd\",\"Praised\",\"Hebrew\"],[\"Kendrick\",\"Royal ruler\",\"Scottish\"],[\"Kendryek\",\"Son of henry\",\"Irish\"],[\"Kenric\",\"Royal ruler\",\"English\"],[\"Kenton\",\"The royal settlement\",\"Old English\"],[\"Kenway\",\"Brave warrior\",\"Old English\"],[\"Kim\",\"Warrior chief\",\"Old English\"],[\"Kimball\",\"Warrior chief\",\"English\"],[\"King\",\"Monarch\",\"Old English\"],[\"Kingsley\",\"From the King's meadow\",\"Old English\"],[\"Kipp\",\"From the pointed hill\",\"Old English\"],[\"Landry\",\"Ruler\",\"Old English\"],[\"Lang\",\"Tall man\",\"Scandinavian\"],[\"Lange\",\"Tall man\",\"Scandinavian\"],[\"Lar\",\"Crowned with laurels\",\"Scandinavian\"],[\"Leanian\",\"Lion man or brave as a lion\",\"Greek\"],[\"Leax\",\"Salmon\",\"Unknown\"],[\"Leighton\",\"From the meadow farm\",\"Old English\"],[\"Leland\",\"From the meadow land\",\"Old English\"],[\"Leng\",\"Tall man\",\"Scandinavian\"],[\"Lex\",\"Defender of mankind\",\"Greek\"],[\"Lin\",\"Lives by the linden tree hill\",\"English\"],[\"Linn\",\"Lives by the linden tree hill\",\"English\"],[\"Lister\",\"Dyer\",\"English\"],[\"Lloyd\",\"Grey haired\",\"Welsh\"],[\"Lucan\",\"Bringer of light\",\"Old English\"],[\"Lunden\",\"From London\",\"English\"],[\"Lyn\",\"Waterfall\",\"English\"],[\"Lyndon\",\"Lives by the linden tree hill\",\"Old English\"],[\"Lynn\",\"Waterfall\",\"English\"],[\"Magen\",\"Protector\",\"Hebrew\"],[\"Mann\",\"Hero\",\"German\"],[\"Mannix\",\"Monk\",\"Irish\"],[\"Manton\",\"From the hero's town\",\"English\"],[\"Maxwell\",\"Dweller by the spring\",\"Scottish\"],[\"Merlin\",\"Sea hill\",\"Celtic\"],[\"Merton\",\"Sea town\",\"English\"],[\"Montgomery\",\"From the wealthy man's mountain\",\"Old English\"],[\"Morton\",\"Town by thr moor\",\"Old English\"],[\"Ned\",\"Wealthy guardian\",\"English\"],[\"Nerian\",\"Protects\",\"Unknown\"],[\"Neville\",\"New town\",\"French\"],[\"Newton\",\"From the new town\",\"English\"],[\"Nodin\",\"Wind\",\"American\"],[\"Norman\",\"Norseman\",\"French\"],[\"Norris\",\"Northerner\",\"French\"],[\"Norton\",\"From the north farm\",\"English\"],[\"Norvel\",\"From the north town\",\"English\"],[\"Norville\",\"From the north town\",\"French\"],[\"Nyle\",\"Island\",\"English\"],[\"Octe\",\"A son of Hengist\",\"Unknown\"],[\"Odel\",\"Forested hill\",\"English\"],[\"Odell\",\"Forested hill\",\"English\"],[\"Odi\",\"Ruler\",\"Scandinavian\"],[\"Odin\",\"God of all\",\"Old Norse\"],[\"Odon\",\"Ruler\",\"Scandinavian\"],[\"Ody\",\"Ruler\",\"Scandinavian\"],[\"Orde\",\"Beginning\",\"Latin\"],[\"Ormod\",\"Bear mountain\",\"English\"],[\"Orson\",\"Bear like\",\"Latin\"],[\"Orville\",\"Golden village\",\"French\"],[\"Orvin\",\"Brave friend or spear friend\",\"English\"],[\"Orvyn\",\"Brave friend or spear friend\",\"English\"],[\"Osmond\",\"Divine protection\",\"Old English\"],[\"Osric\",\"Divine ruler\",\"English\"],[\"Oswald\",\"Divine power\",\"Old English\"],[\"Oswin\",\"Divine friend\",\"Old English\"],[\"Page\",\"Attendent\",\"French\"],[\"Paige\",\"Attendent\",\"French\"],[\"Patton\",\"Warrior's town\",\"Old English\"],[\"Pax\",\"Peaceful\",\"Latin\"],[\"Paxton\",\"Peaceful town\",\"Latin\"],[\"Payne\",\"Man from the country\",\"Latin\"],[\"Pearce\",\"Rock\",\"English\"],[\"Pearson\",\"Son of Peter\",\"English\"],[\"Perry\",\"Dweller by the pear tree\",\"English\"],[\"Pierce\",\"Rock\",\"English\"],[\"Piers\",\"Lover of horses\",\"English\"],[\"Putnam\",\"Dweller by the pond\",\"English\"],[\"Ramm\",\"Ram\",\"English\"],[\"Rand\",\"Wolf's shield\",\"Old English\"],[\"Randolf\",\"Wolf shield\",\"Scandinavian\"],[\"Rawlins\",\"Famous in the land\",\"French\"],[\"Ray\",\"Dear brook\",\"English\"],[\"Rice\",\"Noble or rich\",\"English\"],[\"Ripley\",\"Meadow near the river\",\"English\"],[\"Ro\",\"Red haired\",\"English\"],[\"Roan\",\"Tree with red berries\",\"English\"],[\"Roe\",\"Deer\",\"English\"],[\"Row\",\"Red haired\",\"English\"],[\"Rowan\",\"Tree with red berries\",\"English\"],[\"Rowe\",\"Red haired\",\"English\"],[\"Roweson\",\"Son of the redhead\",\"English\"],[\"Rowson\",\"Son of the redhead\",\"English\"],[\"Ryce\",\"Powerful\",\"English\"],[\"Seaton\",\"Town near the sea\",\"English\"],[\"Seaver\",\"Fierce stronghold\",\"English\"],[\"Selwin\",\"Friend at court\",\"English\"],[\"Selwyn\",\"Friend at court\",\"English\"],[\"Sener\",\"Bringer of joy\",\"Turkish\"],[\"Sever\",\"Fierce stronghold\",\"English\"],[\"Seward\",\"Sea gaurdian\",\"Old English\"],[\"Sheldon\",\"Farm on the ledge\",\"Old English\"],[\"Shelley\",\"From the ledge meadow\",\"Old English\"],[\"Shelny\",\"From the ledge farm\",\"Old English\"],[\"Shepard\",\"Shepherd\",\"English\"],[\"Shephard\",\"Shepherd\",\"English\"],[\"Sheply\",\"From the sheep meadow\",\"English\"],[\"Sherard\",\"Of glorious valor\",\"English\"],[\"Sherwin\",\"Quick as the wind\",\"English\"],[\"Sherwyn\",\"Quick as the wind\",\"English\"],[\"Steadman\",\"Dwells at the farm\",\"English\"],[\"Stedman\",\"Dwells at the farm\",\"English\"],[\"Stepan\",\"Exalts\",\"Russian\"],[\"Stewart\",\"Steward\",\"Old English\"],[\"Stewert\",\"Steward\",\"Old English\"],[\"Stillman\",\"Quiet\",\"English\"],[\"Stilwell\",\"From the tranquil stream\",\"English\"],[\"Storm\",\"Tempestuous\",\"English\"],[\"Stuart\",\"Steward\",\"Old English\"],[\"Sutton\",\"Southern town\",\"Old English\"],[\"Tamar\",\"Palm tree\",\"Hebrew\"],[\"Tedman\",\"Protector of the land\",\"Old English\"],[\"Tedmund\",\"Protector of the land\",\"Old English\"],[\"Teller\",\"Storyteller\",\"Old English\"],[\"Tolan\",\"From the taxed land\",\"Old English\"],[\"Toland\",\"From the taxed land\",\"Old English\"],[\"Torr\",\"Watchtower\",\"Old English\"],[\"Trace\",\"Harvester\",\"Greek\"],[\"Tracey\",\"Harvester\",\"Greek\"],[\"Tracy\",\"Harvester\",\"Greek\"],[\"Tredan\",\"Tramples\",\"English\"],[\"Treddian\",\"Leaves\",\"English\"],[\"Upton\",\"From the high town\",\"Old English\"],[\"Verge\",\"Staff bearer\",\"Latin\"],[\"Vernon\",\"Youthful or springlike\",\"Latin\"],[\"Virgil\",\"Staff bearer\",\"Latin\"],[\"Wallace\",\"From Wales\",\"English\"],[\"Wallis\",\"From Wales\",\"English\"],[\"Ward\",\"Watchman\",\"Old English\"],[\"Ware\",\"Cautious\",\"Old English\"],[\"Whitney\",\"From the white island\",\"Old English\"],[\"Wilbur\",\"Walled stronghold\",\"Old English\"],[\"Wilfrid\",\"Resolute peacemaker\",\"English\"],[\"Winchell\",\"Bend in the road\",\"Old English\"],[\"Winston\",\"Friendly town\",\"Old English\"],[\"Woodrow\",\"Dweller by the wood\",\"Old English\"],[\"Wylie\",\"Enchanting\",\"English\"],[\"Wyman\",\"Fighter\",\"English\"],[\"Wynchell\",\"Drawer of water\",\"English\"],[\"Wyne\",\"Friend\",\"English\"]]\n  female: [[\"Acca\",\"Unity\",\"Latin\"],[\"Afra\",\"Young doe\",\"Hebrew\"],[\"Afton\",\"From Afton\",\"English\"],[\"Ainsley\",\"My own meadow\",\"Scottish\"],[\"Aisly\",\"Dwells at the ash tree meadow\",\"Scottish\"],[\"Alberta\",\"Noble and bright\",\"German\"],[\"Alodia\",\"Rich\",\"Unknown\"],[\"Alodie\",\"Rich\",\"Unknown\"],[\"Althena\",\"Healer\",\"Greek\"],[\"Amity\",\"Friendship\",\"Latin\"],[\"Annis\",\"Pure\",\"English\"],[\"Antonia\",\"Priceless, inestimable or praiseworthy\",\"Latin\"],[\"Ara\",\"Opinionated\",\"Arabic\"],[\"Ardith\",\"Flowering field\",\"Hebrew\"],[\"Arleigh\",\"Meadow of the hare\",\"Old English\"],[\"Arlette\",\"Pledge\",\"Old English\"],[\"Ashley\",\"Meadow of ash trees\",\"Old English\"],[\"Audrey\",\"Noble strength\",\"Old English\"],[\"Augusta\",\"Venerable\",\"Latin\"],[\"Beatrix\",\"She who brings happiness\",\"German\"],[\"Becky\",\"Bound\",\"American\"],[\"Berenice\",\"She will bring victory\",\"Greek\"],[\"Bliss\",\"Delight joy or happiness\",\"Old English\"],[\"Blythe\",\"Cheerful\",\"Old English\"],[\"Bonnie\",\"Pretty\",\"English\"],[\"Breck\",\"Freckled\",\"Irish\"],[\"Bree\",\"Strong\",\"Irish\"],[\"Bridget\",\"Strength\",\"Irish\"],[\"Brimlad\",\"Seaway\",\"Unknown\"],[\"Britt\",\"From Britian\",\"Old English\"],[\"Cate\",\"Pure\",\"Greek\"],[\"Catherine\",\"Pure\",\"Greek\"],[\"Catheryn\",\"Pure\",\"Greek\"],[\"Cathryn\",\"Pure\",\"Greek\"],[\"Chelsea\",\"Port or landing place\",\"Old English\"],[\"Clover\",\"Clover\",\"Old English\"],[\"Constance\",\"Constant or steadfast\",\"Latin\"],[\"Coventina\",\"Water Goddess\",\"Greek\"],[\"Cwen\",\"Queen\",\"Welsh\"],[\"Cwene\",\"Queen\",\"Welsh\"],[\"Daisy\",\"Eye of the day\",\"Old English\"],[\"Darel\",\"Darling or beloved\",\"French\"],[\"Darelene\",\"Darling\",\"French\"],[\"Darelle\",\"Darling or beloved\",\"French\"],[\"Darlene\",\"Darling\",\"French\"],[\"Darline\",\"Darling\",\"French\"],[\"Daryl\",\"Darling\",\"French\"],[\"Dawn\",\"Daybreak or sunrise\",\"English\"],[\"Devona\",\"From Devonshire\",\"English\"],[\"Diera\",\"From Diera\",\"Unknown\"],[\"Dolly\",\"Gift of God\",\"American\"],[\"Domino\",\"Belonging to the Lord\",\"English\"],[\"Doretta\",\"Gift of God\",\"English\"],[\"Doris\",\"Of the sea\",\"Greek\"],[\"Eadlin\",\"Princess\",\"Unknown\"],[\"Earlene\",\"Noblewoman\",\"English\"],[\"Eartha\",\"Earthy\",\"English\"],[\"Easter\",\"Born at Easter\",\"English\"],[\"Eda\",\"Wealthy\",\"English\"],[\"Edina\",\"Ardent\",\"Irish\"],[\"Edit\",\"Prosperous in war\",\"Old English\"],[\"Edita\",\"Prosperous in war\",\"Spanish\"],[\"Edith\",\"Prosperous in war\",\"Old English\"],[\"Editha\",\"Prosperous in war\",\"German\"],[\"Edla\",\"Princess\",\"Unknown\"],[\"Edlin\",\"Princess\",\"English\"],[\"Edwina\",\"Prosperous friend\",\"Old English\"],[\"Edyt\",\"Prosperous in war\",\"Old English\"],[\"Edyth\",\"Prosperous in war\",\"Old English\"],[\"Elda\",\"Old and wise protector\",\"Old English\"],[\"Elene\",\"Light\",\"Greek\"],[\"Elga\",\"Pious\",\"Scandinavian\"],[\"Ellette\",\"Little elf\",\"French\"],[\"Elswyth\",\"Elf from the willow trees\",\"English\"],[\"Elva\",\"Elfin\",\"Old English\"],[\"Elvia\",\"Elfin\",\"Old English\"],[\"Elvina\",\"Elfin\",\"Old English\"],[\"Elwine\",\"Elf wise friend\",\"English\"],[\"Elwyna\",\"Elf wise friend\",\"English\"],[\"Engel\",\"Angel\",\"German\"],[\"Erlene\",\"Noblewoman\",\"English\"],[\"Erlina\",\"Noblewoman\",\"English\"],[\"Erline\",\"Noblewoman\",\"English\"],[\"Esma\",\"Emerald\",\"French\"],[\"Esme\",\"Emerald\",\"French\"],[\"Ethal\",\"Noble\",\"Old English\"],[\"Eugenia\",\"Well born or noble\",\"French\"],[\"Faline\",\"Catlike\",\"Latin\"],[\"Fancy\",\"Whimsical\",\"English\"],[\"Fanny\",\"Free\",\"American\"],[\"Felice\",\"Fortunate or happy\",\"Latin\"],[\"Flair\",\"Style or verve\",\"English\"],[\"Flora\",\"Flower\",\"Latin\"],[\"Florence\",\"Blooming or flowering\",\"Latin\"],[\"Frederica\",\"Peaceful ruler\",\"German\"],[\"Garyn\",\"Mighty with a spear\",\"English\"],[\"Gay\",\"Light hearted\",\"French\"],[\"Gayna\",\"White wave\",\"English\"],[\"Gemma\",\"Precious stone\",\"Latin\"],[\"Georgina\",\"Farmer\",\"English\"],[\"Gillian\",\"Downy bearded\",\"Latin\"],[\"Gladys\",\"Princess\",\"Irish\"],[\"Glenna\",\"Secluded valley or glen\",\"Irish\"],[\"Guinevere\",\"White wave\",\"Welsh\"],[\"Gwen\",\"White wave\",\"Welsh\"],[\"Gwendolyn\",\"White wave\",\"Welsh\"],[\"Harriet\",\"Ruler of an enclosure\",\"French\"],[\"Henrietta\",\"Ruler of the enclosure\",\"English\"],[\"Hild\",\"Battle maid\",\"German\"],[\"Hilda\",\"Battle maid\",\"German\"],[\"Hollis\",\"Near the holly bushes\",\"Old English\"],[\"Jetta\",\"A deep or glossy black\",\"Greek\"],[\"Joan\",\"God is gracious\",\"Hebrew\"],[\"Jody\",\"Praised\",\"American\"],[\"Juliana\",\"Downy bearded or youthful\",\"Latin\"],[\"Katie\",\"Pure\",\"English\"],[\"Keeley\",\"Brave warrior\",\"Irish\"],[\"Kendra\",\"Knowing\",\"Old english\"],[\"Leila\",\"Dark beauty\",\"Hebrew\"],[\"Lilian\",\"Lily\",\"Latin\"],[\"Linette\",\"Bird\",\"French\"],[\"Linn\",\"Waterfall\",\"English\"],[\"Lizbeth\",\"Consecrated to God\",\"English\"],[\"Lois\",\"Famous warrior\",\"German\"],[\"Lora\",\"Crowned with laurels\",\"Latin\"],[\"Loretta\",\"Crowned with laurels\",\"English\"],[\"Lorna\",\"Crowned with laurels\",\"Latin\"],[\"Lucetta\",\"Bringer of light\",\"English\"],[\"Lyn\",\"Waterfall\",\"English\"],[\"Lynet\",\"Idol\",\"Welsh\"],[\"Lynette\",\"Idol\",\"Welsh\"],[\"Lynn\",\"Waterfall\",\"English\"],[\"Lynna\",\"Waterfall\",\"English\"],[\"Lynne\",\"Waterfall\",\"English\"],[\"Mae\",\"Great\",\"English\"],[\"Maida\",\"Maiden\",\"English\"],[\"Mariam\",\"Bitter or sea of bitterness\",\"Hebrew\"],[\"Marian\",\"Bitter or sea of bitterness\",\"English\"],[\"Maud\",\"Mighty battle maiden\",\"English\"],[\"Maureen\",\"Bitter\",\"Irish\"],[\"Maxine\",\"The greatest\",\"Latin\"],[\"May\",\"To increase\",\"Latin\"],[\"Mayda\",\"Maiden\",\"Unknown\"],[\"Megan\",\"Pearl\",\"Irish\"],[\"Meghan\",\"Pearl\",\"Irish\"],[\"Mercia\",\"Compassion\",\"English\"],[\"Meryl\",\"Blackbird\",\"Latin\"],[\"Mildred\",\"Gentle advisor\",\"Old english\"],[\"Moira\",\"Sea of bitterness\",\"Irish\"],[\"Moire\",\"Sea of bitterness\",\"French\"],[\"Mona\",\"Noble\",\"Irish\"],[\"Nelda\",\"From the Alder trees\",\"Unknown\"],[\"Noreen\",\"Bright torch\",\"Greek\"],[\"Norma\",\"Man from the north\",\"German\"],[\"Octavia\",\"Eighth\",\"Italian\"],[\"Odelia\",\"Wealthy\",\"French\"],[\"Odelina\",\"Wealthy\",\"French\"],[\"Odelinda\",\"Wealthy\",\"French\"],[\"Odella\",\"Wealthy\",\"French\"],[\"Odelyn\",\"Wealthy\",\"French\"],[\"Odelyna\",\"Wealthy\",\"French\"],[\"Odette\",\"Wealthy\",\"French\"],[\"Odilia\",\"Wealthy\",\"French\"],[\"Ora\",\"Seacoast\",\"English\"],[\"Orva\",\"Worth gold\",\"French\"],[\"Ottilie\",\"Little wealthy one\",\"Unknown\"],[\"Peace\",\"Calm or tranquil\",\"English\"],[\"Peggy\",\"Pearl\",\"English\"],[\"Petra\",\"Rock\",\"Latin\"],[\"Petula\",\"Rock\",\"English\"],[\"Philippa\",\"Lover of horses\",\"Greek\"],[\"Philomena\",\"Lover of strength\",\"Greek\"],[\"Phyllis\",\"Leaf\",\"Greek\"],[\"Polly\",\"Small\",\"Latin\"],[\"Portia\",\"Pig\",\"Latin\"],[\"Primrose\",\"Primrose\",\"English\"],[\"Prudence\",\"Provident\",\"Latin\"],[\"Queenie\",\"Queen\",\"Old english\"],[\"Quenna\",\"Queen\",\"Old English\"],[\"Randi\",\"Wolf shield\",\"German\"],[\"Rexanne\",\"Gracious king\",\"English\"],[\"Rexella\",\"King of light\",\"English\"],[\"Rowena\",\"White haired\",\"Welsh\"],[\"Sheena\",\"God is gracious\",\"Hebrew\"],[\"Shelley\",\"From the ledge meadow\",\"English\"],[\"Sibley\",\"Fiendly\",\"English\"],[\"Silver\",\"Lustrous\",\"Old English\"],[\"Silvia\",\"Of the woods\",\"Latin\"],[\"Sunn\",\"Cheerful\",\"English\"],[\"Sunniva\",\"Gift of the sun\",\"Scandinavian\"],[\"Synne\",\"Cheerful\",\"English\"],[\"Synnove\",\"Gift of the sun\",\"Unknown\"],[\"Tait\",\"Pleasant and bright\",\"Old English\"],[\"Taite\",\"Pleasant and bright\",\"Old English\"],[\"Tate\",\"Pleasant and bright\",\"Old English\"],[\"Tayte\",\"Pleasant and bright\",\"English\"],[\"Thea\",\"Goddess\",\"Greek\"],[\"Udela\",\"Wealthy\",\"English\"],[\"Udele\",\"Wealthy\",\"English\"],[\"Verona\",\"Bringer of victory\",\"Italian\"],[\"Wanda\",\"Young tree\",\"German\"],[\"Whitney\",\"White island\",\"Old english\"],[\"Wilda\",\"Wild\",\"German\"],[\"Willa\",\"Resolute protector\",\"German\"],[\"Wilona\",\"Hoped for\",\"English\"],[\"Wilone\",\"Hoped for\",\"English\"],[\"Zara\",\"Princess\",\"Hebrew\"],[\"Zelda\",\"Companion\",\"Old english\"]]\n",
      "mode": "100644"
    },
    "test/culture/names.coffee": {
      "path": "test/culture/names.coffee",
      "content": "NameGenerator = require \"/culture/name_generator\"\n\ndescribe \"Culture Name Generator\", ->\n  it \"should generate random names\", ->\n    generator = NameGenerator()\n\n    [0..10].forEach ->\n      console.log generator.generate()\n",
      "mode": "100644"
    }
  },
  "distribution": {
    "canvas": {
      "path": "canvas",
      "content": "(function() {\n  var SimpleTool, Tools, TouchCanvas, worldPosition;\n\n  TouchCanvas = require(\"touch-canvas\");\n\n  module.exports = function(state) {\n    var canvas;\n    canvas = TouchCanvas({\n      width: 512,\n      height: 288\n    });\n    canvas.on(\"touch\", function(e) {\n      return Tools[state.activeTool].touch(e, state);\n    });\n    canvas.on(\"move\", function(e) {\n      return Tools[state.activeTool].move(e, state);\n    });\n    canvas.on(\"release\", function(e) {\n      return Tools[state.activeTool].release(e, state);\n    });\n    return canvas;\n  };\n\n  SimpleTool = function(touch) {\n    return {\n      touch: touch,\n      move: function() {},\n      release: function() {}\n    };\n  };\n\n  Tools = {\n    pan: (function() {\n      var initialPan, startPos;\n      startPos = null;\n      initialPan = null;\n      return {\n        touch: function(e, _arg) {\n          var viewport;\n          viewport = _arg.viewport;\n          startPos = e;\n          return initialPan = {\n            x: viewport.x,\n            y: viewport.y\n          };\n        },\n        move: function(_arg, _arg1) {\n          var deltaX, deltaY, sX, sY, viewport, x, y;\n          x = _arg.x, y = _arg.y;\n          viewport = _arg1.viewport;\n          if (startPos) {\n            sX = startPos.x, sY = startPos.y;\n            deltaX = (sX - x) * viewport.width;\n            deltaY = (sY - y) * viewport.height;\n            viewport.x = initialPan.x + deltaX;\n            return viewport.y = initialPan.y + deltaY;\n          }\n        },\n        release: function(e, _arg) {\n          var viewport;\n          viewport = _arg.viewport;\n          console.log(e, viewport);\n          return startPos = null;\n        }\n      };\n    })(),\n    inspect: SimpleTool(function(e, state) {\n      return console.log(worldPosition(e, state.viewport));\n    })\n  };\n\n  worldPosition = function(_arg, viewport) {\n    var x, y;\n    x = _arg.x, y = _arg.y;\n    return {\n      x: x * viewport.width,\n      y: y * viewport.height\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "input": {
      "path": "input",
      "content": "(function() {\n  module.exports = function() {\n    var active;\n    active = false;\n    document.addEventListener(\"mousedown\", function(e) {\n      console.log(e);\n      return active = true;\n    });\n    document.addEventListener(\"mousemove\", function(e) {\n      if (active) {\n        return console.log(e);\n      }\n    });\n    return document.addEventListener(\"mouseup\", function(e) {\n      console.log(e);\n      return active = false;\n    });\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "lib/byte-grid": {
      "path": "lib/byte-grid",
      "content": "(function() {\n  module.exports = function(_arg) {\n    var data, height, length, self, width;\n    width = _arg.width, height = _arg.height, data = _arg.data;\n    length = width * height;\n    if (data == null) {\n      data = new Uint8Array(length);\n    }\n    return self = {\n      region: function(rect, iterator) {\n        var x, xPosition, xStart, y, yPosition, yStart;\n        xStart = rect.x;\n        yStart = rect.y;\n        y = 0;\n        while (y < rect.height) {\n          x = 0;\n          while (x < rect.width) {\n            xPosition = x + xStart;\n            yPosition = y + yStart;\n            iterator(self.get(xPosition, yPosition), xPosition, yPosition);\n            x += 1;\n          }\n          y += 1;\n        }\n        return self;\n      },\n      get: function(x, y) {\n        if ((0 <= x && x < width) && (0 <= y && y < height)) {\n          return data[y * width + x];\n        }\n      },\n      set: function(x, y, value) {\n        if ((0 <= x && x < width) && (0 <= y && y < height)) {\n          return data[y * width + x] = value;\n        } else {\n          throw new Error(\"index out of bounds\");\n        }\n      },\n      data: data\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "lib/extensions": {
      "path": "lib/extensions",
      "content": "(function() {\n  var _base;\n\n  if ((_base = CanvasRenderingContext2D.prototype).withTransform == null) {\n    _base.withTransform = function(matrix, block) {\n      this.save();\n      this.transform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n      try {\n        block(this);\n      } finally {\n        this.restore();\n      }\n      return this;\n    };\n  }\n\n}).call(this);\n",
      "type": "blob"
    },
    "main": {
      "path": "main",
      "content": "(function() {\n  var Preload, Renderer, World, canvas, draw, renderer, state, step, update, view, world;\n\n  require(\"./setup\");\n\n  World = require(\"./world\");\n\n  Renderer = require(\"./render\");\n\n  renderer = null;\n\n  view = {\n    x: 0,\n    y: 0,\n    width: 32,\n    height: 18\n  };\n\n  global.view = view;\n\n  world = World({\n    width: 512,\n    height: 512\n  });\n\n  state = {\n    viewport: view,\n    world: world,\n    activeTool: \"pan\"\n  };\n\n  canvas = require(\"./canvas\")(state);\n\n  document.body.appendChild(canvas.element());\n\n  update = function() {};\n\n  draw = function() {\n    return renderer != null ? renderer.draw(canvas, state) : void 0;\n  };\n\n  step = function() {\n    update();\n    draw();\n    return requestAnimationFrame(step);\n  };\n\n  step();\n\n  Preload = require(\"./preload\");\n\n  Promise.all([\"Objects/Wall\", \"Objects/Floor\", \"Objects/Ground0\", \"Objects/Ground1\", \"Characters/Player0\", \"Characters/Player1\", \"Objects/Pit0\", \"Objects/Pit1\"].map(Preload.image)).then(function(sheets) {\n    var characters, tiles;\n    tiles = [[1, 1, 19], [6, 1, 11], [1, 8, 7, true], [1, 15, 7, true], [1, 15, 19, true], [0, 3, 3], [4, 0, 0], [5, 0, 0]];\n    characters = [0, 1, 2, 3, 4, 5, 6, 7].map(function(x) {\n      return [4, x, 0];\n    });\n    return renderer = Renderer(sheets, tiles, characters);\n  });\n\n}).call(this);\n",
      "type": "blob"
    },
    "pixie": {
      "path": "pixie",
      "content": "module.exports = {\"width\":1536,\"height\":864,\"dependencies\":{\"ajax\":\"distri/ajax:master\",\"matrix\":\"distri/matrix:master\",\"touch-canvas\":\"distri/touch-canvas:v0.3.1\"}};",
      "type": "blob"
    },
    "preload": {
      "path": "preload",
      "content": "(function() {\n  var Ajax, ajax, basePath;\n\n  Ajax = require(\"ajax\");\n\n  ajax = Ajax();\n\n  basePath = \"https://danielx.whimsy.space/DawnLike/\";\n\n  module.exports = {\n    image: function(name) {\n      return ajax.getBlob(\"\" + basePath + name + \".png?o_0\").then(function(blob) {\n        return new Promise(function(resolve, reject) {\n          var img;\n          img = new Image;\n          img.onload = function() {\n            return resolve(img);\n          };\n          img.onerror = reject;\n          return img.src = URL.createObjectURL(blob);\n        });\n      });\n    }\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "render": {
      "path": "render",
      "content": "(function() {\n  var Matrix;\n\n  Matrix = require(\"matrix\");\n\n  module.exports = function(sheets, tiles, characters) {\n    var S, adjacents, autoTileDelta, autoTileValue, drawCharacter, drawSprite, drawTile;\n    S = 16;\n    autoTileDelta = [[4, -1], [2, 1], [3, 0], [-1, 1], [2, -1], [2, 0], [-1, -1], [-1, 0], [5, 0], [1, 1], [4, 0], [0, 1], [1, -1], [1, 0], [0, -1], [0, 0]];\n    adjacents = [[0, -1], [1, 0], [0, 1], [-1, 0]];\n    autoTileValue = function(world, tile, x, y) {\n      var mult;\n      mult = 1;\n      return adjacents.map(function(_arg) {\n        var dx, dy, _ref;\n        dx = _arg[0], dy = _arg[1];\n        return ((_ref = world.getTile(x + dx, y + dy)) != null ? _ref : tile) === tile;\n      }).reduce(function(total, match) {\n        total = total + match * mult;\n        mult *= 2;\n        return total;\n      }, 0);\n    };\n    drawSprite = function(canvas, sheet, sx, sy, x, y) {\n      return canvas.drawImage(sheet, sx * S, sy * S, S, S, x * S, y * S, S, S);\n    };\n    drawCharacter = function(canvas, index, t, x, y) {\n      var sheet, sheetIndex, tx, ty, _ref;\n      _ref = characters[index], sheetIndex = _ref[0], tx = _ref[1], ty = _ref[2];\n      if (t % 1000 < 500) {\n        sheetIndex += 1;\n      }\n      sheet = sheets[sheetIndex];\n      drawSprite(canvas, sheet, tx, ty, x, y);\n    };\n    drawTile = function(canvas, world, index, x, y) {\n      var autoTile, dtx, dty, sheet, sheetIndex, tx, ty, _ref, _ref1;\n      if (index == null) {\n        return;\n      }\n      _ref = tiles[index], sheetIndex = _ref[0], tx = _ref[1], ty = _ref[2], autoTile = _ref[3];\n      sheet = sheets[sheetIndex];\n      if (autoTile) {\n        _ref1 = autoTileDelta[autoTileValue(world, index, x, y)], dtx = _ref1[0], dty = _ref1[1];\n        tx += dtx;\n        ty += dty;\n      }\n      drawSprite(canvas, sheet, tx, ty, x, y);\n    };\n    return {\n      draw: function(canvas, _arg) {\n        var renderView, t, transform, viewport, world;\n        world = _arg.world, viewport = _arg.viewport;\n        t = +(new Date);\n        canvas.fill('rgb(89, 125, 206)');\n        transform = Matrix.translate((-S * viewport.x) | 0, (-S * viewport.y) | 0);\n        renderView = {\n          x: Math.floor(viewport.x),\n          y: Math.floor(viewport.y),\n          width: viewport.width + 1,\n          height: viewport.height + 1\n        };\n        return canvas.withTransform(transform, function(canvas) {\n          world.region(renderView, function(value, x, y) {\n            drawTile(canvas, world, value, x, y);\n          });\n          return world.entities().forEach(function(_arg1) {\n            var index, x, y;\n            index = _arg1[0], x = _arg1[1], y = _arg1[2];\n            return drawCharacter(canvas, index, t, x, y);\n          });\n        });\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "setup": {
      "path": "setup",
      "content": "(function() {\n  var styleNode;\n\n  styleNode = document.createElement(\"style\");\n\n  styleNode.innerHTML = require(\"./style\");\n\n  document.head.appendChild(styleNode);\n\n}).call(this);\n",
      "type": "blob"
    },
    "style": {
      "path": "style",
      "content": "module.exports = \"* {\\n  box-sizing: border-box;\\n}\\nhtml {\\n  height: 100%;\\n}\\nbody {\\n  background-color: #140c1c;\\n  font-family: \\\"HelveticaNeue-Light\\\", \\\"Helvetica Neue Light\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, \\\"Lucida Grande\\\", sans-serif;\\n  font-weight: 300;\\n  font-size: 18px;\\n  height: 100%;\\n  margin: 0;\\n  overflow: hidden;\\n  user-select: none;\\n}\\ncanvas {\\n  bottom: 0;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  margin: auto;\\n  width: 1536px;\\n  height: 864px;\\n  image-rendering: -moz-crisp-edges;\\n  image-rendering: -o-crisp-edges;\\n  image-rendering: -webkit-optimize-contrast;\\n  image-rendering: pixelated;\\n  -ms-interpolation-mode: nearest-neighbor;\\n}\\n\";",
      "type": "blob"
    },
    "test/byte-grid": {
      "path": "test/byte-grid",
      "content": "(function() {\n  var ByteGrid;\n\n  ByteGrid = require(\"../lib/byte-grid\");\n\n  describe(\"Byte Grid\", function() {\n    it(\"should be a grid of bytes\", function() {\n      var grid;\n      grid = ByteGrid({\n        width: 10,\n        height: 10\n      });\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(function(y) {\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(function(x) {\n          return grid.set(x, y, x + 10 * y);\n        });\n      });\n      assert.equal(grid.get(5, 5), 55);\n      return assert.equal(grid.get(7, 1), 17);\n    });\n    return it(\"should iterate a region\", function() {\n      var grid, rect;\n      grid = ByteGrid({\n        width: 10,\n        height: 10\n      });\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(function(y) {\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(function(x) {\n          return grid.set(x, y, x + 10 * y);\n        });\n      });\n      rect = {\n        x: 3,\n        y: 2,\n        width: 3,\n        height: 2\n      };\n      return grid.region(rect, function(value, x, y) {\n        return console.log(x, y, value);\n      });\n    });\n  });\n\n}).call(this);\n",
      "type": "blob"
    },
    "world": {
      "path": "world",
      "content": "(function() {\n  var ByteGrid, rand;\n\n  ByteGrid = require(\"./lib/byte-grid\");\n\n  rand = function(n) {\n    return Math.floor(Math.random() * n);\n  };\n\n  module.exports = function(I) {\n    var entities, grid, height, self, width, _i, _results;\n    width = I.width, height = I.height;\n    grid = ByteGrid({\n      width: width,\n      height: height\n    });\n    (function() {\n      _results = [];\n      for (_i = 0; _i < 128; _i++){ _results.push(_i); }\n      return _results;\n    }).apply(this).forEach(function(y) {\n      var _i, _results;\n      return (function() {\n        _results = [];\n        for (_i = 0; _i < 128; _i++){ _results.push(_i); }\n        return _results;\n      }).apply(this).forEach(function(x) {\n        return grid.set(x, y, rand(3));\n      });\n    });\n    entities = [0, 1, 2, 3, 4, 5, 6, 7].map(function(x) {\n      return [x, 16 + x % 5, 13 + x % 3];\n    });\n    return self = {\n      getTile: grid.get,\n      region: grid.region,\n      entities: function() {\n        return entities;\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "culture/name_generator": {
      "path": "culture/name_generator",
      "content": "(function() {\n  var AngloSaxon, rand;\n\n  AngloSaxon = require(\"./data/names/anglo-saxon\");\n\n  rand = function(array) {\n    var index;\n    index = Math.floor(Math.random() * array.length);\n    return array[index];\n  };\n\n  module.exports = function() {\n    return {\n      generate: function() {\n        return rand(AngloSaxon.male)[0];\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "culture/data/names/anglo-saxon": {
      "path": "culture/data/names/anglo-saxon",
      "content": "(function() {\n  module.exports = {\n    male: [[\"Aart\", \"Like an eagle\", \"English\"], [\"Ace\", \"Unity\", \"Latin\"], [\"Acey\", \"Unity\", \"Latin\"], [\"Acton\", \"Town by the oak tree\", \"Old English\"], [\"Acwel\", \"Kills\", \"Unknown\"], [\"Acwellen\", \"Kills\", \"Unknown\"], [\"Aidan\", \"Little fiery one\", \"Irish\"], [\"Aiken\", \"Oaken\", \"English\"], [\"Alban\", \"Town on the white hill\", \"Latin\"], [\"Alden\", \"Old and wise protector\", \"Old English\"], [\"Aldin\", \"Old and wise protector\", \"Old English\"], [\"Aldred\", \"Wise counselor\", \"English\"], [\"Aldwyn\", \"Old friend\", \"English\"], [\"Alfred\", \"Wise counselor\", \"Old English\"], [\"Algar\", \"Noble spearman\", \"German\"], [\"Alger\", \"Noble spearman\", \"German\"], [\"Almund\", \"Defender of the temple\", \"Unknown\"], [\"Alton\", \"From the old town\", \"Old English\"], [\"Alwin\", \"Noble friend\", \"German\"], [\"Anson\", \"Divine\", \"German\"], [\"Archard\", \"Sacred\", \"Unknown\"], [\"Archerd\", \"Sacred\", \"Unknown\"], [\"Archibald\", \"Bold\", \"German\"], [\"Arian\", \"Echanted\", \"Greek\"], [\"Arlice\", \"Honorable\", \"Unknown\"], [\"Arlys\", \"Honorable\", \"Unknown\"], [\"Arlyss\", \"Honorable\", \"Unknown\"], [\"Artair\", \"Bear\", \"Scottish\"], [\"Arth\", \"Rock\", \"English\"], [\"Aston\", \"Eastern settlement\", \"English\"], [\"Audley\", \"Prosperous guardian or old friend\", \"English\"], [\"Averil\", \"Wild boar\", \"English\"], [\"Averill\", \"Wild boar\", \"English\"], [\"Avery\", \"Elf ruler\", \"English\"], [\"Banning\", \"Small and fair\", \"Irish\"], [\"Bar\", \"From the birch meadow\", \"English\"], [\"Barclay\", \"From the birch tree meadow\", \"English\"], [\"Barney\", \"Son of comfort\", \"English\"], [\"Barrett\", \"Commerce\", \"French\"], [\"Barton\", \"From the barley settlement\", \"Old English\"], [\"Basil\", \"Kingly\", \"Latin\"], [\"Baxter\", \"Baker\", \"Old English\"], [\"Bede\", \"Prayer\", \"English\"], [\"Berkeley\", \"From the birch tree meadow\", \"English\"], [\"Bernard\", \"Brave as a bear\", \"German\"], [\"Bertram\", \"Bright raven\", \"English\"], [\"Betlic\", \"Splendid\", \"English\"], [\"Boden\", \"Messenger\", \"French\"], [\"Boniface\", \"To do good\", \"Latin\"], [\"Bordan\", \"From the boar valley\", \"English\"], [\"Borden\", \"From the boar valley\", \"English\"], [\"Brant\", \"Proud\", \"Old English\"], [\"Brecc\", \"Freckled\", \"Irish\"], [\"Brice\", \"Strength or valor\", \"Welsh\"], [\"Brigham\", \"Dwells at the bridge\", \"Old English\"], [\"Bron\", \"Brown or dark\", \"English\"], [\"Bronson\", \"Son of the dark man\", \"English\"], [\"Brun\", \"Dark skinned\", \"German\"], [\"Bryce\", \"Strength or valor\", \"Welsh\"], [\"Burgess\", \"Town dweller\", \"English\"], [\"Burton\", \"From the fortified town\", \"Old English\"], [\"Byron\", \"At the cowshed\", \"Old English\"], [\"Camden\", \"From the winding valley\", \"Scottish\"], [\"Camdene\", \"From the winding valley\", \"Scottish\"], [\"Cary\", \"Descendant of the dark one\", \"Welsh\"], [\"Cecil\", \"Dim sighted or blind\", \"Latin\"], [\"Cerdic\", \"Beloved\", \"Welsh\"], [\"Chad\", \"Warrior\", \"Old English\"], [\"Chapman\", \"Merchant\", \"English\"], [\"Chester\", \"Rocky fortress\", \"Old English\"], [\"Clifford\", \"Ford near the cliff\", \"Old English\"], [\"Clive\", \"Cliff by the river\", \"Old English\"], [\"Colby\", \"Dark or dark haired\", \"Old English\"], [\"Corey\", \"Dweller near a hollow\", \"Irish\"], [\"Cosmo\", \"Order or harmony\", \"Greek\"], [\"Courtland\", \"From the court's land\", \"English\"], [\"Courtnay\", \"Courtier or court attendant\", \"English\"], [\"Courtney\", \"Courtier or court attendant\", \"English\"], [\"Creighton\", \"Dweller by the rocks\", \"English\"], [\"Cyril\", \"Master or Lord\", \"Greek\"], [\"Daegal\", \"Dweller by the dark stream\", \"English\"], [\"Dalston\", \"From Dougal's place\", \"English\"], [\"Delbert\", \"Bright as day\", \"English\"], [\"Dell\", \"Hollow or valley\", \"Old English\"], [\"Deman\", \"Man\", \"Scandinavian\"], [\"Denby\", \"From the Danish settlement\", \"Scandinavian\"], [\"Denton\", \"Settlement in the valley\", \"Old English\"], [\"Derian\", \"Small rocky hill\", \"English\"], [\"Desmond\", \"From south Munster\", \"Irish\"], [\"Devon\", \"Poet\", \"Irish\"], [\"Devyn\", \"Poet\", \"Irish\"], [\"Dougal\", \"Dark stranger\", \"Scottish\"], [\"Douglas\", \"Dark stream or dark river\", \"Scottish\"], [\"Drew\", \"Manly\", \"English\"], [\"Dudley\", \"The people's meadow\", \"Old English\"], [\"Duke\", \"Leader\", \"French\"], [\"Durwin\", \"Friend of the deer\", \"English\"], [\"Durwyn\", \"Friend of the deer\", \"English\"], [\"Eamon\", \"Wealthy guardian\", \"Irish\"], [\"Earl\", \"Nobleman\", \"English\"], [\"Earle\", \"Nobleman\", \"English\"], [\"Eddison\", \"Son of Edward\", \"English\"], [\"Edgar\", \"Lucky spearman\", \"Old English\"], [\"Edgard\", \"Lucky spearman\", \"Old English\"], [\"Edlin\", \"Wealthy friend\", \"English\"], [\"Edlyn\", \"Wealthy friend\", \"English\"], [\"Edmond\", \"Prosperous protector\", \"Old English\"], [\"Edmund\", \"Prosperous protector\", \"Old English\"], [\"Edric\", \"Wealthy ruler\", \"English\"], [\"Edsel\", \"Rich mans house\", \"English\"], [\"Edson\", \"Son of Edward\", \"English\"], [\"Edward\", \"Wealthy guardian\", \"Old English\"], [\"Edwin\", \"Prosperous friend\", \"Old English\"], [\"Edwyn\", \"Prosperous friend\", \"Old English\"], [\"Egbert\", \"Bright sword\", \"English\"], [\"Eldon\", \"Foreign hill\", \"Old English\"], [\"Eldred\", \"Old and wise advisor\", \"English\"], [\"Eldrid\", \"Old and wise advisor\", \"English\"], [\"Eldwin\", \"Old and wise friend\", \"English\"], [\"Eldwyn\", \"Old and wise friend\", \"English\"], [\"Elmer\", \"Noble\", \"Old English\"], [\"Emmet\", \"Industrious\", \"German\"], [\"Erian\", \"Enchanted\", \"Greek\"], [\"Erol\", \"Courageous\", \"Turkish\"], [\"Errol\", \"Wanderer\", \"Latin\"], [\"Esmond\", \"Wealthy protector\", \"English\"], [\"Faran\", \"Baker\", \"Arabic\"], [\"Felix\", \"Fortunate or happy\", \"Latin\"], [\"Fenton\", \"Marshland farm\", \"Old English\"], [\"Feran\", \"Traveler\", \"Old english\"], [\"Finian\", \"Light skinned\", \"Irish\"], [\"Firman\", \"Firm or strong\", \"French\"], [\"Fleming\", \"Dutchman from Flanders\", \"Old English\"], [\"Fletcher\", \"Arrow maker\", \"Old English\"], [\"Floyd\", \"Gray or white haired\", \"English\"], [\"Ford\", \"Dweller near the ford\", \"Old English\"], [\"Freeman\", \"Free man\", \"English\"], [\"Gaderian\", \"Gathers\", \"Unknown\"], [\"Galan\", \"Healer\", \"Greek\"], [\"Gar\", \"Spear\", \"English\"], [\"Gareth\", \"Gentle\", \"Welsh\"], [\"Garr\", \"Spear\", \"English\"], [\"Garrett\", \"Mighty with a spear\", \"Irish\"], [\"Garvin\", \"Friend in battle\", \"Old English\"], [\"Geoff\", \"Peaceful\", \"English\"], [\"Geoffrey\", \"Peaceful\", \"English\"], [\"Geraint\", \"Old\", \"English\"], [\"Gerard\", \"Brave with a spear\", \"Old English\"], [\"Gervaise\", \"Honorable\", \"French\"], [\"Giles\", \"Shield bearer\", \"French\"], [\"Godric\", \"Rules with God\", \"Unknown\"], [\"Godwine\", \"Friend of God\", \"Old English\"], [\"Gordie\", \"Hill near the meadow\", \"Old English\"], [\"Gordon\", \"Hill near the meadow\", \"Old English\"], [\"Gordy\", \"Hill near the meadow\", \"Old English\"], [\"Graeme\", \"Grand home\", \"Scottish\"], [\"Graham\", \"Grand home\", \"English\"], [\"Grahem\", \"Grand home\", \"English\"], [\"Gram\", \"Grand home\", \"English\"], [\"Grimm\", \"Fierce\", \"English\"], [\"Grimme\", \"Fierce\", \"English\"], [\"Grindan\", \"Sharp\", \"Unknown\"], [\"Hall\", \"That which is covered\", \"Old English\"], [\"Ham\", \"Hot\", \"Hebrew\"], [\"Holt\", \"Forest\", \"English\"], [\"Hugh\", \"Bright mind\", \"English\"], [\"Ingram\", \"Angel\", \"Old English\"], [\"Irwin\", \"Sea friend\", \"English\"], [\"Irwyn\", \"Sea friend\", \"English\"], [\"Ivor\", \"Archer's bow\", \"Scandinavian\"], [\"Jarvis\", \"Servant with a spear\", \"German\"], [\"Jeffrey\", \"Divinely peaceful\", \"Old English\"], [\"Judd\", \"Praised\", \"Hebrew\"], [\"Kendrick\", \"Royal ruler\", \"Scottish\"], [\"Kendryek\", \"Son of henry\", \"Irish\"], [\"Kenric\", \"Royal ruler\", \"English\"], [\"Kenton\", \"The royal settlement\", \"Old English\"], [\"Kenway\", \"Brave warrior\", \"Old English\"], [\"Kim\", \"Warrior chief\", \"Old English\"], [\"Kimball\", \"Warrior chief\", \"English\"], [\"King\", \"Monarch\", \"Old English\"], [\"Kingsley\", \"From the King's meadow\", \"Old English\"], [\"Kipp\", \"From the pointed hill\", \"Old English\"], [\"Landry\", \"Ruler\", \"Old English\"], [\"Lang\", \"Tall man\", \"Scandinavian\"], [\"Lange\", \"Tall man\", \"Scandinavian\"], [\"Lar\", \"Crowned with laurels\", \"Scandinavian\"], [\"Leanian\", \"Lion man or brave as a lion\", \"Greek\"], [\"Leax\", \"Salmon\", \"Unknown\"], [\"Leighton\", \"From the meadow farm\", \"Old English\"], [\"Leland\", \"From the meadow land\", \"Old English\"], [\"Leng\", \"Tall man\", \"Scandinavian\"], [\"Lex\", \"Defender of mankind\", \"Greek\"], [\"Lin\", \"Lives by the linden tree hill\", \"English\"], [\"Linn\", \"Lives by the linden tree hill\", \"English\"], [\"Lister\", \"Dyer\", \"English\"], [\"Lloyd\", \"Grey haired\", \"Welsh\"], [\"Lucan\", \"Bringer of light\", \"Old English\"], [\"Lunden\", \"From London\", \"English\"], [\"Lyn\", \"Waterfall\", \"English\"], [\"Lyndon\", \"Lives by the linden tree hill\", \"Old English\"], [\"Lynn\", \"Waterfall\", \"English\"], [\"Magen\", \"Protector\", \"Hebrew\"], [\"Mann\", \"Hero\", \"German\"], [\"Mannix\", \"Monk\", \"Irish\"], [\"Manton\", \"From the hero's town\", \"English\"], [\"Maxwell\", \"Dweller by the spring\", \"Scottish\"], [\"Merlin\", \"Sea hill\", \"Celtic\"], [\"Merton\", \"Sea town\", \"English\"], [\"Montgomery\", \"From the wealthy man's mountain\", \"Old English\"], [\"Morton\", \"Town by thr moor\", \"Old English\"], [\"Ned\", \"Wealthy guardian\", \"English\"], [\"Nerian\", \"Protects\", \"Unknown\"], [\"Neville\", \"New town\", \"French\"], [\"Newton\", \"From the new town\", \"English\"], [\"Nodin\", \"Wind\", \"American\"], [\"Norman\", \"Norseman\", \"French\"], [\"Norris\", \"Northerner\", \"French\"], [\"Norton\", \"From the north farm\", \"English\"], [\"Norvel\", \"From the north town\", \"English\"], [\"Norville\", \"From the north town\", \"French\"], [\"Nyle\", \"Island\", \"English\"], [\"Octe\", \"A son of Hengist\", \"Unknown\"], [\"Odel\", \"Forested hill\", \"English\"], [\"Odell\", \"Forested hill\", \"English\"], [\"Odi\", \"Ruler\", \"Scandinavian\"], [\"Odin\", \"God of all\", \"Old Norse\"], [\"Odon\", \"Ruler\", \"Scandinavian\"], [\"Ody\", \"Ruler\", \"Scandinavian\"], [\"Orde\", \"Beginning\", \"Latin\"], [\"Ormod\", \"Bear mountain\", \"English\"], [\"Orson\", \"Bear like\", \"Latin\"], [\"Orville\", \"Golden village\", \"French\"], [\"Orvin\", \"Brave friend or spear friend\", \"English\"], [\"Orvyn\", \"Brave friend or spear friend\", \"English\"], [\"Osmond\", \"Divine protection\", \"Old English\"], [\"Osric\", \"Divine ruler\", \"English\"], [\"Oswald\", \"Divine power\", \"Old English\"], [\"Oswin\", \"Divine friend\", \"Old English\"], [\"Page\", \"Attendent\", \"French\"], [\"Paige\", \"Attendent\", \"French\"], [\"Patton\", \"Warrior's town\", \"Old English\"], [\"Pax\", \"Peaceful\", \"Latin\"], [\"Paxton\", \"Peaceful town\", \"Latin\"], [\"Payne\", \"Man from the country\", \"Latin\"], [\"Pearce\", \"Rock\", \"English\"], [\"Pearson\", \"Son of Peter\", \"English\"], [\"Perry\", \"Dweller by the pear tree\", \"English\"], [\"Pierce\", \"Rock\", \"English\"], [\"Piers\", \"Lover of horses\", \"English\"], [\"Putnam\", \"Dweller by the pond\", \"English\"], [\"Ramm\", \"Ram\", \"English\"], [\"Rand\", \"Wolf's shield\", \"Old English\"], [\"Randolf\", \"Wolf shield\", \"Scandinavian\"], [\"Rawlins\", \"Famous in the land\", \"French\"], [\"Ray\", \"Dear brook\", \"English\"], [\"Rice\", \"Noble or rich\", \"English\"], [\"Ripley\", \"Meadow near the river\", \"English\"], [\"Ro\", \"Red haired\", \"English\"], [\"Roan\", \"Tree with red berries\", \"English\"], [\"Roe\", \"Deer\", \"English\"], [\"Row\", \"Red haired\", \"English\"], [\"Rowan\", \"Tree with red berries\", \"English\"], [\"Rowe\", \"Red haired\", \"English\"], [\"Roweson\", \"Son of the redhead\", \"English\"], [\"Rowson\", \"Son of the redhead\", \"English\"], [\"Ryce\", \"Powerful\", \"English\"], [\"Seaton\", \"Town near the sea\", \"English\"], [\"Seaver\", \"Fierce stronghold\", \"English\"], [\"Selwin\", \"Friend at court\", \"English\"], [\"Selwyn\", \"Friend at court\", \"English\"], [\"Sener\", \"Bringer of joy\", \"Turkish\"], [\"Sever\", \"Fierce stronghold\", \"English\"], [\"Seward\", \"Sea gaurdian\", \"Old English\"], [\"Sheldon\", \"Farm on the ledge\", \"Old English\"], [\"Shelley\", \"From the ledge meadow\", \"Old English\"], [\"Shelny\", \"From the ledge farm\", \"Old English\"], [\"Shepard\", \"Shepherd\", \"English\"], [\"Shephard\", \"Shepherd\", \"English\"], [\"Sheply\", \"From the sheep meadow\", \"English\"], [\"Sherard\", \"Of glorious valor\", \"English\"], [\"Sherwin\", \"Quick as the wind\", \"English\"], [\"Sherwyn\", \"Quick as the wind\", \"English\"], [\"Steadman\", \"Dwells at the farm\", \"English\"], [\"Stedman\", \"Dwells at the farm\", \"English\"], [\"Stepan\", \"Exalts\", \"Russian\"], [\"Stewart\", \"Steward\", \"Old English\"], [\"Stewert\", \"Steward\", \"Old English\"], [\"Stillman\", \"Quiet\", \"English\"], [\"Stilwell\", \"From the tranquil stream\", \"English\"], [\"Storm\", \"Tempestuous\", \"English\"], [\"Stuart\", \"Steward\", \"Old English\"], [\"Sutton\", \"Southern town\", \"Old English\"], [\"Tamar\", \"Palm tree\", \"Hebrew\"], [\"Tedman\", \"Protector of the land\", \"Old English\"], [\"Tedmund\", \"Protector of the land\", \"Old English\"], [\"Teller\", \"Storyteller\", \"Old English\"], [\"Tolan\", \"From the taxed land\", \"Old English\"], [\"Toland\", \"From the taxed land\", \"Old English\"], [\"Torr\", \"Watchtower\", \"Old English\"], [\"Trace\", \"Harvester\", \"Greek\"], [\"Tracey\", \"Harvester\", \"Greek\"], [\"Tracy\", \"Harvester\", \"Greek\"], [\"Tredan\", \"Tramples\", \"English\"], [\"Treddian\", \"Leaves\", \"English\"], [\"Upton\", \"From the high town\", \"Old English\"], [\"Verge\", \"Staff bearer\", \"Latin\"], [\"Vernon\", \"Youthful or springlike\", \"Latin\"], [\"Virgil\", \"Staff bearer\", \"Latin\"], [\"Wallace\", \"From Wales\", \"English\"], [\"Wallis\", \"From Wales\", \"English\"], [\"Ward\", \"Watchman\", \"Old English\"], [\"Ware\", \"Cautious\", \"Old English\"], [\"Whitney\", \"From the white island\", \"Old English\"], [\"Wilbur\", \"Walled stronghold\", \"Old English\"], [\"Wilfrid\", \"Resolute peacemaker\", \"English\"], [\"Winchell\", \"Bend in the road\", \"Old English\"], [\"Winston\", \"Friendly town\", \"Old English\"], [\"Woodrow\", \"Dweller by the wood\", \"Old English\"], [\"Wylie\", \"Enchanting\", \"English\"], [\"Wyman\", \"Fighter\", \"English\"], [\"Wynchell\", \"Drawer of water\", \"English\"], [\"Wyne\", \"Friend\", \"English\"]],\n    female: [[\"Acca\", \"Unity\", \"Latin\"], [\"Afra\", \"Young doe\", \"Hebrew\"], [\"Afton\", \"From Afton\", \"English\"], [\"Ainsley\", \"My own meadow\", \"Scottish\"], [\"Aisly\", \"Dwells at the ash tree meadow\", \"Scottish\"], [\"Alberta\", \"Noble and bright\", \"German\"], [\"Alodia\", \"Rich\", \"Unknown\"], [\"Alodie\", \"Rich\", \"Unknown\"], [\"Althena\", \"Healer\", \"Greek\"], [\"Amity\", \"Friendship\", \"Latin\"], [\"Annis\", \"Pure\", \"English\"], [\"Antonia\", \"Priceless, inestimable or praiseworthy\", \"Latin\"], [\"Ara\", \"Opinionated\", \"Arabic\"], [\"Ardith\", \"Flowering field\", \"Hebrew\"], [\"Arleigh\", \"Meadow of the hare\", \"Old English\"], [\"Arlette\", \"Pledge\", \"Old English\"], [\"Ashley\", \"Meadow of ash trees\", \"Old English\"], [\"Audrey\", \"Noble strength\", \"Old English\"], [\"Augusta\", \"Venerable\", \"Latin\"], [\"Beatrix\", \"She who brings happiness\", \"German\"], [\"Becky\", \"Bound\", \"American\"], [\"Berenice\", \"She will bring victory\", \"Greek\"], [\"Bliss\", \"Delight joy or happiness\", \"Old English\"], [\"Blythe\", \"Cheerful\", \"Old English\"], [\"Bonnie\", \"Pretty\", \"English\"], [\"Breck\", \"Freckled\", \"Irish\"], [\"Bree\", \"Strong\", \"Irish\"], [\"Bridget\", \"Strength\", \"Irish\"], [\"Brimlad\", \"Seaway\", \"Unknown\"], [\"Britt\", \"From Britian\", \"Old English\"], [\"Cate\", \"Pure\", \"Greek\"], [\"Catherine\", \"Pure\", \"Greek\"], [\"Catheryn\", \"Pure\", \"Greek\"], [\"Cathryn\", \"Pure\", \"Greek\"], [\"Chelsea\", \"Port or landing place\", \"Old English\"], [\"Clover\", \"Clover\", \"Old English\"], [\"Constance\", \"Constant or steadfast\", \"Latin\"], [\"Coventina\", \"Water Goddess\", \"Greek\"], [\"Cwen\", \"Queen\", \"Welsh\"], [\"Cwene\", \"Queen\", \"Welsh\"], [\"Daisy\", \"Eye of the day\", \"Old English\"], [\"Darel\", \"Darling or beloved\", \"French\"], [\"Darelene\", \"Darling\", \"French\"], [\"Darelle\", \"Darling or beloved\", \"French\"], [\"Darlene\", \"Darling\", \"French\"], [\"Darline\", \"Darling\", \"French\"], [\"Daryl\", \"Darling\", \"French\"], [\"Dawn\", \"Daybreak or sunrise\", \"English\"], [\"Devona\", \"From Devonshire\", \"English\"], [\"Diera\", \"From Diera\", \"Unknown\"], [\"Dolly\", \"Gift of God\", \"American\"], [\"Domino\", \"Belonging to the Lord\", \"English\"], [\"Doretta\", \"Gift of God\", \"English\"], [\"Doris\", \"Of the sea\", \"Greek\"], [\"Eadlin\", \"Princess\", \"Unknown\"], [\"Earlene\", \"Noblewoman\", \"English\"], [\"Eartha\", \"Earthy\", \"English\"], [\"Easter\", \"Born at Easter\", \"English\"], [\"Eda\", \"Wealthy\", \"English\"], [\"Edina\", \"Ardent\", \"Irish\"], [\"Edit\", \"Prosperous in war\", \"Old English\"], [\"Edita\", \"Prosperous in war\", \"Spanish\"], [\"Edith\", \"Prosperous in war\", \"Old English\"], [\"Editha\", \"Prosperous in war\", \"German\"], [\"Edla\", \"Princess\", \"Unknown\"], [\"Edlin\", \"Princess\", \"English\"], [\"Edwina\", \"Prosperous friend\", \"Old English\"], [\"Edyt\", \"Prosperous in war\", \"Old English\"], [\"Edyth\", \"Prosperous in war\", \"Old English\"], [\"Elda\", \"Old and wise protector\", \"Old English\"], [\"Elene\", \"Light\", \"Greek\"], [\"Elga\", \"Pious\", \"Scandinavian\"], [\"Ellette\", \"Little elf\", \"French\"], [\"Elswyth\", \"Elf from the willow trees\", \"English\"], [\"Elva\", \"Elfin\", \"Old English\"], [\"Elvia\", \"Elfin\", \"Old English\"], [\"Elvina\", \"Elfin\", \"Old English\"], [\"Elwine\", \"Elf wise friend\", \"English\"], [\"Elwyna\", \"Elf wise friend\", \"English\"], [\"Engel\", \"Angel\", \"German\"], [\"Erlene\", \"Noblewoman\", \"English\"], [\"Erlina\", \"Noblewoman\", \"English\"], [\"Erline\", \"Noblewoman\", \"English\"], [\"Esma\", \"Emerald\", \"French\"], [\"Esme\", \"Emerald\", \"French\"], [\"Ethal\", \"Noble\", \"Old English\"], [\"Eugenia\", \"Well born or noble\", \"French\"], [\"Faline\", \"Catlike\", \"Latin\"], [\"Fancy\", \"Whimsical\", \"English\"], [\"Fanny\", \"Free\", \"American\"], [\"Felice\", \"Fortunate or happy\", \"Latin\"], [\"Flair\", \"Style or verve\", \"English\"], [\"Flora\", \"Flower\", \"Latin\"], [\"Florence\", \"Blooming or flowering\", \"Latin\"], [\"Frederica\", \"Peaceful ruler\", \"German\"], [\"Garyn\", \"Mighty with a spear\", \"English\"], [\"Gay\", \"Light hearted\", \"French\"], [\"Gayna\", \"White wave\", \"English\"], [\"Gemma\", \"Precious stone\", \"Latin\"], [\"Georgina\", \"Farmer\", \"English\"], [\"Gillian\", \"Downy bearded\", \"Latin\"], [\"Gladys\", \"Princess\", \"Irish\"], [\"Glenna\", \"Secluded valley or glen\", \"Irish\"], [\"Guinevere\", \"White wave\", \"Welsh\"], [\"Gwen\", \"White wave\", \"Welsh\"], [\"Gwendolyn\", \"White wave\", \"Welsh\"], [\"Harriet\", \"Ruler of an enclosure\", \"French\"], [\"Henrietta\", \"Ruler of the enclosure\", \"English\"], [\"Hild\", \"Battle maid\", \"German\"], [\"Hilda\", \"Battle maid\", \"German\"], [\"Hollis\", \"Near the holly bushes\", \"Old English\"], [\"Jetta\", \"A deep or glossy black\", \"Greek\"], [\"Joan\", \"God is gracious\", \"Hebrew\"], [\"Jody\", \"Praised\", \"American\"], [\"Juliana\", \"Downy bearded or youthful\", \"Latin\"], [\"Katie\", \"Pure\", \"English\"], [\"Keeley\", \"Brave warrior\", \"Irish\"], [\"Kendra\", \"Knowing\", \"Old english\"], [\"Leila\", \"Dark beauty\", \"Hebrew\"], [\"Lilian\", \"Lily\", \"Latin\"], [\"Linette\", \"Bird\", \"French\"], [\"Linn\", \"Waterfall\", \"English\"], [\"Lizbeth\", \"Consecrated to God\", \"English\"], [\"Lois\", \"Famous warrior\", \"German\"], [\"Lora\", \"Crowned with laurels\", \"Latin\"], [\"Loretta\", \"Crowned with laurels\", \"English\"], [\"Lorna\", \"Crowned with laurels\", \"Latin\"], [\"Lucetta\", \"Bringer of light\", \"English\"], [\"Lyn\", \"Waterfall\", \"English\"], [\"Lynet\", \"Idol\", \"Welsh\"], [\"Lynette\", \"Idol\", \"Welsh\"], [\"Lynn\", \"Waterfall\", \"English\"], [\"Lynna\", \"Waterfall\", \"English\"], [\"Lynne\", \"Waterfall\", \"English\"], [\"Mae\", \"Great\", \"English\"], [\"Maida\", \"Maiden\", \"English\"], [\"Mariam\", \"Bitter or sea of bitterness\", \"Hebrew\"], [\"Marian\", \"Bitter or sea of bitterness\", \"English\"], [\"Maud\", \"Mighty battle maiden\", \"English\"], [\"Maureen\", \"Bitter\", \"Irish\"], [\"Maxine\", \"The greatest\", \"Latin\"], [\"May\", \"To increase\", \"Latin\"], [\"Mayda\", \"Maiden\", \"Unknown\"], [\"Megan\", \"Pearl\", \"Irish\"], [\"Meghan\", \"Pearl\", \"Irish\"], [\"Mercia\", \"Compassion\", \"English\"], [\"Meryl\", \"Blackbird\", \"Latin\"], [\"Mildred\", \"Gentle advisor\", \"Old english\"], [\"Moira\", \"Sea of bitterness\", \"Irish\"], [\"Moire\", \"Sea of bitterness\", \"French\"], [\"Mona\", \"Noble\", \"Irish\"], [\"Nelda\", \"From the Alder trees\", \"Unknown\"], [\"Noreen\", \"Bright torch\", \"Greek\"], [\"Norma\", \"Man from the north\", \"German\"], [\"Octavia\", \"Eighth\", \"Italian\"], [\"Odelia\", \"Wealthy\", \"French\"], [\"Odelina\", \"Wealthy\", \"French\"], [\"Odelinda\", \"Wealthy\", \"French\"], [\"Odella\", \"Wealthy\", \"French\"], [\"Odelyn\", \"Wealthy\", \"French\"], [\"Odelyna\", \"Wealthy\", \"French\"], [\"Odette\", \"Wealthy\", \"French\"], [\"Odilia\", \"Wealthy\", \"French\"], [\"Ora\", \"Seacoast\", \"English\"], [\"Orva\", \"Worth gold\", \"French\"], [\"Ottilie\", \"Little wealthy one\", \"Unknown\"], [\"Peace\", \"Calm or tranquil\", \"English\"], [\"Peggy\", \"Pearl\", \"English\"], [\"Petra\", \"Rock\", \"Latin\"], [\"Petula\", \"Rock\", \"English\"], [\"Philippa\", \"Lover of horses\", \"Greek\"], [\"Philomena\", \"Lover of strength\", \"Greek\"], [\"Phyllis\", \"Leaf\", \"Greek\"], [\"Polly\", \"Small\", \"Latin\"], [\"Portia\", \"Pig\", \"Latin\"], [\"Primrose\", \"Primrose\", \"English\"], [\"Prudence\", \"Provident\", \"Latin\"], [\"Queenie\", \"Queen\", \"Old english\"], [\"Quenna\", \"Queen\", \"Old English\"], [\"Randi\", \"Wolf shield\", \"German\"], [\"Rexanne\", \"Gracious king\", \"English\"], [\"Rexella\", \"King of light\", \"English\"], [\"Rowena\", \"White haired\", \"Welsh\"], [\"Sheena\", \"God is gracious\", \"Hebrew\"], [\"Shelley\", \"From the ledge meadow\", \"English\"], [\"Sibley\", \"Fiendly\", \"English\"], [\"Silver\", \"Lustrous\", \"Old English\"], [\"Silvia\", \"Of the woods\", \"Latin\"], [\"Sunn\", \"Cheerful\", \"English\"], [\"Sunniva\", \"Gift of the sun\", \"Scandinavian\"], [\"Synne\", \"Cheerful\", \"English\"], [\"Synnove\", \"Gift of the sun\", \"Unknown\"], [\"Tait\", \"Pleasant and bright\", \"Old English\"], [\"Taite\", \"Pleasant and bright\", \"Old English\"], [\"Tate\", \"Pleasant and bright\", \"Old English\"], [\"Tayte\", \"Pleasant and bright\", \"English\"], [\"Thea\", \"Goddess\", \"Greek\"], [\"Udela\", \"Wealthy\", \"English\"], [\"Udele\", \"Wealthy\", \"English\"], [\"Verona\", \"Bringer of victory\", \"Italian\"], [\"Wanda\", \"Young tree\", \"German\"], [\"Whitney\", \"White island\", \"Old english\"], [\"Wilda\", \"Wild\", \"German\"], [\"Willa\", \"Resolute protector\", \"German\"], [\"Wilona\", \"Hoped for\", \"English\"], [\"Wilone\", \"Hoped for\", \"English\"], [\"Zara\", \"Princess\", \"Hebrew\"], [\"Zelda\", \"Companion\", \"Old english\"]]\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "test/culture/names": {
      "path": "test/culture/names",
      "content": "(function() {\n  var NameGenerator;\n\n  NameGenerator = require(\"/culture/name_generator\");\n\n  describe(\"Culture Name Generator\", function() {\n    return it(\"should generate random names\", function() {\n      var generator;\n      generator = NameGenerator();\n      return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].forEach(function() {\n        return console.log(generator.generate());\n      });\n    });\n  });\n\n}).call(this);\n",
      "type": "blob"
    }
  },
  "progenitor": {
    "url": "https://danielx.net/editor/"
  },
  "entryPoint": "main",
  "repository": {
    "branch": "master",
    "default_branch": "master",
    "full_name": "STRd6/honegar",
    "homepage": null,
    "description": "A sweet sweet honeypot of a game.",
    "html_url": "https://github.com/STRd6/honegar",
    "url": "https://api.github.com/repos/STRd6/honegar",
    "publishBranch": "gh-pages"
  },
  "dependencies": {
    "ajax": {
      "source": {
        "LICENSE": {
          "path": "LICENSE",
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
          "mode": "100644",
          "type": "blob"
        },
        "README.md": {
          "path": "README.md",
          "content": "# ajax\n\nA Promise returning wrapper for XMLHttpRequest\n\nThis aims to be a very small and very direct wrapper for XMLHttpRequest. We\nreturn a native promise and configure the requets via an options object.\n\n\n",
          "mode": "100644",
          "type": "blob"
        },
        "main.coffee": {
          "path": "main.coffee",
          "content": "{extend, defaults} = require \"./util\"\n\nrequire \"./shims\"\n\nmodule.exports = ->\n  ajax = (options={}) ->\n    {data, headers, method, overrideMimeType, password, url, responseType, timeout, user, withCredentials} = options\n    data ?= \"\"\n    method ?= \"GET\"\n    password ?= \"\"\n    responseType ?= \"\"\n    timeout ?= 0\n    user ?= \"\"\n    withCredentials ?= false\n\n    new ProgressPromise (resolve, reject, progress) ->\n      xhr = new XMLHttpRequest()\n      xhr.open(method, url, true, user, password)\n      xhr.responseType = responseType\n      xhr.timeout = timeout\n      xhr.withCredentialls = withCredentials\n\n      if headers\n        Object.keys(headers).forEach (header) ->\n          value = headers[header]\n          xhr.setRequestHeader header, value\n\n      if overrideMimeType\n        xhr.overrideMimeType overrideMimeType\n\n      xhr.onload = (e) ->\n        if (200 <= this.status < 300) or this.status is 304\n          resolve this.response\n          complete e, xhr, options\n        else\n          reject xhr\n          complete e, xhr, options\n\n      xhr.onerror = (e) ->\n        reject xhr\n        complete e, xhr, options\n\n      xhr.onprogress = progress\n\n      xhr.send(data)\n\n  complete = (args...) ->\n    completeHandlers.forEach (handler) ->\n      handler args...\n\n  configure = (optionDefaults) ->\n    (url, options={}) ->\n      if typeof url is \"object\"\n        options = url\n      else\n        options.url = url\n\n      defaults options, optionDefaults\n\n      ajax(options)\n\n  completeHandlers = []\n\n  extend ajax,\n    ajax: configure {}\n    complete: (handler) ->\n      completeHandlers.push handler\n\n    getJSON: configure\n      responseType: \"json\"\n\n    getBlob: configure\n      responseType: \"blob\"\n",
          "mode": "100644",
          "type": "blob"
        },
        "pixie.cson": {
          "path": "pixie.cson",
          "content": "version: \"0.1.5-pre.0\"\n",
          "mode": "100644",
          "type": "blob"
        },
        "test/test.coffee": {
          "path": "test/test.coffee",
          "content": "Ajax = require \"../main\"\n\ndescribe \"Ajax\", ->\n  it \"should provide progress\", (done) ->\n    ajax = Ajax()\n\n    ajax\n      url: \"https://api.github.com/users\"\n      responseType: \"json\"\n    .progress (e) ->\n      console.log e\n    .then (data) ->\n      assert data[0].id is 1\n      done()\n\n  it \"should getJSON\", (done) ->\n    ajax = Ajax()\n\n    ajax\n      url: \"https://api.github.com/users\"\n      responseType: \"json\"\n    .then (data) ->\n      assert data[0].id is 1\n      assert data[0].login is \"mojombo\"\n\n      done()\n\n  it \"should have complete handlers\", (done) ->\n    ajax = Ajax()\n\n    ajax.complete (e, xhr, options) ->\n      done()\n\n    ajax.getJSON(\"https://api.github.com/users\")\n\n\n  it \"should work with options only\", (done) ->\n    ajax = Ajax()\n\n    ajax.getJSON(url: \"https://api.github.com/users\")\n    .then (data) ->\n      assert data[0].id is 1\n      assert data[0].login is \"mojombo\"\n\n      done()\n",
          "mode": "100644",
          "type": "blob"
        },
        "util.coffee": {
          "path": "util.coffee",
          "content": "module.exports =\n  defaults: (target, objects...) ->\n    for object in objects\n      for name of object\n        unless target.hasOwnProperty(name)\n          target[name] = object[name]\n\n    return target\n\n  extend: (target, sources...) ->\n    for source in sources\n      for name of source\n        target[name] = source[name]\n\n    return target\n",
          "mode": "100644",
          "type": "blob"
        },
        "shims.coffee": {
          "path": "shims.coffee",
          "content": "# Extend promises with `finally`\n# From: https://github.com/domenic/promises-unwrapping/issues/18\nPromise.prototype.finally ?= (callback) ->\n  # We don’t invoke the callback in here,\n  # because we want then() to handle its exceptions\n  this.then(\n    # Callback fulfills: pass on predecessor settlement\n    # Callback rejects: pass on rejection (=omit 2nd arg.)\n    (value) ->\n      Promise.resolve(callback())\n      .then -> return value\n    (reason) ->\n      Promise.resolve(callback())\n      .then -> throw reason\n  )\n\n# HACK: I really would prefer not to modify the native Promise prototype, but I\n# know no other way...\n\nPromise.prototype._notify ?= (event) ->\n  @_progressHandlers.forEach (handler) ->\n    try\n      handler(event)\n\nPromise.prototype.progress ?= (handler) ->\n  @_progressHandlers ?= []\n  @_progressHandlers.push handler\n\n  return this\n\nglobal.ProgressPromise = (fn) ->\n  p = new Promise (resolve, reject) ->\n    notify = ->\n      p._progressHandlers?.forEach (handler) ->\n        try\n          handler(event)\n\n    fn(resolve, reject, notify)\n\n  p.then = (onFulfilled, onRejected) ->\n    result = Promise.prototype.then.call(p, onFulfilled, onRejected)\n    # Pass progress through\n    p.progress result._notify.bind(result)\n\n    return result\n\n  return p\n",
          "mode": "100644"
        }
      },
      "distribution": {
        "main": {
          "path": "main",
          "content": "(function() {\n  var defaults, extend, _ref,\n    __slice = [].slice;\n\n  _ref = require(\"./util\"), extend = _ref.extend, defaults = _ref.defaults;\n\n  require(\"./shims\");\n\n  module.exports = function() {\n    var ajax, complete, completeHandlers, configure;\n    ajax = function(options) {\n      var data, headers, method, overrideMimeType, password, responseType, timeout, url, user, withCredentials;\n      if (options == null) {\n        options = {};\n      }\n      data = options.data, headers = options.headers, method = options.method, overrideMimeType = options.overrideMimeType, password = options.password, url = options.url, responseType = options.responseType, timeout = options.timeout, user = options.user, withCredentials = options.withCredentials;\n      if (data == null) {\n        data = \"\";\n      }\n      if (method == null) {\n        method = \"GET\";\n      }\n      if (password == null) {\n        password = \"\";\n      }\n      if (responseType == null) {\n        responseType = \"\";\n      }\n      if (timeout == null) {\n        timeout = 0;\n      }\n      if (user == null) {\n        user = \"\";\n      }\n      if (withCredentials == null) {\n        withCredentials = false;\n      }\n      return new ProgressPromise(function(resolve, reject, progress) {\n        var xhr;\n        xhr = new XMLHttpRequest();\n        xhr.open(method, url, true, user, password);\n        xhr.responseType = responseType;\n        xhr.timeout = timeout;\n        xhr.withCredentialls = withCredentials;\n        if (headers) {\n          Object.keys(headers).forEach(function(header) {\n            var value;\n            value = headers[header];\n            return xhr.setRequestHeader(header, value);\n          });\n        }\n        if (overrideMimeType) {\n          xhr.overrideMimeType(overrideMimeType);\n        }\n        xhr.onload = function(e) {\n          var _ref1;\n          if (((200 <= (_ref1 = this.status) && _ref1 < 300)) || this.status === 304) {\n            resolve(this.response);\n            return complete(e, xhr, options);\n          } else {\n            reject(xhr);\n            return complete(e, xhr, options);\n          }\n        };\n        xhr.onerror = function(e) {\n          reject(xhr);\n          return complete(e, xhr, options);\n        };\n        xhr.onprogress = progress;\n        return xhr.send(data);\n      });\n    };\n    complete = function() {\n      var args;\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return completeHandlers.forEach(function(handler) {\n        return handler.apply(null, args);\n      });\n    };\n    configure = function(optionDefaults) {\n      return function(url, options) {\n        if (options == null) {\n          options = {};\n        }\n        if (typeof url === \"object\") {\n          options = url;\n        } else {\n          options.url = url;\n        }\n        defaults(options, optionDefaults);\n        return ajax(options);\n      };\n    };\n    completeHandlers = [];\n    return extend(ajax, {\n      ajax: configure({}),\n      complete: function(handler) {\n        return completeHandlers.push(handler);\n      },\n      getJSON: configure({\n        responseType: \"json\"\n      }),\n      getBlob: configure({\n        responseType: \"blob\"\n      })\n    });\n  };\n\n}).call(this);\n",
          "type": "blob"
        },
        "pixie": {
          "path": "pixie",
          "content": "module.exports = {\"version\":\"0.1.5-pre.0\"};",
          "type": "blob"
        },
        "test/test": {
          "path": "test/test",
          "content": "(function() {\n  var Ajax;\n\n  Ajax = require(\"../main\");\n\n  describe(\"Ajax\", function() {\n    it(\"should provide progress\", function(done) {\n      var ajax;\n      ajax = Ajax();\n      return ajax({\n        url: \"https://api.github.com/users\",\n        responseType: \"json\"\n      }).progress(function(e) {\n        return console.log(e);\n      }).then(function(data) {\n        assert(data[0].id === 1);\n        return done();\n      });\n    });\n    it(\"should getJSON\", function(done) {\n      var ajax;\n      ajax = Ajax();\n      return ajax({\n        url: \"https://api.github.com/users\",\n        responseType: \"json\"\n      }).then(function(data) {\n        assert(data[0].id === 1);\n        assert(data[0].login === \"mojombo\");\n        return done();\n      });\n    });\n    it(\"should have complete handlers\", function(done) {\n      var ajax;\n      ajax = Ajax();\n      ajax.complete(function(e, xhr, options) {\n        return done();\n      });\n      return ajax.getJSON(\"https://api.github.com/users\");\n    });\n    return it(\"should work with options only\", function(done) {\n      var ajax;\n      ajax = Ajax();\n      return ajax.getJSON({\n        url: \"https://api.github.com/users\"\n      }).then(function(data) {\n        assert(data[0].id === 1);\n        assert(data[0].login === \"mojombo\");\n        return done();\n      });\n    });\n  });\n\n}).call(this);\n",
          "type": "blob"
        },
        "util": {
          "path": "util",
          "content": "(function() {\n  var __slice = [].slice;\n\n  module.exports = {\n    defaults: function() {\n      var name, object, objects, target, _i, _len;\n      target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      for (_i = 0, _len = objects.length; _i < _len; _i++) {\n        object = objects[_i];\n        for (name in object) {\n          if (!target.hasOwnProperty(name)) {\n            target[name] = object[name];\n          }\n        }\n      }\n      return target;\n    },\n    extend: function() {\n      var name, source, sources, target, _i, _len;\n      target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      for (_i = 0, _len = sources.length; _i < _len; _i++) {\n        source = sources[_i];\n        for (name in source) {\n          target[name] = source[name];\n        }\n      }\n      return target;\n    }\n  };\n\n}).call(this);\n",
          "type": "blob"
        },
        "shims": {
          "path": "shims",
          "content": "(function() {\n  var _base, _base1, _base2;\n\n  if ((_base = Promise.prototype)[\"finally\"] == null) {\n    _base[\"finally\"] = function(callback) {\n      return this.then(function(value) {\n        return Promise.resolve(callback()).then(function() {\n          return value;\n        });\n      }, function(reason) {\n        return Promise.resolve(callback()).then(function() {\n          throw reason;\n        });\n      });\n    };\n  }\n\n  if ((_base1 = Promise.prototype)._notify == null) {\n    _base1._notify = function(event) {\n      return this._progressHandlers.forEach(function(handler) {\n        try {\n          return handler(event);\n        } catch (_error) {}\n      });\n    };\n  }\n\n  if ((_base2 = Promise.prototype).progress == null) {\n    _base2.progress = function(handler) {\n      if (this._progressHandlers == null) {\n        this._progressHandlers = [];\n      }\n      this._progressHandlers.push(handler);\n      return this;\n    };\n  }\n\n  global.ProgressPromise = function(fn) {\n    var p;\n    p = new Promise(function(resolve, reject) {\n      var notify;\n      notify = function() {\n        var _ref;\n        return (_ref = p._progressHandlers) != null ? _ref.forEach(function(handler) {\n          try {\n            return handler(event);\n          } catch (_error) {}\n        }) : void 0;\n      };\n      return fn(resolve, reject, notify);\n    });\n    p.then = function(onFulfilled, onRejected) {\n      var result;\n      result = Promise.prototype.then.call(p, onFulfilled, onRejected);\n      p.progress(result._notify.bind(result));\n      return result;\n    };\n    return p;\n  };\n\n}).call(this);\n",
          "type": "blob"
        }
      },
      "progenitor": {
        "url": "https://danielx.net/editor/"
      },
      "version": "0.1.5-pre.0",
      "entryPoint": "main",
      "repository": {
        "branch": "master",
        "default_branch": "master",
        "full_name": "distri/ajax",
        "homepage": null,
        "description": "Promise returning Ajax lib",
        "html_url": "https://github.com/distri/ajax",
        "url": "https://api.github.com/repos/distri/ajax",
        "publishBranch": "gh-pages"
      },
      "dependencies": {}
    },
    "matrix": {
      "source": {
        "LICENSE": {
          "path": "LICENSE",
          "mode": "100644",
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
          "type": "blob"
        },
        "README.md": {
          "path": "README.md",
          "mode": "100644",
          "content": "matrix\n======\n\nWhere matrices become heroes, together.\n",
          "type": "blob"
        },
        "matrix.coffee.md": {
          "path": "matrix.coffee.md",
          "mode": "100644",
          "content": "Matrix\n======\n\n```\n   _        _\n  | a  c tx  |\n  | b  d ty  |\n  |_0  0  1 _|\n```\n\nCreates a matrix for 2d affine transformations.\n\n`concat`, `inverse`, `rotate`, `scale` and `translate` return new matrices with\nthe transformations applied. The matrix is not modified in place.\n\nReturns the identity matrix when called with no arguments.\n\n    Matrix = (a, b, c, d, tx, ty) ->\n      if isObject(a)\n        {a, b, c, d, tx, ty} = a\n\n      __proto__: Matrix.prototype\n      a: a ? 1\n      b: b ? 0\n      c: c ? 0\n      d: d ? 1\n      tx: tx ? 0\n      ty: ty ? 0\n\nA `Point` constructor for the methods that return points. This can be overridden\nwith a compatible constructor if you want fancier points.\n\n    Matrix.Point = require \"point\"\n\n    Matrix.prototype =\n\n`concat` returns the result of this matrix multiplied by another matrix\ncombining the geometric effects of the two. In mathematical terms,\nconcatenating two matrixes is the same as combining them using matrix multiplication.\nIf this matrix is A and the matrix passed in is B, the resulting matrix is A x B\nhttp://mathworld.wolfram.com/MatrixMultiplication.html\n\n      concat: (matrix) ->\n        Matrix(\n          @a * matrix.a + @c * matrix.b,\n          @b * matrix.a + @d * matrix.b,\n          @a * matrix.c + @c * matrix.d,\n          @b * matrix.c + @d * matrix.d,\n          @a * matrix.tx + @c * matrix.ty + @tx,\n          @b * matrix.tx + @d * matrix.ty + @ty\n        )\n\n\nReturn a new matrix that is a `copy` of this matrix.\n\n      copy: ->\n        Matrix(@a, @b, @c, @d, @tx, @ty)\n\nGiven a point in the pretransform coordinate space, returns the coordinates of\nthat point after the transformation occurs. Unlike the standard transformation\napplied using the transformPoint() method, the deltaTransformPoint() method\ndoes not consider the translation parameters tx and ty.\n\nReturns a new `Point` transformed by this matrix ignoring tx and ty.\n\n      deltaTransformPoint: (point) ->\n        Matrix.Point(\n          @a * point.x + @c * point.y,\n          @b * point.x + @d * point.y\n        )\n\nReturns a new matrix that is the inverse of this matrix.\nhttp://mathworld.wolfram.com/MatrixInverse.html\n\n      inverse: ->\n        determinant = @a * @d - @b * @c\n\n        Matrix(\n          @d / determinant,\n          -@b / determinant,\n          -@c / determinant,\n          @a / determinant,\n          (@c * @ty - @d * @tx) / determinant,\n          (@b * @tx - @a * @ty) / determinant\n        )\n\nReturns a new matrix that corresponds this matrix multiplied by a\na rotation matrix.\n\nThe first parameter `theta` is the amount to rotate in radians.\n\nThe second optional parameter, `aboutPoint` is the point about which the\nrotation occurs. Defaults to (0,0).\n\n      rotate: (theta, aboutPoint) ->\n        @concat(Matrix.rotation(theta, aboutPoint))\n\nReturns a new matrix that corresponds this matrix multiplied by a\na scaling matrix.\n\n      scale: (sx, sy, aboutPoint) ->\n        @concat(Matrix.scale(sx, sy, aboutPoint))\n\nReturns a new matrix that corresponds this matrix multiplied by a\na skewing matrix.\n\n      skew: (skewX, skewY) ->\n        @concat(Matrix.skew(skewX, skewY))\n\nReturns a string representation of this matrix.\n\n      toString: ->\n        \"Matrix(#{@a}, #{@b}, #{@c}, #{@d}, #{@tx}, #{@ty})\"\n\nReturns the result of applying the geometric transformation represented by the\nMatrix object to the specified point.\n\n      transformPoint: (point) ->\n        Matrix.Point(\n          @a * point.x + @c * point.y + @tx,\n          @b * point.x + @d * point.y + @ty\n        )\n\nTranslates the matrix along the x and y axes, as specified by the tx and ty parameters.\n\n      translate: (tx, ty) ->\n        @concat(Matrix.translation(tx, ty))\n\nCreates a matrix transformation that corresponds to the given rotation,\naround (0,0) or the specified point.\n\n    Matrix.rotate = Matrix.rotation = (theta, aboutPoint) ->\n      rotationMatrix = Matrix(\n        Math.cos(theta),\n        Math.sin(theta),\n        -Math.sin(theta),\n        Math.cos(theta)\n      )\n\n      if aboutPoint?\n        rotationMatrix =\n          Matrix.translation(aboutPoint.x, aboutPoint.y).concat(\n            rotationMatrix\n          ).concat(\n            Matrix.translation(-aboutPoint.x, -aboutPoint.y)\n          )\n\n      return rotationMatrix\n\nReturns a matrix that corresponds to scaling by factors of sx, sy along\nthe x and y axis respectively.\n\nIf only one parameter is given the matrix is scaled uniformly along both axis.\n\nIf the optional aboutPoint parameter is given the scaling takes place\nabout the given point.\n\n    Matrix.scale = (sx, sy, aboutPoint) ->\n      sy = sy || sx\n\n      scaleMatrix = Matrix(sx, 0, 0, sy)\n\n      if aboutPoint\n        scaleMatrix =\n          Matrix.translation(aboutPoint.x, aboutPoint.y).concat(\n            scaleMatrix\n          ).concat(\n            Matrix.translation(-aboutPoint.x, -aboutPoint.y)\n          )\n\n      return scaleMatrix\n\n\nReturns a matrix that corresponds to a skew of skewX, skewY.\n\n    Matrix.skew = (skewX, skewY) ->\n      Matrix(0, Math.tan(skewY), Math.tan(skewX), 0)\n\nReturns a matrix that corresponds to a translation of tx, ty.\n\n    Matrix.translate = Matrix.translation = (tx, ty) ->\n      Matrix(1, 0, 0, 1, tx, ty)\n\nHelpers\n-------\n\n    isObject = (object) ->\n      Object.prototype.toString.call(object) is \"[object Object]\"\n\n    frozen = (object) ->\n      Object.freeze?(object)\n\n      return object\n\nConstants\n---------\n\nA constant representing the identity matrix.\n\n    Matrix.IDENTITY = frozen Matrix()\n\nA constant representing the horizontal flip transformation matrix.\n\n    Matrix.HORIZONTAL_FLIP = frozen Matrix(-1, 0, 0, 1)\n\nA constant representing the vertical flip transformation matrix.\n\n    Matrix.VERTICAL_FLIP = frozen Matrix(1, 0, 0, -1)\n\nExports\n-------\n\n    module.exports = Matrix\n",
          "type": "blob"
        },
        "pixie.cson": {
          "path": "pixie.cson",
          "mode": "100644",
          "content": "version: \"0.2.0\"\nentryPoint: \"matrix\"\ndependencies:\n  point: \"distri/point:v0.2.0\"\n",
          "type": "blob"
        },
        "test/matrix.coffee": {
          "path": "test/matrix.coffee",
          "mode": "100644",
          "content": "Matrix = require \"../matrix\"\nPoint = require \"point\"\n\nok = assert\nequals = assert.equal\ntest = it\n\ndescribe \"Matrix\", ->\n\n  TOLERANCE = 0.00001\n  \n  equalEnough = (expected, actual, tolerance, message) ->\n    message ||= \"\" + expected + \" within \" + tolerance + \" of \" + actual\n    ok(expected + tolerance >= actual && expected - tolerance <= actual, message)\n  \n  matrixEqual = (m1, m2) ->\n    equalEnough(m1.a, m2.a, TOLERANCE)\n    equalEnough(m1.b, m2.b, TOLERANCE)\n    equalEnough(m1.c, m2.c, TOLERANCE)\n    equalEnough(m1.d, m2.d, TOLERANCE)\n    equalEnough(m1.tx, m2.tx, TOLERANCE)\n    equalEnough(m1.ty, m2.ty, TOLERANCE)\n  \n  test \"copy constructor\", ->\n   matrix = Matrix(1, 0, 0, 1, 10, 12)\n  \n   matrix2 = Matrix(matrix)\n  \n   ok matrix != matrix2\n   matrixEqual(matrix2, matrix)\n  \n  test \"Matrix() (Identity)\", ->\n    matrix = Matrix()\n  \n    equals(matrix.a, 1, \"a\")\n    equals(matrix.b, 0, \"b\")\n    equals(matrix.c, 0, \"c\")\n    equals(matrix.d, 1, \"d\")\n    equals(matrix.tx, 0, \"tx\")\n    equals(matrix.ty, 0, \"ty\")\n  \n    matrixEqual(matrix, Matrix.IDENTITY)\n  \n  test \"Empty\", ->\n    matrix = Matrix(0, 0, 0, 0, 0, 0)\n  \n    equals(matrix.a, 0, \"a\")\n    equals(matrix.b, 0, \"b\")\n    equals(matrix.c, 0, \"c\")\n    equals(matrix.d, 0, \"d\")\n    equals(matrix.tx, 0, \"tx\")\n    equals(matrix.ty, 0, \"ty\")\n  \n  test \"#copy\", ->\n    matrix = Matrix(2, 0, 0, 2)\n  \n    copyMatrix = matrix.copy()\n  \n    matrixEqual copyMatrix, matrix\n  \n    copyMatrix.a = 4\n  \n    equals copyMatrix.a, 4\n    equals matrix.a, 2, \"Old 'a' value is unchanged\"\n  \n  test \".scale\", ->\n    matrix = Matrix.scale(2, 2)\n  \n    equals(matrix.a, 2, \"a\")\n    equals(matrix.b, 0, \"b\")\n    equals(matrix.c, 0, \"c\")\n    equals(matrix.d, 2, \"d\")\n  \n    matrix = Matrix.scale(3)\n  \n    equals(matrix.a, 3, \"a\")\n    equals(matrix.b, 0, \"b\")\n    equals(matrix.c, 0, \"c\")\n    equals(matrix.d, 3, \"d\")\n  \n  test \".scale (about a point)\", ->\n    p = Point(5, 17)\n  \n    transformedPoint = Matrix.scale(3, 7, p).transformPoint(p)\n  \n    equals(transformedPoint.x, p.x, \"Point should remain the same\")\n    equals(transformedPoint.y, p.y, \"Point should remain the same\")\n  \n  test \"#scale (about a point)\", ->\n    p = Point(3, 11)\n  \n    transformedPoint = Matrix.IDENTITY.scale(3, 7, p).transformPoint(p)\n  \n    equals(transformedPoint.x, p.x, \"Point should remain the same\")\n    equals(transformedPoint.y, p.y, \"Point should remain the same\")\n  \n  test \"#skew\", ->\n    matrix = Matrix()\n\n    angle = 0.25 * Math.PI\n  \n    matrix = matrix.skew(angle, 0)\n  \n    equals matrix.c, Math.tan(angle)\n  \n  test \".rotation\", ->\n    matrix = Matrix.rotation(Math.PI / 2)\n  \n    equalEnough(matrix.a, 0, TOLERANCE)\n    equalEnough(matrix.b, 1, TOLERANCE)\n    equalEnough(matrix.c,-1, TOLERANCE)\n    equalEnough(matrix.d, 0, TOLERANCE)\n  \n  test \".rotation (about a point)\", ->\n    p = Point(11, 7)\n  \n    transformedPoint = Matrix.rotation(Math.PI / 2, p).transformPoint(p)\n  \n    equals transformedPoint.x, p.x, \"Point should remain the same\"\n    equals transformedPoint.y, p.y, \"Point should remain the same\"\n  \n  test \"#rotate (about a point)\", ->\n    p = Point(8, 5);\n  \n    transformedPoint = Matrix.IDENTITY.rotate(Math.PI / 2, p).transformPoint(p)\n  \n    equals transformedPoint.x, p.x, \"Point should remain the same\"\n    equals transformedPoint.y, p.y, \"Point should remain the same\"\n  \n  test \"#inverse (Identity)\", ->\n    matrix = Matrix().inverse()\n  \n    equals(matrix.a, 1, \"a\")\n    equals(matrix.b, 0, \"b\")\n    equals(matrix.c, 0, \"c\")\n    equals(matrix.d, 1, \"d\")\n    equals(matrix.tx, 0, \"tx\")\n    equals(matrix.ty, 0, \"ty\")\n  \n  test \"#concat\", ->\n    matrix = Matrix.rotation(Math.PI / 2).concat(Matrix.rotation(-Math.PI / 2))\n  \n    matrixEqual(matrix, Matrix.IDENTITY)\n  \n  test \"#toString\", ->\n    matrix = Matrix(0.5, 2, 0.5, -2, 3, 4.5)\n    matrixEqual eval(matrix.toString()), matrix\n  \n  test \"Maths\", ->\n    a = Matrix(12, 3, 3, 1, 7, 9)\n    b = Matrix(3, 8, 3, 2, 1, 5)\n  \n    c = a.concat(b)\n  \n    equals(c.a, 60)\n    equals(c.b, 17)\n    equals(c.c, 42)\n    equals(c.d, 11)\n    equals(c.tx, 34)\n    equals(c.ty, 17)\n  \n  test \"Order of transformations should match manual concat\", ->\n    tx = 10\n    ty = 5\n    theta = Math.PI/3\n    s = 2\n  \n    m1 = Matrix().translate(tx, ty).scale(s).rotate(theta)\n    m2 = Matrix().concat(Matrix.translation(tx, ty)).concat(Matrix.scale(s)).concat(Matrix.rotation(theta))\n  \n    matrixEqual(m1, m2)\n  \n  test \"IDENTITY is immutable\", ->\n    identity = Matrix.IDENTITY\n  \n    identity.a = 5\n  \n    equals identity.a, 1\n",
          "type": "blob"
        }
      },
      "distribution": {
        "matrix": {
          "path": "matrix",
          "content": "(function() {\n  var Matrix, frozen, isObject;\n\n  Matrix = function(a, b, c, d, tx, ty) {\n    var _ref;\n    if (isObject(a)) {\n      _ref = a, a = _ref.a, b = _ref.b, c = _ref.c, d = _ref.d, tx = _ref.tx, ty = _ref.ty;\n    }\n    return {\n      __proto__: Matrix.prototype,\n      a: a != null ? a : 1,\n      b: b != null ? b : 0,\n      c: c != null ? c : 0,\n      d: d != null ? d : 1,\n      tx: tx != null ? tx : 0,\n      ty: ty != null ? ty : 0\n    };\n  };\n\n  Matrix.Point = require(\"point\");\n\n  Matrix.prototype = {\n    concat: function(matrix) {\n      return Matrix(this.a * matrix.a + this.c * matrix.b, this.b * matrix.a + this.d * matrix.b, this.a * matrix.c + this.c * matrix.d, this.b * matrix.c + this.d * matrix.d, this.a * matrix.tx + this.c * matrix.ty + this.tx, this.b * matrix.tx + this.d * matrix.ty + this.ty);\n    },\n    copy: function() {\n      return Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);\n    },\n    deltaTransformPoint: function(point) {\n      return Matrix.Point(this.a * point.x + this.c * point.y, this.b * point.x + this.d * point.y);\n    },\n    inverse: function() {\n      var determinant;\n      determinant = this.a * this.d - this.b * this.c;\n      return Matrix(this.d / determinant, -this.b / determinant, -this.c / determinant, this.a / determinant, (this.c * this.ty - this.d * this.tx) / determinant, (this.b * this.tx - this.a * this.ty) / determinant);\n    },\n    rotate: function(theta, aboutPoint) {\n      return this.concat(Matrix.rotation(theta, aboutPoint));\n    },\n    scale: function(sx, sy, aboutPoint) {\n      return this.concat(Matrix.scale(sx, sy, aboutPoint));\n    },\n    skew: function(skewX, skewY) {\n      return this.concat(Matrix.skew(skewX, skewY));\n    },\n    toString: function() {\n      return \"Matrix(\" + this.a + \", \" + this.b + \", \" + this.c + \", \" + this.d + \", \" + this.tx + \", \" + this.ty + \")\";\n    },\n    transformPoint: function(point) {\n      return Matrix.Point(this.a * point.x + this.c * point.y + this.tx, this.b * point.x + this.d * point.y + this.ty);\n    },\n    translate: function(tx, ty) {\n      return this.concat(Matrix.translation(tx, ty));\n    }\n  };\n\n  Matrix.rotate = Matrix.rotation = function(theta, aboutPoint) {\n    var rotationMatrix;\n    rotationMatrix = Matrix(Math.cos(theta), Math.sin(theta), -Math.sin(theta), Math.cos(theta));\n    if (aboutPoint != null) {\n      rotationMatrix = Matrix.translation(aboutPoint.x, aboutPoint.y).concat(rotationMatrix).concat(Matrix.translation(-aboutPoint.x, -aboutPoint.y));\n    }\n    return rotationMatrix;\n  };\n\n  Matrix.scale = function(sx, sy, aboutPoint) {\n    var scaleMatrix;\n    sy = sy || sx;\n    scaleMatrix = Matrix(sx, 0, 0, sy);\n    if (aboutPoint) {\n      scaleMatrix = Matrix.translation(aboutPoint.x, aboutPoint.y).concat(scaleMatrix).concat(Matrix.translation(-aboutPoint.x, -aboutPoint.y));\n    }\n    return scaleMatrix;\n  };\n\n  Matrix.skew = function(skewX, skewY) {\n    return Matrix(0, Math.tan(skewY), Math.tan(skewX), 0);\n  };\n\n  Matrix.translate = Matrix.translation = function(tx, ty) {\n    return Matrix(1, 0, 0, 1, tx, ty);\n  };\n\n  isObject = function(object) {\n    return Object.prototype.toString.call(object) === \"[object Object]\";\n  };\n\n  frozen = function(object) {\n    if (typeof Object.freeze === \"function\") {\n      Object.freeze(object);\n    }\n    return object;\n  };\n\n  Matrix.IDENTITY = frozen(Matrix());\n\n  Matrix.HORIZONTAL_FLIP = frozen(Matrix(-1, 0, 0, 1));\n\n  Matrix.VERTICAL_FLIP = frozen(Matrix(1, 0, 0, -1));\n\n  module.exports = Matrix;\n\n}).call(this);\n\n//# sourceURL=matrix.coffee",
          "type": "blob"
        },
        "pixie": {
          "path": "pixie",
          "content": "module.exports = {\"version\":\"0.2.0\",\"entryPoint\":\"matrix\",\"dependencies\":{\"point\":\"distri/point:v0.2.0\"}};",
          "type": "blob"
        },
        "test/matrix": {
          "path": "test/matrix",
          "content": "(function() {\n  var Matrix, Point, equals, ok, test;\n\n  Matrix = require(\"../matrix\");\n\n  Point = require(\"point\");\n\n  ok = assert;\n\n  equals = assert.equal;\n\n  test = it;\n\n  describe(\"Matrix\", function() {\n    var TOLERANCE, equalEnough, matrixEqual;\n    TOLERANCE = 0.00001;\n    equalEnough = function(expected, actual, tolerance, message) {\n      message || (message = \"\" + expected + \" within \" + tolerance + \" of \" + actual);\n      return ok(expected + tolerance >= actual && expected - tolerance <= actual, message);\n    };\n    matrixEqual = function(m1, m2) {\n      equalEnough(m1.a, m2.a, TOLERANCE);\n      equalEnough(m1.b, m2.b, TOLERANCE);\n      equalEnough(m1.c, m2.c, TOLERANCE);\n      equalEnough(m1.d, m2.d, TOLERANCE);\n      equalEnough(m1.tx, m2.tx, TOLERANCE);\n      return equalEnough(m1.ty, m2.ty, TOLERANCE);\n    };\n    test(\"copy constructor\", function() {\n      var matrix, matrix2;\n      matrix = Matrix(1, 0, 0, 1, 10, 12);\n      matrix2 = Matrix(matrix);\n      ok(matrix !== matrix2);\n      return matrixEqual(matrix2, matrix);\n    });\n    test(\"Matrix() (Identity)\", function() {\n      var matrix;\n      matrix = Matrix();\n      equals(matrix.a, 1, \"a\");\n      equals(matrix.b, 0, \"b\");\n      equals(matrix.c, 0, \"c\");\n      equals(matrix.d, 1, \"d\");\n      equals(matrix.tx, 0, \"tx\");\n      equals(matrix.ty, 0, \"ty\");\n      return matrixEqual(matrix, Matrix.IDENTITY);\n    });\n    test(\"Empty\", function() {\n      var matrix;\n      matrix = Matrix(0, 0, 0, 0, 0, 0);\n      equals(matrix.a, 0, \"a\");\n      equals(matrix.b, 0, \"b\");\n      equals(matrix.c, 0, \"c\");\n      equals(matrix.d, 0, \"d\");\n      equals(matrix.tx, 0, \"tx\");\n      return equals(matrix.ty, 0, \"ty\");\n    });\n    test(\"#copy\", function() {\n      var copyMatrix, matrix;\n      matrix = Matrix(2, 0, 0, 2);\n      copyMatrix = matrix.copy();\n      matrixEqual(copyMatrix, matrix);\n      copyMatrix.a = 4;\n      equals(copyMatrix.a, 4);\n      return equals(matrix.a, 2, \"Old 'a' value is unchanged\");\n    });\n    test(\".scale\", function() {\n      var matrix;\n      matrix = Matrix.scale(2, 2);\n      equals(matrix.a, 2, \"a\");\n      equals(matrix.b, 0, \"b\");\n      equals(matrix.c, 0, \"c\");\n      equals(matrix.d, 2, \"d\");\n      matrix = Matrix.scale(3);\n      equals(matrix.a, 3, \"a\");\n      equals(matrix.b, 0, \"b\");\n      equals(matrix.c, 0, \"c\");\n      return equals(matrix.d, 3, \"d\");\n    });\n    test(\".scale (about a point)\", function() {\n      var p, transformedPoint;\n      p = Point(5, 17);\n      transformedPoint = Matrix.scale(3, 7, p).transformPoint(p);\n      equals(transformedPoint.x, p.x, \"Point should remain the same\");\n      return equals(transformedPoint.y, p.y, \"Point should remain the same\");\n    });\n    test(\"#scale (about a point)\", function() {\n      var p, transformedPoint;\n      p = Point(3, 11);\n      transformedPoint = Matrix.IDENTITY.scale(3, 7, p).transformPoint(p);\n      equals(transformedPoint.x, p.x, \"Point should remain the same\");\n      return equals(transformedPoint.y, p.y, \"Point should remain the same\");\n    });\n    test(\"#skew\", function() {\n      var angle, matrix;\n      matrix = Matrix();\n      angle = 0.25 * Math.PI;\n      matrix = matrix.skew(angle, 0);\n      return equals(matrix.c, Math.tan(angle));\n    });\n    test(\".rotation\", function() {\n      var matrix;\n      matrix = Matrix.rotation(Math.PI / 2);\n      equalEnough(matrix.a, 0, TOLERANCE);\n      equalEnough(matrix.b, 1, TOLERANCE);\n      equalEnough(matrix.c, -1, TOLERANCE);\n      return equalEnough(matrix.d, 0, TOLERANCE);\n    });\n    test(\".rotation (about a point)\", function() {\n      var p, transformedPoint;\n      p = Point(11, 7);\n      transformedPoint = Matrix.rotation(Math.PI / 2, p).transformPoint(p);\n      equals(transformedPoint.x, p.x, \"Point should remain the same\");\n      return equals(transformedPoint.y, p.y, \"Point should remain the same\");\n    });\n    test(\"#rotate (about a point)\", function() {\n      var p, transformedPoint;\n      p = Point(8, 5);\n      transformedPoint = Matrix.IDENTITY.rotate(Math.PI / 2, p).transformPoint(p);\n      equals(transformedPoint.x, p.x, \"Point should remain the same\");\n      return equals(transformedPoint.y, p.y, \"Point should remain the same\");\n    });\n    test(\"#inverse (Identity)\", function() {\n      var matrix;\n      matrix = Matrix().inverse();\n      equals(matrix.a, 1, \"a\");\n      equals(matrix.b, 0, \"b\");\n      equals(matrix.c, 0, \"c\");\n      equals(matrix.d, 1, \"d\");\n      equals(matrix.tx, 0, \"tx\");\n      return equals(matrix.ty, 0, \"ty\");\n    });\n    test(\"#concat\", function() {\n      var matrix;\n      matrix = Matrix.rotation(Math.PI / 2).concat(Matrix.rotation(-Math.PI / 2));\n      return matrixEqual(matrix, Matrix.IDENTITY);\n    });\n    test(\"#toString\", function() {\n      var matrix;\n      matrix = Matrix(0.5, 2, 0.5, -2, 3, 4.5);\n      return matrixEqual(eval(matrix.toString()), matrix);\n    });\n    test(\"Maths\", function() {\n      var a, b, c;\n      a = Matrix(12, 3, 3, 1, 7, 9);\n      b = Matrix(3, 8, 3, 2, 1, 5);\n      c = a.concat(b);\n      equals(c.a, 60);\n      equals(c.b, 17);\n      equals(c.c, 42);\n      equals(c.d, 11);\n      equals(c.tx, 34);\n      return equals(c.ty, 17);\n    });\n    test(\"Order of transformations should match manual concat\", function() {\n      var m1, m2, s, theta, tx, ty;\n      tx = 10;\n      ty = 5;\n      theta = Math.PI / 3;\n      s = 2;\n      m1 = Matrix().translate(tx, ty).scale(s).rotate(theta);\n      m2 = Matrix().concat(Matrix.translation(tx, ty)).concat(Matrix.scale(s)).concat(Matrix.rotation(theta));\n      return matrixEqual(m1, m2);\n    });\n    return test(\"IDENTITY is immutable\", function() {\n      var identity;\n      identity = Matrix.IDENTITY;\n      identity.a = 5;\n      return equals(identity.a, 1);\n    });\n  });\n\n}).call(this);\n\n//# sourceURL=test/matrix.coffee",
          "type": "blob"
        }
      },
      "progenitor": {
        "url": "http://strd6.github.io/editor/"
      },
      "version": "0.2.0",
      "entryPoint": "matrix",
      "repository": {
        "id": 13551996,
        "name": "matrix",
        "full_name": "distri/matrix",
        "owner": {
          "login": "distri",
          "id": 6005125,
          "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
          "gravatar_id": null,
          "url": "https://api.github.com/users/distri",
          "html_url": "https://github.com/distri",
          "followers_url": "https://api.github.com/users/distri/followers",
          "following_url": "https://api.github.com/users/distri/following{/other_user}",
          "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
          "organizations_url": "https://api.github.com/users/distri/orgs",
          "repos_url": "https://api.github.com/users/distri/repos",
          "events_url": "https://api.github.com/users/distri/events{/privacy}",
          "received_events_url": "https://api.github.com/users/distri/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/distri/matrix",
        "description": "Where matrices become heroes, together.",
        "fork": false,
        "url": "https://api.github.com/repos/distri/matrix",
        "forks_url": "https://api.github.com/repos/distri/matrix/forks",
        "keys_url": "https://api.github.com/repos/distri/matrix/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/distri/matrix/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/distri/matrix/teams",
        "hooks_url": "https://api.github.com/repos/distri/matrix/hooks",
        "issue_events_url": "https://api.github.com/repos/distri/matrix/issues/events{/number}",
        "events_url": "https://api.github.com/repos/distri/matrix/events",
        "assignees_url": "https://api.github.com/repos/distri/matrix/assignees{/user}",
        "branches_url": "https://api.github.com/repos/distri/matrix/branches{/branch}",
        "tags_url": "https://api.github.com/repos/distri/matrix/tags",
        "blobs_url": "https://api.github.com/repos/distri/matrix/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/distri/matrix/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/distri/matrix/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/distri/matrix/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/distri/matrix/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/distri/matrix/languages",
        "stargazers_url": "https://api.github.com/repos/distri/matrix/stargazers",
        "contributors_url": "https://api.github.com/repos/distri/matrix/contributors",
        "subscribers_url": "https://api.github.com/repos/distri/matrix/subscribers",
        "subscription_url": "https://api.github.com/repos/distri/matrix/subscription",
        "commits_url": "https://api.github.com/repos/distri/matrix/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/distri/matrix/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/distri/matrix/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/distri/matrix/issues/comments/{number}",
        "contents_url": "https://api.github.com/repos/distri/matrix/contents/{+path}",
        "compare_url": "https://api.github.com/repos/distri/matrix/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/distri/matrix/merges",
        "archive_url": "https://api.github.com/repos/distri/matrix/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/distri/matrix/downloads",
        "issues_url": "https://api.github.com/repos/distri/matrix/issues{/number}",
        "pulls_url": "https://api.github.com/repos/distri/matrix/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/distri/matrix/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/distri/matrix/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/distri/matrix/labels{/name}",
        "releases_url": "https://api.github.com/repos/distri/matrix/releases{/id}",
        "created_at": "2013-10-14T03:46:16Z",
        "updated_at": "2013-12-23T23:45:28Z",
        "pushed_at": "2013-10-15T00:22:51Z",
        "git_url": "git://github.com/distri/matrix.git",
        "ssh_url": "git@github.com:distri/matrix.git",
        "clone_url": "https://github.com/distri/matrix.git",
        "svn_url": "https://github.com/distri/matrix",
        "homepage": null,
        "size": 580,
        "stargazers_count": 0,
        "watchers_count": 0,
        "language": "CoffeeScript",
        "has_issues": true,
        "has_downloads": true,
        "has_wiki": true,
        "forks_count": 0,
        "mirror_url": null,
        "open_issues_count": 0,
        "forks": 0,
        "open_issues": 0,
        "watchers": 0,
        "default_branch": "master",
        "master_branch": "master",
        "permissions": {
          "admin": true,
          "push": true,
          "pull": true
        },
        "organization": {
          "login": "distri",
          "id": 6005125,
          "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
          "gravatar_id": null,
          "url": "https://api.github.com/users/distri",
          "html_url": "https://github.com/distri",
          "followers_url": "https://api.github.com/users/distri/followers",
          "following_url": "https://api.github.com/users/distri/following{/other_user}",
          "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
          "organizations_url": "https://api.github.com/users/distri/orgs",
          "repos_url": "https://api.github.com/users/distri/repos",
          "events_url": "https://api.github.com/users/distri/events{/privacy}",
          "received_events_url": "https://api.github.com/users/distri/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "network_count": 0,
        "subscribers_count": 1,
        "branch": "master",
        "defaultBranch": "master"
      },
      "dependencies": {
        "point": {
          "source": {
            "LICENSE": {
              "path": "LICENSE",
              "mode": "100644",
              "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
              "type": "blob"
            },
            "README.md": {
              "path": "README.md",
              "mode": "100644",
              "content": "point\n=====\n\nJavaScript Point implementation\n",
              "type": "blob"
            },
            "interactive_runtime.coffee.md": {
              "path": "interactive_runtime.coffee.md",
              "mode": "100644",
              "content": "Interactive Runtime\n-------------------\n\n    window.Point = require(\"./point\")\n\nRegister our example runner.\n\n    Interactive.register \"example\", ({source, runtimeElement}) ->\n      program = CoffeeScript.compile(source, bare: true)\n\n      outputElement = document.createElement \"pre\"\n      runtimeElement.empty().append outputElement\n\n      result = eval(program)\n\n      if typeof result is \"number\"\n        if result != (0 | result)\n          result = result.toFixed(4)\n    \n\n      outputElement.textContent = result\n",
              "type": "blob"
            },
            "pixie.cson": {
              "path": "pixie.cson",
              "mode": "100644",
              "content": "version: \"0.2.0\"\nentryPoint: \"point\"\n",
              "type": "blob"
            },
            "point.coffee.md": {
              "path": "point.coffee.md",
              "mode": "100644",
              "content": "\nCreate a new point with given x and y coordinates. If no arguments are given\ndefaults to (0, 0).\n\n>     #! example\n>     Point()\n\n----\n\n>     #! example\n>     Point(-2, 5)\n\n----\n\n    Point = (x, y) ->\n      if isObject(x)\n        {x, y} = x\n\n      __proto__: Point.prototype\n      x: x ? 0\n      y: y ? 0\n\nPoint protoype methods.\n\n    Point:: =\n\nConstrain the magnitude of a vector.\n\n      clamp: (n) ->\n        if @magnitude() > n\n          @norm(n)\n        else\n          @copy()\n\nCreates a copy of this point.\n\n      copy: ->\n        Point(@x, @y)\n\n>     #! example\n>     Point(1, 1).copy()\n\n----\n\nAdds a point to this one and returns the new point. You may\nalso use a two argument call like `point.add(x, y)`\nto add x and y values without a second point object.\n\n      add: (first, second) ->\n        if second?\n          Point(\n            @x + first\n            @y + second\n          )\n        else\n          Point(\n            @x + first.x,\n            @y + first.y\n          )\n\n>     #! example\n>     Point(2, 3).add(Point(3, 4))\n\n----\n\nSubtracts a point to this one and returns the new point.\n\n      subtract: (first, second) ->\n        if second?\n          Point(\n            @x - first,\n            @y - second\n          )\n        else\n          @add(first.scale(-1))\n\n>     #! example\n>     Point(1, 2).subtract(Point(2, 0))\n\n----\n\nScale this Point (Vector) by a constant amount.\n\n      scale: (scalar) ->\n        Point(\n          @x * scalar,\n          @y * scalar\n        )\n\n>     #! example\n>     point = Point(5, 6).scale(2)\n\n----\n\nThe `norm` of a vector is the unit vector pointing in the same direction. This method\ntreats the point as though it is a vector from the origin to (x, y).\n\n      norm: (length=1.0) ->\n        if m = @length()\n          @scale(length/m)\n        else\n          @copy()\n\n>     #! example\n>     point = Point(2, 3).norm()\n\n----\n\nDetermine whether this `Point` is equal to another `Point`. Returns `true` if\nthey are equal and `false` otherwise.\n\n      equal: (other) ->\n        @x == other.x && @y == other.y\n\n>     #! example\n>     point = Point(2, 3)\n>\n>     point.equal(Point(2, 3))\n\n----\n\nComputed the length of this point as though it were a vector from (0,0) to (x,y).\n\n      length: ->\n        Math.sqrt(@dot(this))\n\n>     #! example\n>     Point(5, 7).length()\n\n----\n\nCalculate the magnitude of this Point (Vector).\n\n      magnitude: ->\n        @length()\n\n>     #! example\n>     Point(5, 7).magnitude()\n\n----\n\nReturns the direction in radians of this point from the origin.\n\n      direction: ->\n        Math.atan2(@y, @x)\n\n>     #! example\n>     point = Point(0, 1)\n>\n>     point.direction()\n\n----\n\nCalculate the dot product of this point and another point (Vector).\n\n      dot: (other) ->\n        @x * other.x + @y * other.y\n\n\n`cross` calculates the cross product of this point and another point (Vector).\nUsually cross products are thought of as only applying to three dimensional vectors,\nbut z can be treated as zero. The result of this method is interpreted as the magnitude\nof the vector result of the cross product between [x1, y1, 0] x [x2, y2, 0]\nperpendicular to the xy plane.\n\n      cross: (other) ->\n        @x * other.y - other.x * @y\n\n\n`distance` computes the Euclidean distance between this point and another point.\n\n      distance: (other) ->\n        Point.distance(this, other)\n\n>     #! example\n>     pointA = Point(2, 3)\n>     pointB = Point(9, 2)\n>\n>     pointA.distance(pointB)\n\n----\n\n`toFixed` returns a string representation of this point with fixed decimal places.\n\n      toFixed: (n) ->\n        \"Point(#{@x.toFixed(n)}, #{@y.toFixed(n)})\"\n\n`toString` returns a string representation of this point. The representation is\nsuch that if `eval`d it will return a `Point`\n\n      toString: ->\n        \"Point(#{@x}, #{@y})\"\n\n`distance` Compute the Euclidean distance between two points.\n\n    Point.distance = (p1, p2) ->\n      Math.sqrt(Point.distanceSquared(p1, p2))\n\n>     #! example\n>     pointA = Point(2, 3)\n>     pointB = Point(9, 2)\n>\n>     Point.distance(pointA, pointB)\n\n----\n\n`distanceSquared` The square of the Euclidean distance between two points.\n\n    Point.distanceSquared = (p1, p2) ->\n      Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2)\n\n>     #! example\n>     pointA = Point(2, 3)\n>     pointB = Point(9, 2)\n>\n>     Point.distanceSquared(pointA, pointB)\n\n----\n\n`interpolate` returns a point along the path from p1 to p2\n\n    Point.interpolate = (p1, p2, t) ->\n      p2.subtract(p1).scale(t).add(p1)\n\nConstruct a point on the unit circle for the given angle.\n\n    Point.fromAngle = (angle) ->\n      Point(Math.cos(angle), Math.sin(angle))\n\n>     #! example\n>     Point.fromAngle(Math.PI / 2)\n\n----\n\nIf you have two dudes, one standing at point p1, and the other\nstanding at point p2, then this method will return the direction\nthat the dude standing at p1 will need to face to look at p2.\n\n>     #! example\n>     p1 = Point(0, 0)\n>     p2 = Point(7, 3)\n>\n>     Point.direction(p1, p2)\n\n    Point.direction = (p1, p2) ->\n      Math.atan2(\n        p2.y - p1.y,\n        p2.x - p1.x\n      )\n\nThe centroid of a set of points is their arithmetic mean.\n\n    Point.centroid = (points...) ->\n      points.reduce((sumPoint, point) ->\n        sumPoint.add(point)\n      , Point(0, 0))\n      .scale(1/points.length)\n\nGenerate a random point on the unit circle.\n\n    Point.random = ->\n      Point.fromAngle(Math.random() * 2 * Math.PI)\n\nExport\n\n    module.exports = Point\n\nHelpers\n-------\n\n    isObject = (object) ->\n      Object.prototype.toString.call(object) is \"[object Object]\"\n\nLive Examples\n-------------\n\n>     #! setup\n>     require(\"/interactive_runtime\")\n",
              "type": "blob"
            },
            "test/test.coffee": {
              "path": "test/test.coffee",
              "mode": "100644",
              "content": "Point = require \"../point\"\n\nok = assert\nequals = assert.equal\n\nTAU = 2 * Math.PI\n\ndescribe \"Point\", ->\n\n  TOLERANCE = 0.00001\n\n  equalEnough = (expected, actual, tolerance, message) ->\n    message ||= \"\" + expected + \" within \" + tolerance + \" of \" + actual\n    ok(expected + tolerance >= actual && expected - tolerance <= actual, message)\n\n  it \"copy constructor\", ->\n    p = Point(3, 7)\n\n    p2 = Point(p)\n\n    equals p2.x, p.x\n    equals p2.y, p.y\n\n  it \"#add\", ->\n    p1 = Point(5, 6)\n    p2 = Point(7, 5)\n\n    result = p1.add(p2)\n\n    equals result.x, p1.x + p2.x\n    equals result.y, p1.y + p2.y\n\n    equals p1.x, 5\n    equals p1.y, 6\n    equals p2.x, 7\n    equals p2.y, 5\n\n  it \"#add with two arguments\", ->\n    point = Point(3, 7)\n    x = 2\n    y = 1\n\n    result = point.add(x, y)\n\n    equals result.x, point.x + x\n    equals result.y, point.y + y\n\n    x = 2\n    y = 0\n\n    result = point.add(x, y)\n\n    equals result.x, point.x + x\n    equals result.y, point.y + y\n\n  it \"#add existing\", ->\n    p = Point(0, 0)\n\n    p.add(Point(3, 5))\n\n    equals p.x, 0\n    equals p.y, 0\n\n  it \"#subtract\", ->\n    p1 = Point(5, 6)\n    p2 = Point(7, 5)\n\n    result = p1.subtract(p2)\n\n    equals result.x, p1.x - p2.x\n    equals result.y, p1.y - p2.y\n\n  it \"#subtract existing\", ->\n    p = Point(8, 6)\n\n    p.subtract(3, 4)\n\n    equals p.x, 8\n    equals p.y, 6\n\n  it \"#norm\", ->\n    p = Point(2, 0)\n\n    normal = p.norm()\n    equals normal.x, 1\n\n    normal = p.norm(5)\n    equals normal.x, 5\n\n    p = Point(0, 0)\n\n    normal = p.norm()\n    equals normal.x, 0, \"x value of norm of point(0,0) is 0\"\n    equals normal.y, 0, \"y value of norm of point(0,0) is 0\"\n\n  it \"#norm existing\", ->\n    p = Point(6, 8)\n\n    p.norm(5)\n\n    equals p.x, 6\n    equals p.y, 8\n\n  it \"#scale\", ->\n    p = Point(5, 6)\n    scalar = 2\n\n    result = p.scale(scalar)\n\n    equals result.x, p.x * scalar\n    equals result.y, p.y * scalar\n\n    equals p.x, 5\n    equals p.y, 6\n\n  it \"#scale existing\", ->\n    p = Point(0, 1)\n    scalar = 3\n\n    p.scale(scalar)\n\n    equals p.x, 0\n    equals p.y, 1\n\n  it \"#equal\", ->\n    ok Point(7, 8).equal(Point(7, 8))\n\n  it \"#magnitude\", ->\n    equals Point(3, 4).magnitude(), 5\n\n  it \"#length\", ->\n    equals Point(0, 0).length(), 0\n    equals Point(-1, 0).length(), 1\n\n  it \"#toString\", ->\n    p = Point(7, 5)\n    ok eval(p.toString()).equal(p)\n\n  it \"#clamp\", ->\n    p = Point(10, 10)\n    p2 = p.clamp(5)\n\n    equals p2.length(), 5\n\n  it \".centroid\", ->\n    centroid = Point.centroid(\n      Point(0, 0),\n      Point(10, 10),\n      Point(10, 0),\n      Point(0, 10)\n    )\n\n    equals centroid.x, 5\n    equals centroid.y, 5\n\n  it \".fromAngle\", ->\n    p = Point.fromAngle(TAU / 4)\n\n    equalEnough p.x, 0, TOLERANCE\n    equals p.y, 1\n\n  it \".random\", ->\n    p = Point.random()\n\n    ok p\n\n  it \".interpolate\", ->\n    p1 = Point(10, 7)\n    p2 = Point(-6, 29)\n\n    ok p1.equal(Point.interpolate(p1, p2, 0))\n    ok p2.equal(Point.interpolate(p1, p2, 1))\n",
              "type": "blob"
            }
          },
          "distribution": {
            "interactive_runtime": {
              "path": "interactive_runtime",
              "content": "(function() {\n  window.Point = require(\"./point\");\n\n  Interactive.register(\"example\", function(_arg) {\n    var outputElement, program, result, runtimeElement, source;\n    source = _arg.source, runtimeElement = _arg.runtimeElement;\n    program = CoffeeScript.compile(source, {\n      bare: true\n    });\n    outputElement = document.createElement(\"pre\");\n    runtimeElement.empty().append(outputElement);\n    result = eval(program);\n    if (typeof result === \"number\") {\n      if (result !== (0 | result)) {\n        result = result.toFixed(4);\n      }\n    }\n    return outputElement.textContent = result;\n  });\n\n}).call(this);\n\n//# sourceURL=interactive_runtime.coffee",
              "type": "blob"
            },
            "pixie": {
              "path": "pixie",
              "content": "module.exports = {\"version\":\"0.2.0\",\"entryPoint\":\"point\"};",
              "type": "blob"
            },
            "point": {
              "path": "point",
              "content": "(function() {\n  var Point, isObject,\n    __slice = [].slice;\n\n  Point = function(x, y) {\n    var _ref;\n    if (isObject(x)) {\n      _ref = x, x = _ref.x, y = _ref.y;\n    }\n    return {\n      __proto__: Point.prototype,\n      x: x != null ? x : 0,\n      y: y != null ? y : 0\n    };\n  };\n\n  Point.prototype = {\n    clamp: function(n) {\n      if (this.magnitude() > n) {\n        return this.norm(n);\n      } else {\n        return this.copy();\n      }\n    },\n    copy: function() {\n      return Point(this.x, this.y);\n    },\n    add: function(first, second) {\n      if (second != null) {\n        return Point(this.x + first, this.y + second);\n      } else {\n        return Point(this.x + first.x, this.y + first.y);\n      }\n    },\n    subtract: function(first, second) {\n      if (second != null) {\n        return Point(this.x - first, this.y - second);\n      } else {\n        return this.add(first.scale(-1));\n      }\n    },\n    scale: function(scalar) {\n      return Point(this.x * scalar, this.y * scalar);\n    },\n    norm: function(length) {\n      var m;\n      if (length == null) {\n        length = 1.0;\n      }\n      if (m = this.length()) {\n        return this.scale(length / m);\n      } else {\n        return this.copy();\n      }\n    },\n    equal: function(other) {\n      return this.x === other.x && this.y === other.y;\n    },\n    length: function() {\n      return Math.sqrt(this.dot(this));\n    },\n    magnitude: function() {\n      return this.length();\n    },\n    direction: function() {\n      return Math.atan2(this.y, this.x);\n    },\n    dot: function(other) {\n      return this.x * other.x + this.y * other.y;\n    },\n    cross: function(other) {\n      return this.x * other.y - other.x * this.y;\n    },\n    distance: function(other) {\n      return Point.distance(this, other);\n    },\n    toFixed: function(n) {\n      return \"Point(\" + (this.x.toFixed(n)) + \", \" + (this.y.toFixed(n)) + \")\";\n    },\n    toString: function() {\n      return \"Point(\" + this.x + \", \" + this.y + \")\";\n    }\n  };\n\n  Point.distance = function(p1, p2) {\n    return Math.sqrt(Point.distanceSquared(p1, p2));\n  };\n\n  Point.distanceSquared = function(p1, p2) {\n    return Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2);\n  };\n\n  Point.interpolate = function(p1, p2, t) {\n    return p2.subtract(p1).scale(t).add(p1);\n  };\n\n  Point.fromAngle = function(angle) {\n    return Point(Math.cos(angle), Math.sin(angle));\n  };\n\n  Point.direction = function(p1, p2) {\n    return Math.atan2(p2.y - p1.y, p2.x - p1.x);\n  };\n\n  Point.centroid = function() {\n    var points;\n    points = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    return points.reduce(function(sumPoint, point) {\n      return sumPoint.add(point);\n    }, Point(0, 0)).scale(1 / points.length);\n  };\n\n  Point.random = function() {\n    return Point.fromAngle(Math.random() * 2 * Math.PI);\n  };\n\n  module.exports = Point;\n\n  isObject = function(object) {\n    return Object.prototype.toString.call(object) === \"[object Object]\";\n  };\n\n}).call(this);\n\n//# sourceURL=point.coffee",
              "type": "blob"
            },
            "test/test": {
              "path": "test/test",
              "content": "(function() {\n  var Point, TAU, equals, ok;\n\n  Point = require(\"../point\");\n\n  ok = assert;\n\n  equals = assert.equal;\n\n  TAU = 2 * Math.PI;\n\n  describe(\"Point\", function() {\n    var TOLERANCE, equalEnough;\n    TOLERANCE = 0.00001;\n    equalEnough = function(expected, actual, tolerance, message) {\n      message || (message = \"\" + expected + \" within \" + tolerance + \" of \" + actual);\n      return ok(expected + tolerance >= actual && expected - tolerance <= actual, message);\n    };\n    it(\"copy constructor\", function() {\n      var p, p2;\n      p = Point(3, 7);\n      p2 = Point(p);\n      equals(p2.x, p.x);\n      return equals(p2.y, p.y);\n    });\n    it(\"#add\", function() {\n      var p1, p2, result;\n      p1 = Point(5, 6);\n      p2 = Point(7, 5);\n      result = p1.add(p2);\n      equals(result.x, p1.x + p2.x);\n      equals(result.y, p1.y + p2.y);\n      equals(p1.x, 5);\n      equals(p1.y, 6);\n      equals(p2.x, 7);\n      return equals(p2.y, 5);\n    });\n    it(\"#add with two arguments\", function() {\n      var point, result, x, y;\n      point = Point(3, 7);\n      x = 2;\n      y = 1;\n      result = point.add(x, y);\n      equals(result.x, point.x + x);\n      equals(result.y, point.y + y);\n      x = 2;\n      y = 0;\n      result = point.add(x, y);\n      equals(result.x, point.x + x);\n      return equals(result.y, point.y + y);\n    });\n    it(\"#add existing\", function() {\n      var p;\n      p = Point(0, 0);\n      p.add(Point(3, 5));\n      equals(p.x, 0);\n      return equals(p.y, 0);\n    });\n    it(\"#subtract\", function() {\n      var p1, p2, result;\n      p1 = Point(5, 6);\n      p2 = Point(7, 5);\n      result = p1.subtract(p2);\n      equals(result.x, p1.x - p2.x);\n      return equals(result.y, p1.y - p2.y);\n    });\n    it(\"#subtract existing\", function() {\n      var p;\n      p = Point(8, 6);\n      p.subtract(3, 4);\n      equals(p.x, 8);\n      return equals(p.y, 6);\n    });\n    it(\"#norm\", function() {\n      var normal, p;\n      p = Point(2, 0);\n      normal = p.norm();\n      equals(normal.x, 1);\n      normal = p.norm(5);\n      equals(normal.x, 5);\n      p = Point(0, 0);\n      normal = p.norm();\n      equals(normal.x, 0, \"x value of norm of point(0,0) is 0\");\n      return equals(normal.y, 0, \"y value of norm of point(0,0) is 0\");\n    });\n    it(\"#norm existing\", function() {\n      var p;\n      p = Point(6, 8);\n      p.norm(5);\n      equals(p.x, 6);\n      return equals(p.y, 8);\n    });\n    it(\"#scale\", function() {\n      var p, result, scalar;\n      p = Point(5, 6);\n      scalar = 2;\n      result = p.scale(scalar);\n      equals(result.x, p.x * scalar);\n      equals(result.y, p.y * scalar);\n      equals(p.x, 5);\n      return equals(p.y, 6);\n    });\n    it(\"#scale existing\", function() {\n      var p, scalar;\n      p = Point(0, 1);\n      scalar = 3;\n      p.scale(scalar);\n      equals(p.x, 0);\n      return equals(p.y, 1);\n    });\n    it(\"#equal\", function() {\n      return ok(Point(7, 8).equal(Point(7, 8)));\n    });\n    it(\"#magnitude\", function() {\n      return equals(Point(3, 4).magnitude(), 5);\n    });\n    it(\"#length\", function() {\n      equals(Point(0, 0).length(), 0);\n      return equals(Point(-1, 0).length(), 1);\n    });\n    it(\"#toString\", function() {\n      var p;\n      p = Point(7, 5);\n      return ok(eval(p.toString()).equal(p));\n    });\n    it(\"#clamp\", function() {\n      var p, p2;\n      p = Point(10, 10);\n      p2 = p.clamp(5);\n      return equals(p2.length(), 5);\n    });\n    it(\".centroid\", function() {\n      var centroid;\n      centroid = Point.centroid(Point(0, 0), Point(10, 10), Point(10, 0), Point(0, 10));\n      equals(centroid.x, 5);\n      return equals(centroid.y, 5);\n    });\n    it(\".fromAngle\", function() {\n      var p;\n      p = Point.fromAngle(TAU / 4);\n      equalEnough(p.x, 0, TOLERANCE);\n      return equals(p.y, 1);\n    });\n    it(\".random\", function() {\n      var p;\n      p = Point.random();\n      return ok(p);\n    });\n    return it(\".interpolate\", function() {\n      var p1, p2;\n      p1 = Point(10, 7);\n      p2 = Point(-6, 29);\n      ok(p1.equal(Point.interpolate(p1, p2, 0)));\n      return ok(p2.equal(Point.interpolate(p1, p2, 1)));\n    });\n  });\n\n}).call(this);\n\n//# sourceURL=test/test.coffee",
              "type": "blob"
            }
          },
          "progenitor": {
            "url": "http://strd6.github.io/editor/"
          },
          "version": "0.2.0",
          "entryPoint": "point",
          "repository": {
            "id": 13484982,
            "name": "point",
            "full_name": "distri/point",
            "owner": {
              "login": "distri",
              "id": 6005125,
              "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
              "gravatar_id": null,
              "url": "https://api.github.com/users/distri",
              "html_url": "https://github.com/distri",
              "followers_url": "https://api.github.com/users/distri/followers",
              "following_url": "https://api.github.com/users/distri/following{/other_user}",
              "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
              "organizations_url": "https://api.github.com/users/distri/orgs",
              "repos_url": "https://api.github.com/users/distri/repos",
              "events_url": "https://api.github.com/users/distri/events{/privacy}",
              "received_events_url": "https://api.github.com/users/distri/received_events",
              "type": "Organization",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/distri/point",
            "description": "JavaScript Point implementation",
            "fork": false,
            "url": "https://api.github.com/repos/distri/point",
            "forks_url": "https://api.github.com/repos/distri/point/forks",
            "keys_url": "https://api.github.com/repos/distri/point/keys{/key_id}",
            "collaborators_url": "https://api.github.com/repos/distri/point/collaborators{/collaborator}",
            "teams_url": "https://api.github.com/repos/distri/point/teams",
            "hooks_url": "https://api.github.com/repos/distri/point/hooks",
            "issue_events_url": "https://api.github.com/repos/distri/point/issues/events{/number}",
            "events_url": "https://api.github.com/repos/distri/point/events",
            "assignees_url": "https://api.github.com/repos/distri/point/assignees{/user}",
            "branches_url": "https://api.github.com/repos/distri/point/branches{/branch}",
            "tags_url": "https://api.github.com/repos/distri/point/tags",
            "blobs_url": "https://api.github.com/repos/distri/point/git/blobs{/sha}",
            "git_tags_url": "https://api.github.com/repos/distri/point/git/tags{/sha}",
            "git_refs_url": "https://api.github.com/repos/distri/point/git/refs{/sha}",
            "trees_url": "https://api.github.com/repos/distri/point/git/trees{/sha}",
            "statuses_url": "https://api.github.com/repos/distri/point/statuses/{sha}",
            "languages_url": "https://api.github.com/repos/distri/point/languages",
            "stargazers_url": "https://api.github.com/repos/distri/point/stargazers",
            "contributors_url": "https://api.github.com/repos/distri/point/contributors",
            "subscribers_url": "https://api.github.com/repos/distri/point/subscribers",
            "subscription_url": "https://api.github.com/repos/distri/point/subscription",
            "commits_url": "https://api.github.com/repos/distri/point/commits{/sha}",
            "git_commits_url": "https://api.github.com/repos/distri/point/git/commits{/sha}",
            "comments_url": "https://api.github.com/repos/distri/point/comments{/number}",
            "issue_comment_url": "https://api.github.com/repos/distri/point/issues/comments/{number}",
            "contents_url": "https://api.github.com/repos/distri/point/contents/{+path}",
            "compare_url": "https://api.github.com/repos/distri/point/compare/{base}...{head}",
            "merges_url": "https://api.github.com/repos/distri/point/merges",
            "archive_url": "https://api.github.com/repos/distri/point/{archive_format}{/ref}",
            "downloads_url": "https://api.github.com/repos/distri/point/downloads",
            "issues_url": "https://api.github.com/repos/distri/point/issues{/number}",
            "pulls_url": "https://api.github.com/repos/distri/point/pulls{/number}",
            "milestones_url": "https://api.github.com/repos/distri/point/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/distri/point/notifications{?since,all,participating}",
            "labels_url": "https://api.github.com/repos/distri/point/labels{/name}",
            "releases_url": "https://api.github.com/repos/distri/point/releases{/id}",
            "created_at": "2013-10-10T22:59:27Z",
            "updated_at": "2013-12-23T23:33:20Z",
            "pushed_at": "2013-10-15T00:22:04Z",
            "git_url": "git://github.com/distri/point.git",
            "ssh_url": "git@github.com:distri/point.git",
            "clone_url": "https://github.com/distri/point.git",
            "svn_url": "https://github.com/distri/point",
            "homepage": null,
            "size": 836,
            "stargazers_count": 0,
            "watchers_count": 0,
            "language": "CoffeeScript",
            "has_issues": true,
            "has_downloads": true,
            "has_wiki": true,
            "forks_count": 0,
            "mirror_url": null,
            "open_issues_count": 0,
            "forks": 0,
            "open_issues": 0,
            "watchers": 0,
            "default_branch": "master",
            "master_branch": "master",
            "permissions": {
              "admin": true,
              "push": true,
              "pull": true
            },
            "organization": {
              "login": "distri",
              "id": 6005125,
              "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
              "gravatar_id": null,
              "url": "https://api.github.com/users/distri",
              "html_url": "https://github.com/distri",
              "followers_url": "https://api.github.com/users/distri/followers",
              "following_url": "https://api.github.com/users/distri/following{/other_user}",
              "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
              "organizations_url": "https://api.github.com/users/distri/orgs",
              "repos_url": "https://api.github.com/users/distri/repos",
              "events_url": "https://api.github.com/users/distri/events{/privacy}",
              "received_events_url": "https://api.github.com/users/distri/received_events",
              "type": "Organization",
              "site_admin": false
            },
            "network_count": 0,
            "subscribers_count": 1,
            "branch": "v0.2.0",
            "defaultBranch": "master"
          },
          "dependencies": {}
        }
      }
    },
    "touch-canvas": {
      "source": {
        "LICENSE": {
          "path": "LICENSE",
          "mode": "100644",
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
          "type": "blob"
        },
        "README.md": {
          "path": "README.md",
          "mode": "100644",
          "content": "touch-canvas\n============\n\nA canvas you can touch\n",
          "type": "blob"
        },
        "pixie.cson": {
          "path": "pixie.cson",
          "mode": "100644",
          "content": "entryPoint: \"touch_canvas\"\nversion: \"0.3.1\"\ndependencies:\n  \"bindable\": \"distri/bindable:v0.1.0\"\n  \"core\": \"distri/core:v0.6.0\"\n  \"pixie-canvas\": \"distri/pixie-canvas:v0.9.2\"\n",
          "type": "blob"
        },
        "touch_canvas.coffee.md": {
          "path": "touch_canvas.coffee.md",
          "mode": "100644",
          "content": "Touch Canvas\n============\n\nDemo\n----\n\n>     #! demo\n>     paint = (position) ->\n>       x = position.x * canvas.width()\n>       y = position.y * canvas.height()\n>\n>       canvas.drawCircle\n>         radius: 10\n>         color: \"red\"\n>         position:\n>           x: x\n>           y: y\n>\n>     canvas.on \"touch\", (p) ->\n>       paint(p)\n>\n>     canvas.on \"move\", (p) ->\n>       paint(p)\n\n----\n\nImplementation\n--------------\n\nA canvas element that reports mouse and touch events in the range [0, 1].\n\n    Bindable = require \"bindable\"\n    Core = require \"core\"\n    PixieCanvas = require \"pixie-canvas\"\n\nA number really close to 1. We should never actually return 1, but move events\nmay get a little fast and loose with exiting the canvas, so let's play it safe.\n\n    MAX = 0.999999999999\n\n    TouchCanvas = (I={}) ->\n      self = PixieCanvas I\n\n      Core(I, self)\n\n      self.include Bindable\n\n      element = self.element()\n\n      # Keep track of if the mouse is active in the element\n      active = false\n\nWhen we click within the canvas set the value for the position we clicked at.\n\n      listen element, \"mousedown\", (e) ->\n        active = true\n\n        self.trigger \"touch\", localPosition(e)\n\nHandle touch starts\n\n      listen element, \"touchstart\", (e) ->\n        # Global `event`\n        processTouches event, (touch) ->\n          self.trigger \"touch\", localPosition(touch)\n\nWhen the mouse moves apply a change for each x value in the intervening positions.\n\n      listen element, \"mousemove\", (e) ->\n        if active\n          self.trigger \"move\", localPosition(e)\n\nHandle moves outside of the element.\n\n      listen document, \"mousemove\", (e) ->\n        if active\n          self.trigger \"move\", localPosition(e)\n\nHandle touch moves.\n\n      listen element, \"touchmove\", (e) ->\n        # Global `event`\n        processTouches event, (touch) ->\n          self.trigger \"move\", localPosition(touch)\n\nHandle releases.\n\n      listen element, \"mouseup\", (e) ->\n        self.trigger \"release\", localPosition(e)\n        active = false\n\n        return\n\nHandle touch ends.\n\n      listen element, \"touchend\", (e) ->\n        # Global `event`\n        processTouches event, (touch) ->\n          self.trigger \"release\", localPosition(touch)\n\nWhenever the mouse button is released from anywhere, deactivate. Be sure to\ntrigger the release event if the mousedown started within the element.\n\n      listen document, \"mouseup\", (e) ->\n        if active\n          self.trigger \"release\", localPosition(e)\n\n        active = false\n\n        return\n\nHelpers\n-------\n\nProcess touches\n\n      processTouches = (event, fn) ->\n        event.preventDefault()\n\n        if event.type is \"touchend\"\n          # touchend doesn't have any touches, but does have changed touches\n          touches = event.changedTouches\n        else\n          touches = event.touches\n\n        self.debug? Array::map.call touches, ({identifier, pageX, pageY}) ->\n          \"[#{identifier}: #{pageX}, #{pageY} (#{event.type})]\\n\"\n\n        Array::forEach.call touches, fn\n\nLocal event position.\n\n      localPosition = (e) ->\n        rect = element.getBoundingClientRect()\n\n        point =\n          x: clamp (e.pageX - rect.left) / rect.width, 0, MAX\n          y: clamp (e.pageY - rect.top) / rect.height, 0, MAX\n\n        # Add mouse into touch identifiers as 0\n        point.identifier = (e.identifier + 1) or 0\n\n        return point\n\nReturn self\n\n      return self\n\nAttach an event listener to an element\n\n    listen = (element, event, handler) ->\n      element.addEventListener(event, handler, false)\n\nClamp a number to be within a range.\n\n    clamp = (number, min, max) ->\n      Math.min(Math.max(number, min), max)\n\nExport\n\n    module.exports = TouchCanvas\n\nInteractive Examples\n--------------------\n\n>     #! setup\n>     TouchCanvas = require \"/touch_canvas\"\n>\n>     Interactive.register \"demo\", ({source, runtimeElement}) ->\n>       canvas = TouchCanvas\n>         width: 400\n>         height: 200\n>\n>       code = CoffeeScript.compile(source)\n>\n>       runtimeElement.empty().append canvas.element()\n>       Function(\"canvas\", code)(canvas)\n",
          "type": "blob"
        },
        "test/touch.coffee": {
          "path": "test/touch.coffee",
          "mode": "100644",
          "content": "TouchCanvas = require \"../touch_canvas\"\n\nextend = (target, sources...) ->\n  for source in sources\n    for name of source\n      target[name] = source[name]\n\n  return target\n\nfireEvent = (element, type, params={}) ->\n  event = document.createEvent(\"Events\")\n  event.initEvent type, true, false\n  extend event, params\n  element.dispatchEvent event\n\ndescribe \"TouchCanvas\", ->\n  it \"should be creatable\", ->\n    c = TouchCanvas()\n    assert c\n\n    document.body.appendChild(c.element())\n  \n  it \"should fire events\", (done) ->\n    canvas = TouchCanvas()\n\n    canvas.on \"touch\", (e) ->\n      done()\n\n    fireEvent canvas.element(), \"mousedown\"\n",
          "type": "blob"
        }
      },
      "distribution": {
        "pixie": {
          "path": "pixie",
          "content": "module.exports = {\"entryPoint\":\"touch_canvas\",\"version\":\"0.3.1\",\"dependencies\":{\"bindable\":\"distri/bindable:v0.1.0\",\"core\":\"distri/core:v0.6.0\",\"pixie-canvas\":\"distri/pixie-canvas:v0.9.2\"}};",
          "type": "blob"
        },
        "touch_canvas": {
          "path": "touch_canvas",
          "content": "(function() {\n  var Bindable, Core, MAX, PixieCanvas, TouchCanvas, clamp, listen;\n\n  Bindable = require(\"bindable\");\n\n  Core = require(\"core\");\n\n  PixieCanvas = require(\"pixie-canvas\");\n\n  MAX = 0.999999999999;\n\n  TouchCanvas = function(I) {\n    var active, element, localPosition, processTouches, self;\n    if (I == null) {\n      I = {};\n    }\n    self = PixieCanvas(I);\n    Core(I, self);\n    self.include(Bindable);\n    element = self.element();\n    active = false;\n    listen(element, \"mousedown\", function(e) {\n      active = true;\n      return self.trigger(\"touch\", localPosition(e));\n    });\n    listen(element, \"touchstart\", function(e) {\n      return processTouches(event, function(touch) {\n        return self.trigger(\"touch\", localPosition(touch));\n      });\n    });\n    listen(element, \"mousemove\", function(e) {\n      if (active) {\n        return self.trigger(\"move\", localPosition(e));\n      }\n    });\n    listen(document, \"mousemove\", function(e) {\n      if (active) {\n        return self.trigger(\"move\", localPosition(e));\n      }\n    });\n    listen(element, \"touchmove\", function(e) {\n      return processTouches(event, function(touch) {\n        return self.trigger(\"move\", localPosition(touch));\n      });\n    });\n    listen(element, \"mouseup\", function(e) {\n      self.trigger(\"release\", localPosition(e));\n      active = false;\n    });\n    listen(element, \"touchend\", function(e) {\n      return processTouches(event, function(touch) {\n        return self.trigger(\"release\", localPosition(touch));\n      });\n    });\n    listen(document, \"mouseup\", function(e) {\n      if (active) {\n        self.trigger(\"release\", localPosition(e));\n      }\n      active = false;\n    });\n    processTouches = function(event, fn) {\n      var touches;\n      event.preventDefault();\n      if (event.type === \"touchend\") {\n        touches = event.changedTouches;\n      } else {\n        touches = event.touches;\n      }\n      if (typeof self.debug === \"function\") {\n        self.debug(Array.prototype.map.call(touches, function(_arg) {\n          var identifier, pageX, pageY;\n          identifier = _arg.identifier, pageX = _arg.pageX, pageY = _arg.pageY;\n          return \"[\" + identifier + \": \" + pageX + \", \" + pageY + \" (\" + event.type + \")]\\n\";\n        }));\n      }\n      return Array.prototype.forEach.call(touches, fn);\n    };\n    localPosition = function(e) {\n      var point, rect;\n      rect = element.getBoundingClientRect();\n      point = {\n        x: clamp((e.pageX - rect.left) / rect.width, 0, MAX),\n        y: clamp((e.pageY - rect.top) / rect.height, 0, MAX)\n      };\n      point.identifier = (e.identifier + 1) || 0;\n      return point;\n    };\n    return self;\n  };\n\n  listen = function(element, event, handler) {\n    return element.addEventListener(event, handler, false);\n  };\n\n  clamp = function(number, min, max) {\n    return Math.min(Math.max(number, min), max);\n  };\n\n  module.exports = TouchCanvas;\n\n}).call(this);\n\n//# sourceURL=touch_canvas.coffee",
          "type": "blob"
        },
        "test/touch": {
          "path": "test/touch",
          "content": "(function() {\n  var TouchCanvas, extend, fireEvent,\n    __slice = [].slice;\n\n  TouchCanvas = require(\"../touch_canvas\");\n\n  extend = function() {\n    var name, source, sources, target, _i, _len;\n    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = sources.length; _i < _len; _i++) {\n      source = sources[_i];\n      for (name in source) {\n        target[name] = source[name];\n      }\n    }\n    return target;\n  };\n\n  fireEvent = function(element, type, params) {\n    var event;\n    if (params == null) {\n      params = {};\n    }\n    event = document.createEvent(\"Events\");\n    event.initEvent(type, true, false);\n    extend(event, params);\n    return element.dispatchEvent(event);\n  };\n\n  describe(\"TouchCanvas\", function() {\n    it(\"should be creatable\", function() {\n      var c;\n      c = TouchCanvas();\n      assert(c);\n      return document.body.appendChild(c.element());\n    });\n    return it(\"should fire events\", function(done) {\n      var canvas;\n      canvas = TouchCanvas();\n      canvas.on(\"touch\", function(e) {\n        return done();\n      });\n      return fireEvent(canvas.element(), \"mousedown\");\n    });\n  });\n\n}).call(this);\n\n//# sourceURL=test/touch.coffee",
          "type": "blob"
        }
      },
      "progenitor": {
        "url": "http://strd6.github.io/editor/"
      },
      "version": "0.3.1",
      "entryPoint": "touch_canvas",
      "repository": {
        "id": 13783983,
        "name": "touch-canvas",
        "full_name": "distri/touch-canvas",
        "owner": {
          "login": "distri",
          "id": 6005125,
          "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
          "gravatar_id": null,
          "url": "https://api.github.com/users/distri",
          "html_url": "https://github.com/distri",
          "followers_url": "https://api.github.com/users/distri/followers",
          "following_url": "https://api.github.com/users/distri/following{/other_user}",
          "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
          "organizations_url": "https://api.github.com/users/distri/orgs",
          "repos_url": "https://api.github.com/users/distri/repos",
          "events_url": "https://api.github.com/users/distri/events{/privacy}",
          "received_events_url": "https://api.github.com/users/distri/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/distri/touch-canvas",
        "description": "A canvas you can touch",
        "fork": false,
        "url": "https://api.github.com/repos/distri/touch-canvas",
        "forks_url": "https://api.github.com/repos/distri/touch-canvas/forks",
        "keys_url": "https://api.github.com/repos/distri/touch-canvas/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/distri/touch-canvas/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/distri/touch-canvas/teams",
        "hooks_url": "https://api.github.com/repos/distri/touch-canvas/hooks",
        "issue_events_url": "https://api.github.com/repos/distri/touch-canvas/issues/events{/number}",
        "events_url": "https://api.github.com/repos/distri/touch-canvas/events",
        "assignees_url": "https://api.github.com/repos/distri/touch-canvas/assignees{/user}",
        "branches_url": "https://api.github.com/repos/distri/touch-canvas/branches{/branch}",
        "tags_url": "https://api.github.com/repos/distri/touch-canvas/tags",
        "blobs_url": "https://api.github.com/repos/distri/touch-canvas/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/distri/touch-canvas/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/distri/touch-canvas/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/distri/touch-canvas/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/distri/touch-canvas/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/distri/touch-canvas/languages",
        "stargazers_url": "https://api.github.com/repos/distri/touch-canvas/stargazers",
        "contributors_url": "https://api.github.com/repos/distri/touch-canvas/contributors",
        "subscribers_url": "https://api.github.com/repos/distri/touch-canvas/subscribers",
        "subscription_url": "https://api.github.com/repos/distri/touch-canvas/subscription",
        "commits_url": "https://api.github.com/repos/distri/touch-canvas/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/distri/touch-canvas/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/distri/touch-canvas/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/distri/touch-canvas/issues/comments/{number}",
        "contents_url": "https://api.github.com/repos/distri/touch-canvas/contents/{+path}",
        "compare_url": "https://api.github.com/repos/distri/touch-canvas/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/distri/touch-canvas/merges",
        "archive_url": "https://api.github.com/repos/distri/touch-canvas/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/distri/touch-canvas/downloads",
        "issues_url": "https://api.github.com/repos/distri/touch-canvas/issues{/number}",
        "pulls_url": "https://api.github.com/repos/distri/touch-canvas/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/distri/touch-canvas/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/distri/touch-canvas/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/distri/touch-canvas/labels{/name}",
        "releases_url": "https://api.github.com/repos/distri/touch-canvas/releases{/id}",
        "created_at": "2013-10-22T19:46:48Z",
        "updated_at": "2013-11-29T20:46:28Z",
        "pushed_at": "2013-11-29T20:46:28Z",
        "git_url": "git://github.com/distri/touch-canvas.git",
        "ssh_url": "git@github.com:distri/touch-canvas.git",
        "clone_url": "https://github.com/distri/touch-canvas.git",
        "svn_url": "https://github.com/distri/touch-canvas",
        "homepage": null,
        "size": 280,
        "stargazers_count": 0,
        "watchers_count": 0,
        "language": "CoffeeScript",
        "has_issues": true,
        "has_downloads": true,
        "has_wiki": true,
        "forks_count": 0,
        "mirror_url": null,
        "open_issues_count": 0,
        "forks": 0,
        "open_issues": 0,
        "watchers": 0,
        "default_branch": "master",
        "master_branch": "master",
        "permissions": {
          "admin": true,
          "push": true,
          "pull": true
        },
        "organization": {
          "login": "distri",
          "id": 6005125,
          "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
          "gravatar_id": null,
          "url": "https://api.github.com/users/distri",
          "html_url": "https://github.com/distri",
          "followers_url": "https://api.github.com/users/distri/followers",
          "following_url": "https://api.github.com/users/distri/following{/other_user}",
          "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
          "organizations_url": "https://api.github.com/users/distri/orgs",
          "repos_url": "https://api.github.com/users/distri/repos",
          "events_url": "https://api.github.com/users/distri/events{/privacy}",
          "received_events_url": "https://api.github.com/users/distri/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "network_count": 0,
        "subscribers_count": 1,
        "branch": "v0.3.1",
        "defaultBranch": "master"
      },
      "dependencies": {
        "bindable": {
          "source": {
            "LICENSE": {
              "path": "LICENSE",
              "mode": "100644",
              "content": "The MIT License (MIT)\n\nCopyright (c) 2014 distri\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
              "type": "blob"
            },
            "README.coffee.md": {
              "path": "README.coffee.md",
              "mode": "100644",
              "content": "Bindable\n========\n\n    Core = require \"core\"\n\nAdd event binding to objects.\n\n>     bindable = Bindable()\n>     bindable.on \"greet\", ->\n>       console.log \"yo!\"\n>     bindable.trigger \"greet\"\n>     #=> \"yo!\" is printed to log\n\nUse as a mixin.\n\n>    self.include Bindable\n\n    module.exports = (I={}, self=Core(I)) ->\n      eventCallbacks = {}\n\n      self.extend\n\nAdds a function as an event listener.\n\nThis will call `coolEventHandler` after `yourObject.trigger \"someCustomEvent\"`\nis called.\n\n>     yourObject.on \"someCustomEvent\", coolEventHandler\n\nHandlers can be attached to namespaces as well. The namespaces are only used\nfor finer control of targeting event removal. For example if you are making a\ncustom drawing system you could unbind `\".Drawable\"` events and add your own.\n\n>     yourObject.on \"\"\n\n        on: (namespacedEvent, callback) ->\n          [event, namespace] = namespacedEvent.split(\".\")\n\n          # HACK: Here we annotate the callback function with namespace metadata\n          # This will probably lead to some strange edge cases, but should work fine\n          # for simple cases.\n          if namespace\n            callback.__PIXIE ||= {}\n            callback.__PIXIE[namespace] = true\n\n          eventCallbacks[event] ||= []\n          eventCallbacks[event].push(callback)\n\n          return self\n\nRemoves a specific event listener, or all event listeners if\nno specific listener is given.\n\nRemoves the handler coolEventHandler from the event `\"someCustomEvent\"` while\nleaving the other events intact.\n\n>     yourObject.off \"someCustomEvent\", coolEventHandler\n\nRemoves all handlers attached to `\"anotherCustomEvent\"`\n\n>     yourObject.off \"anotherCustomEvent\"\n\nRemove all handlers from the `\".Drawable\" namespace`\n\n>     yourObject.off \".Drawable\"\n\n        off: (namespacedEvent, callback) ->\n          [event, namespace] = namespacedEvent.split(\".\")\n\n          if event\n            eventCallbacks[event] ||= []\n\n            if namespace\n              # Select only the callbacks that do not have this namespace metadata\n              eventCallbacks[event] = eventCallbacks.filter (callback) ->\n                !callback.__PIXIE?[namespace]?\n\n            else\n              if callback\n                remove eventCallbacks[event], callback\n              else\n                eventCallbacks[event] = []\n          else if namespace\n            # No event given\n            # Select only the callbacks that do not have this namespace metadata\n            # for any events bound\n            for key, callbacks of eventCallbacks\n              eventCallbacks[key] = callbacks.filter (callback) ->\n                !callback.__PIXIE?[namespace]?\n\n          return self\n\nCalls all listeners attached to the specified event.\n\n>     # calls each event handler bound to \"someCustomEvent\"\n>     yourObject.trigger \"someCustomEvent\"\n\nAdditional parameters can be passed to the handlers.\n\n>     yourObject.trigger \"someEvent\", \"hello\", \"anotherParameter\"\n\n        trigger: (event, parameters...) ->\n          callbacks = eventCallbacks[event]\n\n          if callbacks\n            callbacks.forEach (callback) ->\n              callback.apply(self, parameters)\n\n          return self\n\nLegacy method aliases.\n\n      self.extend\n        bind: self.on\n        unbind: self.off\n\nHelpers\n-------\n\nRemove a value from an array.\n\n    remove = (array, value) ->\n      index = array.indexOf(value)\n\n      if index >= 0\n        array.splice(index, 1)[0]\n",
              "type": "blob"
            },
            "pixie.cson": {
              "path": "pixie.cson",
              "mode": "100644",
              "content": "entryPoint: \"README\"\nversion: \"0.1.0\"\ndependencies:\n  core: \"distri/core:v0.6.0\"\n",
              "type": "blob"
            },
            "test/bindable.coffee": {
              "path": "test/bindable.coffee",
              "mode": "100644",
              "content": "test = it\nok = assert\nequal = assert.equal\n\nBindable = require \"../README\"\n\ndescribe \"Bindable\", ->\n\n  test \"#bind and #trigger\", ->\n    o = Bindable()\n\n    o.bind(\"test\", -> ok true)\n\n    o.trigger(\"test\")\n\n  test \"Multiple bindings\", ->\n    o = Bindable()\n\n    o.bind(\"test\", -> ok true)\n    o.bind(\"test\", -> ok true)\n\n    o.trigger(\"test\")\n\n  test \"#trigger arguments\", ->\n    o = Bindable()\n\n    param1 = \"the message\"\n    param2 = 3\n\n    o.bind \"test\", (p1, p2) ->\n      equal(p1, param1)\n      equal(p2, param2)\n\n    o.trigger \"test\", param1, param2\n\n  test \"#unbind\", ->\n    o = Bindable()\n\n    callback = ->\n      ok false\n\n    o.bind \"test\", callback\n    # Unbind specific event\n    o.unbind \"test\", callback\n    o.trigger \"test\"\n\n    o.bind \"test\", callback\n    # Unbind all events\n    o.unbind \"test\"\n    o.trigger \"test\"\n\n  test \"#trigger namespace\", ->\n    o = Bindable()\n    o.bind \"test.TestNamespace\", ->\n      ok true\n\n    o.trigger \"test\"\n\n    o.unbind \".TestNamespace\"\n    o.trigger \"test\"\n\n  test \"#unbind namespaced\", ->\n    o = Bindable()\n\n    o.bind \"test.TestNamespace\", ->\n      ok true\n\n    o.trigger \"test\"\n\n    o.unbind \".TestNamespace\", ->\n    o.trigger \"test\"\n",
              "type": "blob"
            }
          },
          "distribution": {
            "README": {
              "path": "README",
              "content": "(function() {\n  var Core, remove,\n    __slice = [].slice;\n\n  Core = require(\"core\");\n\n  module.exports = function(I, self) {\n    var eventCallbacks;\n    if (I == null) {\n      I = {};\n    }\n    if (self == null) {\n      self = Core(I);\n    }\n    eventCallbacks = {};\n    self.extend({\n      on: function(namespacedEvent, callback) {\n        var event, namespace, _ref;\n        _ref = namespacedEvent.split(\".\"), event = _ref[0], namespace = _ref[1];\n        if (namespace) {\n          callback.__PIXIE || (callback.__PIXIE = {});\n          callback.__PIXIE[namespace] = true;\n        }\n        eventCallbacks[event] || (eventCallbacks[event] = []);\n        eventCallbacks[event].push(callback);\n        return self;\n      },\n      off: function(namespacedEvent, callback) {\n        var callbacks, event, key, namespace, _ref;\n        _ref = namespacedEvent.split(\".\"), event = _ref[0], namespace = _ref[1];\n        if (event) {\n          eventCallbacks[event] || (eventCallbacks[event] = []);\n          if (namespace) {\n            eventCallbacks[event] = eventCallbacks.filter(function(callback) {\n              var _ref1;\n              return ((_ref1 = callback.__PIXIE) != null ? _ref1[namespace] : void 0) == null;\n            });\n          } else {\n            if (callback) {\n              remove(eventCallbacks[event], callback);\n            } else {\n              eventCallbacks[event] = [];\n            }\n          }\n        } else if (namespace) {\n          for (key in eventCallbacks) {\n            callbacks = eventCallbacks[key];\n            eventCallbacks[key] = callbacks.filter(function(callback) {\n              var _ref1;\n              return ((_ref1 = callback.__PIXIE) != null ? _ref1[namespace] : void 0) == null;\n            });\n          }\n        }\n        return self;\n      },\n      trigger: function() {\n        var callbacks, event, parameters;\n        event = arguments[0], parameters = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n        callbacks = eventCallbacks[event];\n        if (callbacks) {\n          callbacks.forEach(function(callback) {\n            return callback.apply(self, parameters);\n          });\n        }\n        return self;\n      }\n    });\n    return self.extend({\n      bind: self.on,\n      unbind: self.off\n    });\n  };\n\n  remove = function(array, value) {\n    var index;\n    index = array.indexOf(value);\n    if (index >= 0) {\n      return array.splice(index, 1)[0];\n    }\n  };\n\n}).call(this);\n\n//# sourceURL=README.coffee",
              "type": "blob"
            },
            "pixie": {
              "path": "pixie",
              "content": "module.exports = {\"entryPoint\":\"README\",\"version\":\"0.1.0\",\"dependencies\":{\"core\":\"distri/core:v0.6.0\"}};",
              "type": "blob"
            },
            "test/bindable": {
              "path": "test/bindable",
              "content": "(function() {\n  var Bindable, equal, ok, test;\n\n  test = it;\n\n  ok = assert;\n\n  equal = assert.equal;\n\n  Bindable = require(\"../README\");\n\n  describe(\"Bindable\", function() {\n    test(\"#bind and #trigger\", function() {\n      var o;\n      o = Bindable();\n      o.bind(\"test\", function() {\n        return ok(true);\n      });\n      return o.trigger(\"test\");\n    });\n    test(\"Multiple bindings\", function() {\n      var o;\n      o = Bindable();\n      o.bind(\"test\", function() {\n        return ok(true);\n      });\n      o.bind(\"test\", function() {\n        return ok(true);\n      });\n      return o.trigger(\"test\");\n    });\n    test(\"#trigger arguments\", function() {\n      var o, param1, param2;\n      o = Bindable();\n      param1 = \"the message\";\n      param2 = 3;\n      o.bind(\"test\", function(p1, p2) {\n        equal(p1, param1);\n        return equal(p2, param2);\n      });\n      return o.trigger(\"test\", param1, param2);\n    });\n    test(\"#unbind\", function() {\n      var callback, o;\n      o = Bindable();\n      callback = function() {\n        return ok(false);\n      };\n      o.bind(\"test\", callback);\n      o.unbind(\"test\", callback);\n      o.trigger(\"test\");\n      o.bind(\"test\", callback);\n      o.unbind(\"test\");\n      return o.trigger(\"test\");\n    });\n    test(\"#trigger namespace\", function() {\n      var o;\n      o = Bindable();\n      o.bind(\"test.TestNamespace\", function() {\n        return ok(true);\n      });\n      o.trigger(\"test\");\n      o.unbind(\".TestNamespace\");\n      return o.trigger(\"test\");\n    });\n    return test(\"#unbind namespaced\", function() {\n      var o;\n      o = Bindable();\n      o.bind(\"test.TestNamespace\", function() {\n        return ok(true);\n      });\n      o.trigger(\"test\");\n      o.unbind(\".TestNamespace\", function() {});\n      return o.trigger(\"test\");\n    });\n  });\n\n}).call(this);\n\n//# sourceURL=test/bindable.coffee",
              "type": "blob"
            }
          },
          "progenitor": {
            "url": "http://strd6.github.io/editor/"
          },
          "version": "0.1.0",
          "entryPoint": "README",
          "repository": {
            "id": 17189431,
            "name": "bindable",
            "full_name": "distri/bindable",
            "owner": {
              "login": "distri",
              "id": 6005125,
              "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
              "gravatar_id": null,
              "url": "https://api.github.com/users/distri",
              "html_url": "https://github.com/distri",
              "followers_url": "https://api.github.com/users/distri/followers",
              "following_url": "https://api.github.com/users/distri/following{/other_user}",
              "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
              "organizations_url": "https://api.github.com/users/distri/orgs",
              "repos_url": "https://api.github.com/users/distri/repos",
              "events_url": "https://api.github.com/users/distri/events{/privacy}",
              "received_events_url": "https://api.github.com/users/distri/received_events",
              "type": "Organization",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/distri/bindable",
            "description": "Event binding",
            "fork": false,
            "url": "https://api.github.com/repos/distri/bindable",
            "forks_url": "https://api.github.com/repos/distri/bindable/forks",
            "keys_url": "https://api.github.com/repos/distri/bindable/keys{/key_id}",
            "collaborators_url": "https://api.github.com/repos/distri/bindable/collaborators{/collaborator}",
            "teams_url": "https://api.github.com/repos/distri/bindable/teams",
            "hooks_url": "https://api.github.com/repos/distri/bindable/hooks",
            "issue_events_url": "https://api.github.com/repos/distri/bindable/issues/events{/number}",
            "events_url": "https://api.github.com/repos/distri/bindable/events",
            "assignees_url": "https://api.github.com/repos/distri/bindable/assignees{/user}",
            "branches_url": "https://api.github.com/repos/distri/bindable/branches{/branch}",
            "tags_url": "https://api.github.com/repos/distri/bindable/tags",
            "blobs_url": "https://api.github.com/repos/distri/bindable/git/blobs{/sha}",
            "git_tags_url": "https://api.github.com/repos/distri/bindable/git/tags{/sha}",
            "git_refs_url": "https://api.github.com/repos/distri/bindable/git/refs{/sha}",
            "trees_url": "https://api.github.com/repos/distri/bindable/git/trees{/sha}",
            "statuses_url": "https://api.github.com/repos/distri/bindable/statuses/{sha}",
            "languages_url": "https://api.github.com/repos/distri/bindable/languages",
            "stargazers_url": "https://api.github.com/repos/distri/bindable/stargazers",
            "contributors_url": "https://api.github.com/repos/distri/bindable/contributors",
            "subscribers_url": "https://api.github.com/repos/distri/bindable/subscribers",
            "subscription_url": "https://api.github.com/repos/distri/bindable/subscription",
            "commits_url": "https://api.github.com/repos/distri/bindable/commits{/sha}",
            "git_commits_url": "https://api.github.com/repos/distri/bindable/git/commits{/sha}",
            "comments_url": "https://api.github.com/repos/distri/bindable/comments{/number}",
            "issue_comment_url": "https://api.github.com/repos/distri/bindable/issues/comments/{number}",
            "contents_url": "https://api.github.com/repos/distri/bindable/contents/{+path}",
            "compare_url": "https://api.github.com/repos/distri/bindable/compare/{base}...{head}",
            "merges_url": "https://api.github.com/repos/distri/bindable/merges",
            "archive_url": "https://api.github.com/repos/distri/bindable/{archive_format}{/ref}",
            "downloads_url": "https://api.github.com/repos/distri/bindable/downloads",
            "issues_url": "https://api.github.com/repos/distri/bindable/issues{/number}",
            "pulls_url": "https://api.github.com/repos/distri/bindable/pulls{/number}",
            "milestones_url": "https://api.github.com/repos/distri/bindable/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/distri/bindable/notifications{?since,all,participating}",
            "labels_url": "https://api.github.com/repos/distri/bindable/labels{/name}",
            "releases_url": "https://api.github.com/repos/distri/bindable/releases{/id}",
            "created_at": "2014-02-25T21:50:35Z",
            "updated_at": "2014-02-25T21:50:35Z",
            "pushed_at": "2014-02-25T21:50:35Z",
            "git_url": "git://github.com/distri/bindable.git",
            "ssh_url": "git@github.com:distri/bindable.git",
            "clone_url": "https://github.com/distri/bindable.git",
            "svn_url": "https://github.com/distri/bindable",
            "homepage": null,
            "size": 0,
            "stargazers_count": 0,
            "watchers_count": 0,
            "language": null,
            "has_issues": true,
            "has_downloads": true,
            "has_wiki": true,
            "forks_count": 0,
            "mirror_url": null,
            "open_issues_count": 0,
            "forks": 0,
            "open_issues": 0,
            "watchers": 0,
            "default_branch": "master",
            "master_branch": "master",
            "permissions": {
              "admin": true,
              "push": true,
              "pull": true
            },
            "organization": {
              "login": "distri",
              "id": 6005125,
              "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
              "gravatar_id": null,
              "url": "https://api.github.com/users/distri",
              "html_url": "https://github.com/distri",
              "followers_url": "https://api.github.com/users/distri/followers",
              "following_url": "https://api.github.com/users/distri/following{/other_user}",
              "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
              "organizations_url": "https://api.github.com/users/distri/orgs",
              "repos_url": "https://api.github.com/users/distri/repos",
              "events_url": "https://api.github.com/users/distri/events{/privacy}",
              "received_events_url": "https://api.github.com/users/distri/received_events",
              "type": "Organization",
              "site_admin": false
            },
            "network_count": 0,
            "subscribers_count": 2,
            "branch": "v0.1.0",
            "defaultBranch": "master"
          },
          "dependencies": {
            "core": {
              "source": {
                "LICENSE": {
                  "path": "LICENSE",
                  "mode": "100644",
                  "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
                  "type": "blob"
                },
                "README.md": {
                  "path": "README.md",
                  "mode": "100644",
                  "content": "core\n====\n\nAn object extension system.\n",
                  "type": "blob"
                },
                "core.coffee.md": {
                  "path": "core.coffee.md",
                  "mode": "100644",
                  "content": "Core\n====\n\nThe Core module is used to add extended functionality to objects without\nextending `Object.prototype` directly.\n\n    Core = (I={}, self={}) ->\n      extend self,\n\nExternal access to instance variables. Use of this property should be avoided\nin general, but can come in handy from time to time.\n\n>     #! example\n>     I =\n>       r: 255\n>       g: 0\n>       b: 100\n>\n>     myObject = Core(I)\n>\n>     [myObject.I.r, myObject.I.g, myObject.I.b]\n\n        I: I\n\nGenerates a public jQuery style getter / setter method for each `String` argument.\n\n>     #! example\n>     myObject = Core\n>       r: 255\n>       g: 0\n>       b: 100\n>\n>     myObject.attrAccessor \"r\", \"g\", \"b\"\n>\n>     myObject.r(254)\n\n        attrAccessor: (attrNames...) ->\n          attrNames.forEach (attrName) ->\n            self[attrName] = (newValue) ->\n              if arguments.length > 0\n                I[attrName] = newValue\n\n                return self\n              else\n                I[attrName]\n\n          return self\n\nGenerates a public jQuery style getter method for each String argument.\n\n>     #! example\n>     myObject = Core\n>       r: 255\n>       g: 0\n>       b: 100\n>\n>     myObject.attrReader \"r\", \"g\", \"b\"\n>\n>     [myObject.r(), myObject.g(), myObject.b()]\n\n        attrReader: (attrNames...) ->\n          attrNames.forEach (attrName) ->\n            self[attrName] = ->\n              I[attrName]\n\n          return self\n\nExtends this object with methods from the passed in object. A shortcut for Object.extend(self, methods)\n\n>     I =\n>       x: 30\n>       y: 40\n>       maxSpeed: 5\n>\n>     # we are using extend to give player\n>     # additional methods that Core doesn't have\n>     player = Core(I).extend\n>       increaseSpeed: ->\n>         I.maxSpeed += 1\n>\n>     player.increaseSpeed()\n\n        extend: (objects...) ->\n          extend self, objects...\n\nIncludes a module in this object. A module is a constructor that takes two parameters, `I` and `self`\n\n>     myObject = Core()\n>     myObject.include(Bindable)\n\n>     # now you can bind handlers to functions\n>     myObject.bind \"someEvent\", ->\n>       alert(\"wow. that was easy.\")\n\n        include: (modules...) ->\n          for Module in modules\n            Module(I, self)\n\n          return self\n\n      return self\n\nHelpers\n-------\n\nExtend an object with the properties of other objects.\n\n    extend = (target, sources...) ->\n      for source in sources\n        for name of source\n          target[name] = source[name]\n\n      return target\n\nExport\n\n    module.exports = Core\n",
                  "type": "blob"
                },
                "pixie.cson": {
                  "path": "pixie.cson",
                  "mode": "100644",
                  "content": "entryPoint: \"core\"\nversion: \"0.6.0\"\n",
                  "type": "blob"
                },
                "test/core.coffee": {
                  "path": "test/core.coffee",
                  "mode": "100644",
                  "content": "Core = require \"../core\"\n\nok = assert\nequals = assert.equal\ntest = it\n\ndescribe \"Core\", ->\n\n  test \"#extend\", ->\n    o = Core()\n  \n    o.extend\n      test: \"jawsome\"\n  \n    equals o.test, \"jawsome\"\n  \n  test \"#attrAccessor\", ->\n    o = Core\n      test: \"my_val\"\n  \n    o.attrAccessor(\"test\")\n  \n    equals o.test(), \"my_val\"\n    equals o.test(\"new_val\"), o\n    equals o.test(), \"new_val\"\n  \n  test \"#attrReader\", ->\n    o = Core\n      test: \"my_val\"\n  \n    o.attrReader(\"test\")\n  \n    equals o.test(), \"my_val\"\n    equals o.test(\"new_val\"), \"my_val\"\n    equals o.test(), \"my_val\"\n  \n  test \"#include\", ->\n    o = Core\n      test: \"my_val\"\n  \n    M = (I, self) ->\n      self.attrReader \"test\"\n  \n      self.extend\n        test2: \"cool\"\n  \n    ret = o.include M\n  \n    equals ret, o, \"Should return self\"\n  \n    equals o.test(), \"my_val\"\n    equals o.test2, \"cool\"\n  \n  test \"#include multiple\", ->\n    o = Core\n      test: \"my_val\"\n  \n    M = (I, self) ->\n      self.attrReader \"test\"\n  \n      self.extend\n        test2: \"cool\"\n  \n    M2 = (I, self) ->\n      self.extend\n        test2: \"coolio\"\n  \n    o.include M, M2\n  \n    equals o.test2, \"coolio\"\n",
                  "type": "blob"
                }
              },
              "distribution": {
                "core": {
                  "path": "core",
                  "content": "(function() {\n  var Core, extend,\n    __slice = [].slice;\n\n  Core = function(I, self) {\n    if (I == null) {\n      I = {};\n    }\n    if (self == null) {\n      self = {};\n    }\n    extend(self, {\n      I: I,\n      attrAccessor: function() {\n        var attrNames;\n        attrNames = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        attrNames.forEach(function(attrName) {\n          return self[attrName] = function(newValue) {\n            if (arguments.length > 0) {\n              I[attrName] = newValue;\n              return self;\n            } else {\n              return I[attrName];\n            }\n          };\n        });\n        return self;\n      },\n      attrReader: function() {\n        var attrNames;\n        attrNames = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        attrNames.forEach(function(attrName) {\n          return self[attrName] = function() {\n            return I[attrName];\n          };\n        });\n        return self;\n      },\n      extend: function() {\n        var objects;\n        objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return extend.apply(null, [self].concat(__slice.call(objects)));\n      },\n      include: function() {\n        var Module, modules, _i, _len;\n        modules = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        for (_i = 0, _len = modules.length; _i < _len; _i++) {\n          Module = modules[_i];\n          Module(I, self);\n        }\n        return self;\n      }\n    });\n    return self;\n  };\n\n  extend = function() {\n    var name, source, sources, target, _i, _len;\n    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = sources.length; _i < _len; _i++) {\n      source = sources[_i];\n      for (name in source) {\n        target[name] = source[name];\n      }\n    }\n    return target;\n  };\n\n  module.exports = Core;\n\n}).call(this);\n\n//# sourceURL=core.coffee",
                  "type": "blob"
                },
                "pixie": {
                  "path": "pixie",
                  "content": "module.exports = {\"entryPoint\":\"core\",\"version\":\"0.6.0\"};",
                  "type": "blob"
                },
                "test/core": {
                  "path": "test/core",
                  "content": "(function() {\n  var Core, equals, ok, test;\n\n  Core = require(\"../core\");\n\n  ok = assert;\n\n  equals = assert.equal;\n\n  test = it;\n\n  describe(\"Core\", function() {\n    test(\"#extend\", function() {\n      var o;\n      o = Core();\n      o.extend({\n        test: \"jawsome\"\n      });\n      return equals(o.test, \"jawsome\");\n    });\n    test(\"#attrAccessor\", function() {\n      var o;\n      o = Core({\n        test: \"my_val\"\n      });\n      o.attrAccessor(\"test\");\n      equals(o.test(), \"my_val\");\n      equals(o.test(\"new_val\"), o);\n      return equals(o.test(), \"new_val\");\n    });\n    test(\"#attrReader\", function() {\n      var o;\n      o = Core({\n        test: \"my_val\"\n      });\n      o.attrReader(\"test\");\n      equals(o.test(), \"my_val\");\n      equals(o.test(\"new_val\"), \"my_val\");\n      return equals(o.test(), \"my_val\");\n    });\n    test(\"#include\", function() {\n      var M, o, ret;\n      o = Core({\n        test: \"my_val\"\n      });\n      M = function(I, self) {\n        self.attrReader(\"test\");\n        return self.extend({\n          test2: \"cool\"\n        });\n      };\n      ret = o.include(M);\n      equals(ret, o, \"Should return self\");\n      equals(o.test(), \"my_val\");\n      return equals(o.test2, \"cool\");\n    });\n    return test(\"#include multiple\", function() {\n      var M, M2, o;\n      o = Core({\n        test: \"my_val\"\n      });\n      M = function(I, self) {\n        self.attrReader(\"test\");\n        return self.extend({\n          test2: \"cool\"\n        });\n      };\n      M2 = function(I, self) {\n        return self.extend({\n          test2: \"coolio\"\n        });\n      };\n      o.include(M, M2);\n      return equals(o.test2, \"coolio\");\n    });\n  });\n\n}).call(this);\n\n//# sourceURL=test/core.coffee",
                  "type": "blob"
                }
              },
              "progenitor": {
                "url": "http://strd6.github.io/editor/"
              },
              "version": "0.6.0",
              "entryPoint": "core",
              "repository": {
                "id": 13567517,
                "name": "core",
                "full_name": "distri/core",
                "owner": {
                  "login": "distri",
                  "id": 6005125,
                  "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
                  "gravatar_id": null,
                  "url": "https://api.github.com/users/distri",
                  "html_url": "https://github.com/distri",
                  "followers_url": "https://api.github.com/users/distri/followers",
                  "following_url": "https://api.github.com/users/distri/following{/other_user}",
                  "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
                  "organizations_url": "https://api.github.com/users/distri/orgs",
                  "repos_url": "https://api.github.com/users/distri/repos",
                  "events_url": "https://api.github.com/users/distri/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/distri/received_events",
                  "type": "Organization",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/distri/core",
                "description": "An object extension system.",
                "fork": false,
                "url": "https://api.github.com/repos/distri/core",
                "forks_url": "https://api.github.com/repos/distri/core/forks",
                "keys_url": "https://api.github.com/repos/distri/core/keys{/key_id}",
                "collaborators_url": "https://api.github.com/repos/distri/core/collaborators{/collaborator}",
                "teams_url": "https://api.github.com/repos/distri/core/teams",
                "hooks_url": "https://api.github.com/repos/distri/core/hooks",
                "issue_events_url": "https://api.github.com/repos/distri/core/issues/events{/number}",
                "events_url": "https://api.github.com/repos/distri/core/events",
                "assignees_url": "https://api.github.com/repos/distri/core/assignees{/user}",
                "branches_url": "https://api.github.com/repos/distri/core/branches{/branch}",
                "tags_url": "https://api.github.com/repos/distri/core/tags",
                "blobs_url": "https://api.github.com/repos/distri/core/git/blobs{/sha}",
                "git_tags_url": "https://api.github.com/repos/distri/core/git/tags{/sha}",
                "git_refs_url": "https://api.github.com/repos/distri/core/git/refs{/sha}",
                "trees_url": "https://api.github.com/repos/distri/core/git/trees{/sha}",
                "statuses_url": "https://api.github.com/repos/distri/core/statuses/{sha}",
                "languages_url": "https://api.github.com/repos/distri/core/languages",
                "stargazers_url": "https://api.github.com/repos/distri/core/stargazers",
                "contributors_url": "https://api.github.com/repos/distri/core/contributors",
                "subscribers_url": "https://api.github.com/repos/distri/core/subscribers",
                "subscription_url": "https://api.github.com/repos/distri/core/subscription",
                "commits_url": "https://api.github.com/repos/distri/core/commits{/sha}",
                "git_commits_url": "https://api.github.com/repos/distri/core/git/commits{/sha}",
                "comments_url": "https://api.github.com/repos/distri/core/comments{/number}",
                "issue_comment_url": "https://api.github.com/repos/distri/core/issues/comments/{number}",
                "contents_url": "https://api.github.com/repos/distri/core/contents/{+path}",
                "compare_url": "https://api.github.com/repos/distri/core/compare/{base}...{head}",
                "merges_url": "https://api.github.com/repos/distri/core/merges",
                "archive_url": "https://api.github.com/repos/distri/core/{archive_format}{/ref}",
                "downloads_url": "https://api.github.com/repos/distri/core/downloads",
                "issues_url": "https://api.github.com/repos/distri/core/issues{/number}",
                "pulls_url": "https://api.github.com/repos/distri/core/pulls{/number}",
                "milestones_url": "https://api.github.com/repos/distri/core/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/distri/core/notifications{?since,all,participating}",
                "labels_url": "https://api.github.com/repos/distri/core/labels{/name}",
                "releases_url": "https://api.github.com/repos/distri/core/releases{/id}",
                "created_at": "2013-10-14T17:04:33Z",
                "updated_at": "2013-12-24T00:49:21Z",
                "pushed_at": "2013-10-14T23:49:11Z",
                "git_url": "git://github.com/distri/core.git",
                "ssh_url": "git@github.com:distri/core.git",
                "clone_url": "https://github.com/distri/core.git",
                "svn_url": "https://github.com/distri/core",
                "homepage": null,
                "size": 592,
                "stargazers_count": 0,
                "watchers_count": 0,
                "language": "CoffeeScript",
                "has_issues": true,
                "has_downloads": true,
                "has_wiki": true,
                "forks_count": 0,
                "mirror_url": null,
                "open_issues_count": 0,
                "forks": 0,
                "open_issues": 0,
                "watchers": 0,
                "default_branch": "master",
                "master_branch": "master",
                "permissions": {
                  "admin": true,
                  "push": true,
                  "pull": true
                },
                "organization": {
                  "login": "distri",
                  "id": 6005125,
                  "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
                  "gravatar_id": null,
                  "url": "https://api.github.com/users/distri",
                  "html_url": "https://github.com/distri",
                  "followers_url": "https://api.github.com/users/distri/followers",
                  "following_url": "https://api.github.com/users/distri/following{/other_user}",
                  "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
                  "organizations_url": "https://api.github.com/users/distri/orgs",
                  "repos_url": "https://api.github.com/users/distri/repos",
                  "events_url": "https://api.github.com/users/distri/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/distri/received_events",
                  "type": "Organization",
                  "site_admin": false
                },
                "network_count": 0,
                "subscribers_count": 1,
                "branch": "v0.6.0",
                "defaultBranch": "master"
              },
              "dependencies": {}
            }
          }
        },
        "core": {
          "source": {
            "LICENSE": {
              "path": "LICENSE",
              "mode": "100644",
              "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
              "type": "blob"
            },
            "README.md": {
              "path": "README.md",
              "mode": "100644",
              "content": "core\n====\n\nAn object extension system.\n",
              "type": "blob"
            },
            "core.coffee.md": {
              "path": "core.coffee.md",
              "mode": "100644",
              "content": "Core\n====\n\nThe Core module is used to add extended functionality to objects without\nextending `Object.prototype` directly.\n\n    Core = (I={}, self={}) ->\n      extend self,\n\nExternal access to instance variables. Use of this property should be avoided\nin general, but can come in handy from time to time.\n\n>     #! example\n>     I =\n>       r: 255\n>       g: 0\n>       b: 100\n>\n>     myObject = Core(I)\n>\n>     [myObject.I.r, myObject.I.g, myObject.I.b]\n\n        I: I\n\nGenerates a public jQuery style getter / setter method for each `String` argument.\n\n>     #! example\n>     myObject = Core\n>       r: 255\n>       g: 0\n>       b: 100\n>\n>     myObject.attrAccessor \"r\", \"g\", \"b\"\n>\n>     myObject.r(254)\n\n        attrAccessor: (attrNames...) ->\n          attrNames.forEach (attrName) ->\n            self[attrName] = (newValue) ->\n              if arguments.length > 0\n                I[attrName] = newValue\n\n                return self\n              else\n                I[attrName]\n\n          return self\n\nGenerates a public jQuery style getter method for each String argument.\n\n>     #! example\n>     myObject = Core\n>       r: 255\n>       g: 0\n>       b: 100\n>\n>     myObject.attrReader \"r\", \"g\", \"b\"\n>\n>     [myObject.r(), myObject.g(), myObject.b()]\n\n        attrReader: (attrNames...) ->\n          attrNames.forEach (attrName) ->\n            self[attrName] = ->\n              I[attrName]\n\n          return self\n\nExtends this object with methods from the passed in object. A shortcut for Object.extend(self, methods)\n\n>     I =\n>       x: 30\n>       y: 40\n>       maxSpeed: 5\n>\n>     # we are using extend to give player\n>     # additional methods that Core doesn't have\n>     player = Core(I).extend\n>       increaseSpeed: ->\n>         I.maxSpeed += 1\n>\n>     player.increaseSpeed()\n\n        extend: (objects...) ->\n          extend self, objects...\n\nIncludes a module in this object. A module is a constructor that takes two parameters, `I` and `self`\n\n>     myObject = Core()\n>     myObject.include(Bindable)\n\n>     # now you can bind handlers to functions\n>     myObject.bind \"someEvent\", ->\n>       alert(\"wow. that was easy.\")\n\n        include: (modules...) ->\n          for Module in modules\n            Module(I, self)\n\n          return self\n\n      return self\n\nHelpers\n-------\n\nExtend an object with the properties of other objects.\n\n    extend = (target, sources...) ->\n      for source in sources\n        for name of source\n          target[name] = source[name]\n\n      return target\n\nExport\n\n    module.exports = Core\n",
              "type": "blob"
            },
            "pixie.cson": {
              "path": "pixie.cson",
              "mode": "100644",
              "content": "entryPoint: \"core\"\nversion: \"0.6.0\"\n",
              "type": "blob"
            },
            "test/core.coffee": {
              "path": "test/core.coffee",
              "mode": "100644",
              "content": "Core = require \"../core\"\n\nok = assert\nequals = assert.equal\ntest = it\n\ndescribe \"Core\", ->\n\n  test \"#extend\", ->\n    o = Core()\n  \n    o.extend\n      test: \"jawsome\"\n  \n    equals o.test, \"jawsome\"\n  \n  test \"#attrAccessor\", ->\n    o = Core\n      test: \"my_val\"\n  \n    o.attrAccessor(\"test\")\n  \n    equals o.test(), \"my_val\"\n    equals o.test(\"new_val\"), o\n    equals o.test(), \"new_val\"\n  \n  test \"#attrReader\", ->\n    o = Core\n      test: \"my_val\"\n  \n    o.attrReader(\"test\")\n  \n    equals o.test(), \"my_val\"\n    equals o.test(\"new_val\"), \"my_val\"\n    equals o.test(), \"my_val\"\n  \n  test \"#include\", ->\n    o = Core\n      test: \"my_val\"\n  \n    M = (I, self) ->\n      self.attrReader \"test\"\n  \n      self.extend\n        test2: \"cool\"\n  \n    ret = o.include M\n  \n    equals ret, o, \"Should return self\"\n  \n    equals o.test(), \"my_val\"\n    equals o.test2, \"cool\"\n  \n  test \"#include multiple\", ->\n    o = Core\n      test: \"my_val\"\n  \n    M = (I, self) ->\n      self.attrReader \"test\"\n  \n      self.extend\n        test2: \"cool\"\n  \n    M2 = (I, self) ->\n      self.extend\n        test2: \"coolio\"\n  \n    o.include M, M2\n  \n    equals o.test2, \"coolio\"\n",
              "type": "blob"
            }
          },
          "distribution": {
            "core": {
              "path": "core",
              "content": "(function() {\n  var Core, extend,\n    __slice = [].slice;\n\n  Core = function(I, self) {\n    if (I == null) {\n      I = {};\n    }\n    if (self == null) {\n      self = {};\n    }\n    extend(self, {\n      I: I,\n      attrAccessor: function() {\n        var attrNames;\n        attrNames = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        attrNames.forEach(function(attrName) {\n          return self[attrName] = function(newValue) {\n            if (arguments.length > 0) {\n              I[attrName] = newValue;\n              return self;\n            } else {\n              return I[attrName];\n            }\n          };\n        });\n        return self;\n      },\n      attrReader: function() {\n        var attrNames;\n        attrNames = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        attrNames.forEach(function(attrName) {\n          return self[attrName] = function() {\n            return I[attrName];\n          };\n        });\n        return self;\n      },\n      extend: function() {\n        var objects;\n        objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return extend.apply(null, [self].concat(__slice.call(objects)));\n      },\n      include: function() {\n        var Module, modules, _i, _len;\n        modules = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        for (_i = 0, _len = modules.length; _i < _len; _i++) {\n          Module = modules[_i];\n          Module(I, self);\n        }\n        return self;\n      }\n    });\n    return self;\n  };\n\n  extend = function() {\n    var name, source, sources, target, _i, _len;\n    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = sources.length; _i < _len; _i++) {\n      source = sources[_i];\n      for (name in source) {\n        target[name] = source[name];\n      }\n    }\n    return target;\n  };\n\n  module.exports = Core;\n\n}).call(this);\n\n//# sourceURL=core.coffee",
              "type": "blob"
            },
            "pixie": {
              "path": "pixie",
              "content": "module.exports = {\"entryPoint\":\"core\",\"version\":\"0.6.0\"};",
              "type": "blob"
            },
            "test/core": {
              "path": "test/core",
              "content": "(function() {\n  var Core, equals, ok, test;\n\n  Core = require(\"../core\");\n\n  ok = assert;\n\n  equals = assert.equal;\n\n  test = it;\n\n  describe(\"Core\", function() {\n    test(\"#extend\", function() {\n      var o;\n      o = Core();\n      o.extend({\n        test: \"jawsome\"\n      });\n      return equals(o.test, \"jawsome\");\n    });\n    test(\"#attrAccessor\", function() {\n      var o;\n      o = Core({\n        test: \"my_val\"\n      });\n      o.attrAccessor(\"test\");\n      equals(o.test(), \"my_val\");\n      equals(o.test(\"new_val\"), o);\n      return equals(o.test(), \"new_val\");\n    });\n    test(\"#attrReader\", function() {\n      var o;\n      o = Core({\n        test: \"my_val\"\n      });\n      o.attrReader(\"test\");\n      equals(o.test(), \"my_val\");\n      equals(o.test(\"new_val\"), \"my_val\");\n      return equals(o.test(), \"my_val\");\n    });\n    test(\"#include\", function() {\n      var M, o, ret;\n      o = Core({\n        test: \"my_val\"\n      });\n      M = function(I, self) {\n        self.attrReader(\"test\");\n        return self.extend({\n          test2: \"cool\"\n        });\n      };\n      ret = o.include(M);\n      equals(ret, o, \"Should return self\");\n      equals(o.test(), \"my_val\");\n      return equals(o.test2, \"cool\");\n    });\n    return test(\"#include multiple\", function() {\n      var M, M2, o;\n      o = Core({\n        test: \"my_val\"\n      });\n      M = function(I, self) {\n        self.attrReader(\"test\");\n        return self.extend({\n          test2: \"cool\"\n        });\n      };\n      M2 = function(I, self) {\n        return self.extend({\n          test2: \"coolio\"\n        });\n      };\n      o.include(M, M2);\n      return equals(o.test2, \"coolio\");\n    });\n  });\n\n}).call(this);\n\n//# sourceURL=test/core.coffee",
              "type": "blob"
            }
          },
          "progenitor": {
            "url": "http://strd6.github.io/editor/"
          },
          "version": "0.6.0",
          "entryPoint": "core",
          "repository": {
            "id": 13567517,
            "name": "core",
            "full_name": "distri/core",
            "owner": {
              "login": "distri",
              "id": 6005125,
              "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
              "gravatar_id": null,
              "url": "https://api.github.com/users/distri",
              "html_url": "https://github.com/distri",
              "followers_url": "https://api.github.com/users/distri/followers",
              "following_url": "https://api.github.com/users/distri/following{/other_user}",
              "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
              "organizations_url": "https://api.github.com/users/distri/orgs",
              "repos_url": "https://api.github.com/users/distri/repos",
              "events_url": "https://api.github.com/users/distri/events{/privacy}",
              "received_events_url": "https://api.github.com/users/distri/received_events",
              "type": "Organization",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/distri/core",
            "description": "An object extension system.",
            "fork": false,
            "url": "https://api.github.com/repos/distri/core",
            "forks_url": "https://api.github.com/repos/distri/core/forks",
            "keys_url": "https://api.github.com/repos/distri/core/keys{/key_id}",
            "collaborators_url": "https://api.github.com/repos/distri/core/collaborators{/collaborator}",
            "teams_url": "https://api.github.com/repos/distri/core/teams",
            "hooks_url": "https://api.github.com/repos/distri/core/hooks",
            "issue_events_url": "https://api.github.com/repos/distri/core/issues/events{/number}",
            "events_url": "https://api.github.com/repos/distri/core/events",
            "assignees_url": "https://api.github.com/repos/distri/core/assignees{/user}",
            "branches_url": "https://api.github.com/repos/distri/core/branches{/branch}",
            "tags_url": "https://api.github.com/repos/distri/core/tags",
            "blobs_url": "https://api.github.com/repos/distri/core/git/blobs{/sha}",
            "git_tags_url": "https://api.github.com/repos/distri/core/git/tags{/sha}",
            "git_refs_url": "https://api.github.com/repos/distri/core/git/refs{/sha}",
            "trees_url": "https://api.github.com/repos/distri/core/git/trees{/sha}",
            "statuses_url": "https://api.github.com/repos/distri/core/statuses/{sha}",
            "languages_url": "https://api.github.com/repos/distri/core/languages",
            "stargazers_url": "https://api.github.com/repos/distri/core/stargazers",
            "contributors_url": "https://api.github.com/repos/distri/core/contributors",
            "subscribers_url": "https://api.github.com/repos/distri/core/subscribers",
            "subscription_url": "https://api.github.com/repos/distri/core/subscription",
            "commits_url": "https://api.github.com/repos/distri/core/commits{/sha}",
            "git_commits_url": "https://api.github.com/repos/distri/core/git/commits{/sha}",
            "comments_url": "https://api.github.com/repos/distri/core/comments{/number}",
            "issue_comment_url": "https://api.github.com/repos/distri/core/issues/comments/{number}",
            "contents_url": "https://api.github.com/repos/distri/core/contents/{+path}",
            "compare_url": "https://api.github.com/repos/distri/core/compare/{base}...{head}",
            "merges_url": "https://api.github.com/repos/distri/core/merges",
            "archive_url": "https://api.github.com/repos/distri/core/{archive_format}{/ref}",
            "downloads_url": "https://api.github.com/repos/distri/core/downloads",
            "issues_url": "https://api.github.com/repos/distri/core/issues{/number}",
            "pulls_url": "https://api.github.com/repos/distri/core/pulls{/number}",
            "milestones_url": "https://api.github.com/repos/distri/core/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/distri/core/notifications{?since,all,participating}",
            "labels_url": "https://api.github.com/repos/distri/core/labels{/name}",
            "releases_url": "https://api.github.com/repos/distri/core/releases{/id}",
            "created_at": "2013-10-14T17:04:33Z",
            "updated_at": "2013-12-24T00:49:21Z",
            "pushed_at": "2013-10-14T23:49:11Z",
            "git_url": "git://github.com/distri/core.git",
            "ssh_url": "git@github.com:distri/core.git",
            "clone_url": "https://github.com/distri/core.git",
            "svn_url": "https://github.com/distri/core",
            "homepage": null,
            "size": 592,
            "stargazers_count": 0,
            "watchers_count": 0,
            "language": "CoffeeScript",
            "has_issues": true,
            "has_downloads": true,
            "has_wiki": true,
            "forks_count": 0,
            "mirror_url": null,
            "open_issues_count": 0,
            "forks": 0,
            "open_issues": 0,
            "watchers": 0,
            "default_branch": "master",
            "master_branch": "master",
            "permissions": {
              "admin": true,
              "push": true,
              "pull": true
            },
            "organization": {
              "login": "distri",
              "id": 6005125,
              "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
              "gravatar_id": null,
              "url": "https://api.github.com/users/distri",
              "html_url": "https://github.com/distri",
              "followers_url": "https://api.github.com/users/distri/followers",
              "following_url": "https://api.github.com/users/distri/following{/other_user}",
              "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
              "organizations_url": "https://api.github.com/users/distri/orgs",
              "repos_url": "https://api.github.com/users/distri/repos",
              "events_url": "https://api.github.com/users/distri/events{/privacy}",
              "received_events_url": "https://api.github.com/users/distri/received_events",
              "type": "Organization",
              "site_admin": false
            },
            "network_count": 0,
            "subscribers_count": 1,
            "branch": "v0.6.0",
            "defaultBranch": "master"
          },
          "dependencies": {}
        },
        "pixie-canvas": {
          "source": {
            "pixie.cson": {
              "path": "pixie.cson",
              "mode": "100644",
              "content": "entryPoint: \"pixie_canvas\"\nversion: \"0.9.2\"\n",
              "type": "blob"
            },
            "pixie_canvas.coffee.md": {
              "path": "pixie_canvas.coffee.md",
              "mode": "100644",
              "content": "Pixie Canvas\n============\n\nPixieCanvas provides a convenient wrapper for working with Context2d.\n\nMethods try to be as flexible as possible as to what arguments they take.\n\nNon-getter methods return `this` for method chaining.\n\n    TAU = 2 * Math.PI\n\n    module.exports = (options={}) ->\n        defaults options,\n          width: 400\n          height: 400\n          init: ->\n\n        canvas = document.createElement \"canvas\"\n        canvas.width = options.width\n        canvas.height = options.height\n\n        context = undefined\n\n        self =\n\n`clear` clears the entire canvas (or a portion of it).\n\nTo clear the entire canvas use `canvas.clear()`\n\n>     #! paint\n>     # Set up: Fill canvas with blue\n>     canvas.fill(\"blue\")\n>\n>     # Clear a portion of the canvas\n>     canvas.clear\n>       x: 50\n>       y: 50\n>       width: 50\n>       height: 50\n\n          clear: ({x, y, width, height}={}) ->\n            x ?= 0\n            y ?= 0\n            width = canvas.width unless width?\n            height = canvas.height unless height?\n\n            context.clearRect(x, y, width, height)\n\n            return this\n\nFills the entire canvas (or a specified section of it) with\nthe given color.\n\n>     #! paint\n>     # Paint the town (entire canvas) red\n>     canvas.fill \"red\"\n>\n>     # Fill a section of the canvas white (#FFF)\n>     canvas.fill\n>       x: 50\n>       y: 50\n>       width: 50\n>       height: 50\n>       color: \"#FFF\"\n\n          fill: (color={}) ->\n            unless (typeof color is \"string\") or color.channels\n              {x, y, width, height, bounds, color} = color\n\n            {x, y, width, height} = bounds if bounds\n\n            x ||= 0\n            y ||= 0\n            width = canvas.width unless width?\n            height = canvas.height unless height?\n\n            @fillColor(color)\n            context.fillRect(x, y, width, height)\n\n            return this\n\nA direct map to the Context2d draw image. `GameObject`s\nthat implement drawable will have this wrapped up nicely,\nso there is a good chance that you will not have to deal with\nit directly.\n\n>     #! paint\n>     $ \"<img>\",\n>       src: \"https://secure.gravatar.com/avatar/33117162fff8a9cf50544a604f60c045\"\n>       load: ->\n>         canvas.drawImage(this, 25, 25)\n\n          drawImage: (args...) ->\n            context.drawImage(args...)\n\n            return this\n\nDraws a circle at the specified position with the specified\nradius and color.\n\n>     #! paint\n>     # Draw a large orange circle\n>     canvas.drawCircle\n>       radius: 30\n>       position: Point(100, 75)\n>       color: \"orange\"\n>\n>     # You may also set a stroke\n>     canvas.drawCircle\n>       x: 25\n>       y: 50\n>       radius: 10\n>       color: \"blue\"\n>       stroke:\n>         color: \"red\"\n>         width: 1\n\nYou can pass in circle objects as well.\n\n>     #! paint\n>     # Create a circle object to set up the next examples\n>     circle =\n>       radius: 20\n>       x: 50\n>       y: 50\n>\n>     # Draw a given circle in yellow\n>     canvas.drawCircle\n>       circle: circle\n>       color: \"yellow\"\n>\n>     # Draw the circle in green at a different position\n>     canvas.drawCircle\n>       circle: circle\n>       position: Point(25, 75)\n>       color: \"green\"\n\nYou may set a stroke, or even pass in only a stroke to draw an unfilled circle.\n\n>     #! paint\n>     # Draw an outline circle in purple.\n>     canvas.drawCircle\n>       x: 50\n>       y: 75\n>       radius: 10\n>       stroke:\n>         color: \"purple\"\n>         width: 2\n>\n\n          drawCircle: ({x, y, radius, position, color, stroke, circle}) ->\n            {x, y, radius} = circle if circle\n            {x, y} = position if position\n\n            radius = 0 if radius < 0\n\n            context.beginPath()\n            context.arc(x, y, radius, 0, TAU, true)\n            context.closePath()\n\n            if color\n              @fillColor(color)\n              context.fill()\n\n            if stroke\n              @strokeColor(stroke.color)\n              @lineWidth(stroke.width)\n              context.stroke()\n\n            return this\n\nDraws a rectangle at the specified position with given\nwidth and height. Optionally takes a position, bounds\nand color argument.\n\n\n          drawRect: ({x, y, width, height, position, bounds, color, stroke}) ->\n            {x, y, width, height} = bounds if bounds\n            {x, y} = position if position\n\n            if color\n              @fillColor(color)\n              context.fillRect(x, y, width, height)\n\n            if stroke\n              @strokeColor(stroke.color)\n              @lineWidth(stroke.width)\n              context.strokeRect(x, y, width, height)\n\n            return @\n\n>     #! paint\n>     # Draw a red rectangle using x, y, width and height\n>     canvas.drawRect\n>       x: 50\n>       y: 50\n>       width: 50\n>       height: 50\n>       color: \"#F00\"\n\n----\n\nYou can mix and match position, witdth and height.\n\n>     #! paint\n>     canvas.drawRect\n>       position: Point(0, 0)\n>       width: 50\n>       height: 50\n>       color: \"blue\"\n>       stroke:\n>         color: \"orange\"\n>         width: 3\n\n----\n\nA bounds can be reused to draw multiple rectangles.\n\n>     #! paint\n>     bounds =\n>       x: 100\n>       y: 0\n>       width: 100\n>       height: 100\n>\n>     # Draw a purple rectangle using bounds\n>     canvas.drawRect\n>       bounds: bounds\n>       color: \"green\"\n>\n>     # Draw the outline of the same bounds, but at a different position\n>     canvas.drawRect\n>       bounds: bounds\n>       position: Point(0, 50)\n>       stroke:\n>         color: \"purple\"\n>         width: 2\n\n----\n\nDraw a line from `start` to `end`.\n\n>     #! paint\n>     # Draw a sweet diagonal\n>     canvas.drawLine\n>       start: Point(0, 0)\n>       end: Point(200, 200)\n>       color: \"purple\"\n>\n>     # Draw another sweet diagonal\n>     canvas.drawLine\n>       start: Point(200, 0)\n>       end: Point(0, 200)\n>       color: \"red\"\n>       width: 6\n>\n>     # Now draw a sweet horizontal with a direction and a length\n>     canvas.drawLine\n>       start: Point(0, 100)\n>       length: 200\n>       direction: Point(1, 0)\n>       color: \"orange\"\n\n          drawLine: ({start, end, width, color, direction, length}) ->\n            width ||= 3\n\n            if direction\n              end = direction.norm(length).add(start)\n\n            @lineWidth(width)\n            @strokeColor(color)\n\n            context.beginPath()\n            context.moveTo(start.x, start.y)\n            context.lineTo(end.x, end.y)\n            context.closePath()\n            context.stroke()\n\n            return this\n\nDraw a polygon.\n\n>     #! paint\n>     # Draw a sweet rhombus\n>     canvas.drawPoly\n>       points: [\n>         Point(50, 25)\n>         Point(75, 50)\n>         Point(50, 75)\n>         Point(25, 50)\n>       ]\n>       color: \"purple\"\n>       stroke:\n>         color: \"red\"\n>         width: 2\n\n          drawPoly: ({points, color, stroke}) ->\n            context.beginPath()\n            points.forEach (point, i) ->\n              if i == 0\n                context.moveTo(point.x, point.y)\n              else\n                context.lineTo(point.x, point.y)\n            context.lineTo points[0].x, points[0].y\n\n            if color\n              @fillColor(color)\n              context.fill()\n\n            if stroke\n              @strokeColor(stroke.color)\n              @lineWidth(stroke.width)\n              context.stroke()\n\n            return @\n\nDraw a rounded rectangle.\n\nAdapted from http://js-bits.blogspot.com/2010/07/canvas-rounded-corner-rectangles.html\n\n>     #! paint\n>     # Draw a purple rounded rectangle with a red outline\n>     canvas.drawRoundRect\n>       position: Point(25, 25)\n>       radius: 10\n>       width: 150\n>       height: 100\n>       color: \"purple\"\n>       stroke:\n>         color: \"red\"\n>         width: 2\n\n          drawRoundRect: ({x, y, width, height, radius, position, bounds, color, stroke}) ->\n            radius = 5 unless radius?\n\n            {x, y, width, height} = bounds if bounds\n            {x, y} = position if position\n\n            context.beginPath()\n            context.moveTo(x + radius, y)\n            context.lineTo(x + width - radius, y)\n            context.quadraticCurveTo(x + width, y, x + width, y + radius)\n            context.lineTo(x + width, y + height - radius)\n            context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            context.lineTo(x + radius, y + height)\n            context.quadraticCurveTo(x, y + height, x, y + height - radius)\n            context.lineTo(x, y + radius)\n            context.quadraticCurveTo(x, y, x + radius, y)\n            context.closePath()\n\n            if color\n              @fillColor(color)\n              context.fill()\n\n            if stroke\n              @lineWidth(stroke.width)\n              @strokeColor(stroke.color)\n              context.stroke()\n\n            return this\n\nDraws text on the canvas at the given position, in the given color.\nIf no color is given then the previous fill color is used.\n\n>     #! paint\n>     # Fill canvas to indicate bounds\n>     canvas.fill\n>       color: '#eee'\n>\n>     # A line to indicate the baseline\n>     canvas.drawLine\n>       start: Point(25, 50)\n>       end: Point(125, 50)\n>       color: \"#333\"\n>       width: 1\n>\n>     # Draw some text, note the position of the baseline\n>     canvas.drawText\n>       position: Point(25, 50)\n>       color: \"red\"\n>       text: \"It's dangerous to go alone\"\n\n\n          drawText: ({x, y, text, position, color, font}) ->\n            {x, y} = position if position\n\n            @fillColor(color)\n            @font(font) if font\n            context.fillText(text, x, y)\n\n            return this\n\nCenters the given text on the canvas at the given y position. An x position\nor point position can also be given in which case the text is centered at the\nx, y or position value specified.\n\n>     #! paint\n>     # Fill canvas to indicate bounds\n>     canvas.fill\n>       color: \"#eee\"\n>\n>     # Center text on the screen at y value 25\n>     canvas.centerText\n>       y: 25\n>       color: \"red\"\n>       text: \"It's dangerous to go alone\"\n>\n>     # Center text at point (75, 75)\n>     canvas.centerText\n>       position: Point(75, 75)\n>       color: \"green\"\n>       text: \"take this\"\n\n          centerText: ({text, x, y, position, color, font}) ->\n            {x, y} = position if position\n\n            x = canvas.width / 2 unless x?\n\n            textWidth = @measureText(text)\n\n            @drawText {\n              text\n              color\n              font\n              x: x - (textWidth) / 2\n              y\n            }\n\nSetting the fill color:\n\n`canvas.fillColor(\"#FF0000\")`\n\nPassing no arguments returns the fillColor:\n\n`canvas.fillColor() # => \"#FF000000\"`\n\nYou can also pass a Color object:\n\n`canvas.fillColor(Color('sky blue'))`\n\n          fillColor: (color) ->\n            if color\n              if color.channels\n                context.fillStyle = color.toString()\n              else\n                context.fillStyle = color\n\n              return @\n            else\n              return context.fillStyle\n\nSetting the stroke color:\n\n`canvas.strokeColor(\"#FF0000\")`\n\nPassing no arguments returns the strokeColor:\n\n`canvas.strokeColor() # => \"#FF0000\"`\n\nYou can also pass a Color object:\n\n`canvas.strokeColor(Color('sky blue'))`\n\n          strokeColor: (color) ->\n            if color\n              if color.channels\n                context.strokeStyle = color.toString()\n              else\n                context.strokeStyle = color\n\n              return this\n            else\n              return context.strokeStyle\n\nDetermine how wide some text is.\n\n`canvas.measureText('Hello World!') # => 55`\n\nIt may have accuracy issues depending on the font used.\n\n          measureText: (text) ->\n            context.measureText(text).width\n\nPasses this canvas to the block with the given matrix transformation\napplied. All drawing methods called within the block will draw\ninto the canvas with the transformation applied. The transformation\nis removed at the end of the block, even if the block throws an error.\n\n          withTransform: (matrix, block) ->\n            context.save()\n\n            context.transform(\n              matrix.a,\n              matrix.b,\n              matrix.c,\n              matrix.d,\n              matrix.tx,\n              matrix.ty\n            )\n\n            try\n              block(this)\n            finally\n              context.restore()\n\n            return this\n\nStraight proxy to context `putImageData` method.\n\n          putImageData: (args...) ->\n            context.putImageData(args...)\n\n            return this\n\nContext getter.\n\n          context: ->\n            context\n\nGetter for the actual html canvas element.\n\n          element: ->\n            canvas\n\nStraight proxy to context pattern creation.\n\n          createPattern: (image, repitition) ->\n            context.createPattern(image, repitition)\n\nSet a clip rectangle.\n\n          clip: (x, y, width, height) ->\n            context.beginPath()\n            context.rect(x, y, width, height)\n            context.clip()\n\n            return this\n\nGenerate accessors that get properties from the context object.\n\n        contextAttrAccessor = (attrs...) ->\n          attrs.forEach (attr) ->\n            self[attr] = (newVal) ->\n              if newVal?\n                context[attr] = newVal\n                return @\n              else\n                context[attr]\n\n        contextAttrAccessor(\n          \"font\",\n          \"globalAlpha\",\n          \"globalCompositeOperation\",\n          \"lineWidth\",\n          \"textAlign\",\n        )\n\nGenerate accessors that get properties from the canvas object.\n\n        canvasAttrAccessor = (attrs...) ->\n          attrs.forEach (attr) ->\n            self[attr] = (newVal) ->\n              if newVal?\n                canvas[attr] = newVal\n                return @\n              else\n                canvas[attr]\n\n        canvasAttrAccessor(\n          \"height\",\n          \"width\",\n        )\n\n        context = canvas.getContext('2d')\n\n        options.init(self)\n\n        return self\n\nHelpers\n-------\n\nFill in default properties for an object, setting them only if they are not\nalready present.\n\n    defaults = (target, objects...) ->\n      for object in objects\n        for name of object\n          unless target.hasOwnProperty(name)\n            target[name] = object[name]\n\n      return target\n\nInteractive Examples\n--------------------\n\n>     #! setup\n>     Canvas = require \"/pixie_canvas\"\n>\n>     window.Point ?= (x, y) ->\n>       x: x\n>       y: y\n>\n>     Interactive.register \"paint\", ({source, runtimeElement}) ->\n>       canvas = Canvas\n>         width: 400\n>         height: 200\n>\n>       code = CoffeeScript.compile(source)\n>\n>       runtimeElement.empty().append canvas.element()\n>       Function(\"canvas\", code)(canvas)\n",
              "type": "blob"
            },
            "test/test.coffee": {
              "path": "test/test.coffee",
              "mode": "100644",
              "content": "Canvas = require \"../pixie_canvas\"\n\ndescribe \"pixie canvas\", ->\n  it \"Should create a canvas\", ->\n    canvas = Canvas\n      width: 400\n      height: 150\n\n    assert canvas\n\n    assert canvas.width() is 400\n",
              "type": "blob"
            }
          },
          "distribution": {
            "pixie": {
              "path": "pixie",
              "content": "module.exports = {\"entryPoint\":\"pixie_canvas\",\"version\":\"0.9.2\"};",
              "type": "blob"
            },
            "pixie_canvas": {
              "path": "pixie_canvas",
              "content": "(function() {\n  var TAU, defaults,\n    __slice = [].slice;\n\n  TAU = 2 * Math.PI;\n\n  module.exports = function(options) {\n    var canvas, canvasAttrAccessor, context, contextAttrAccessor, self;\n    if (options == null) {\n      options = {};\n    }\n    defaults(options, {\n      width: 400,\n      height: 400,\n      init: function() {}\n    });\n    canvas = document.createElement(\"canvas\");\n    canvas.width = options.width;\n    canvas.height = options.height;\n    context = void 0;\n    self = {\n      clear: function(_arg) {\n        var height, width, x, y, _ref;\n        _ref = _arg != null ? _arg : {}, x = _ref.x, y = _ref.y, width = _ref.width, height = _ref.height;\n        if (x == null) {\n          x = 0;\n        }\n        if (y == null) {\n          y = 0;\n        }\n        if (width == null) {\n          width = canvas.width;\n        }\n        if (height == null) {\n          height = canvas.height;\n        }\n        context.clearRect(x, y, width, height);\n        return this;\n      },\n      fill: function(color) {\n        var bounds, height, width, x, y, _ref;\n        if (color == null) {\n          color = {};\n        }\n        if (!((typeof color === \"string\") || color.channels)) {\n          _ref = color, x = _ref.x, y = _ref.y, width = _ref.width, height = _ref.height, bounds = _ref.bounds, color = _ref.color;\n        }\n        if (bounds) {\n          x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;\n        }\n        x || (x = 0);\n        y || (y = 0);\n        if (width == null) {\n          width = canvas.width;\n        }\n        if (height == null) {\n          height = canvas.height;\n        }\n        this.fillColor(color);\n        context.fillRect(x, y, width, height);\n        return this;\n      },\n      drawImage: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        context.drawImage.apply(context, args);\n        return this;\n      },\n      drawCircle: function(_arg) {\n        var circle, color, position, radius, stroke, x, y;\n        x = _arg.x, y = _arg.y, radius = _arg.radius, position = _arg.position, color = _arg.color, stroke = _arg.stroke, circle = _arg.circle;\n        if (circle) {\n          x = circle.x, y = circle.y, radius = circle.radius;\n        }\n        if (position) {\n          x = position.x, y = position.y;\n        }\n        if (radius < 0) {\n          radius = 0;\n        }\n        context.beginPath();\n        context.arc(x, y, radius, 0, TAU, true);\n        context.closePath();\n        if (color) {\n          this.fillColor(color);\n          context.fill();\n        }\n        if (stroke) {\n          this.strokeColor(stroke.color);\n          this.lineWidth(stroke.width);\n          context.stroke();\n        }\n        return this;\n      },\n      drawRect: function(_arg) {\n        var bounds, color, height, position, stroke, width, x, y;\n        x = _arg.x, y = _arg.y, width = _arg.width, height = _arg.height, position = _arg.position, bounds = _arg.bounds, color = _arg.color, stroke = _arg.stroke;\n        if (bounds) {\n          x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;\n        }\n        if (position) {\n          x = position.x, y = position.y;\n        }\n        if (color) {\n          this.fillColor(color);\n          context.fillRect(x, y, width, height);\n        }\n        if (stroke) {\n          this.strokeColor(stroke.color);\n          this.lineWidth(stroke.width);\n          context.strokeRect(x, y, width, height);\n        }\n        return this;\n      },\n      drawLine: function(_arg) {\n        var color, direction, end, length, start, width;\n        start = _arg.start, end = _arg.end, width = _arg.width, color = _arg.color, direction = _arg.direction, length = _arg.length;\n        width || (width = 3);\n        if (direction) {\n          end = direction.norm(length).add(start);\n        }\n        this.lineWidth(width);\n        this.strokeColor(color);\n        context.beginPath();\n        context.moveTo(start.x, start.y);\n        context.lineTo(end.x, end.y);\n        context.closePath();\n        context.stroke();\n        return this;\n      },\n      drawPoly: function(_arg) {\n        var color, points, stroke;\n        points = _arg.points, color = _arg.color, stroke = _arg.stroke;\n        context.beginPath();\n        points.forEach(function(point, i) {\n          if (i === 0) {\n            return context.moveTo(point.x, point.y);\n          } else {\n            return context.lineTo(point.x, point.y);\n          }\n        });\n        context.lineTo(points[0].x, points[0].y);\n        if (color) {\n          this.fillColor(color);\n          context.fill();\n        }\n        if (stroke) {\n          this.strokeColor(stroke.color);\n          this.lineWidth(stroke.width);\n          context.stroke();\n        }\n        return this;\n      },\n      drawRoundRect: function(_arg) {\n        var bounds, color, height, position, radius, stroke, width, x, y;\n        x = _arg.x, y = _arg.y, width = _arg.width, height = _arg.height, radius = _arg.radius, position = _arg.position, bounds = _arg.bounds, color = _arg.color, stroke = _arg.stroke;\n        if (radius == null) {\n          radius = 5;\n        }\n        if (bounds) {\n          x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;\n        }\n        if (position) {\n          x = position.x, y = position.y;\n        }\n        context.beginPath();\n        context.moveTo(x + radius, y);\n        context.lineTo(x + width - radius, y);\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\n        context.lineTo(x + width, y + height - radius);\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n        context.lineTo(x + radius, y + height);\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\n        context.lineTo(x, y + radius);\n        context.quadraticCurveTo(x, y, x + radius, y);\n        context.closePath();\n        if (color) {\n          this.fillColor(color);\n          context.fill();\n        }\n        if (stroke) {\n          this.lineWidth(stroke.width);\n          this.strokeColor(stroke.color);\n          context.stroke();\n        }\n        return this;\n      },\n      drawText: function(_arg) {\n        var color, font, position, text, x, y;\n        x = _arg.x, y = _arg.y, text = _arg.text, position = _arg.position, color = _arg.color, font = _arg.font;\n        if (position) {\n          x = position.x, y = position.y;\n        }\n        this.fillColor(color);\n        if (font) {\n          this.font(font);\n        }\n        context.fillText(text, x, y);\n        return this;\n      },\n      centerText: function(_arg) {\n        var color, font, position, text, textWidth, x, y;\n        text = _arg.text, x = _arg.x, y = _arg.y, position = _arg.position, color = _arg.color, font = _arg.font;\n        if (position) {\n          x = position.x, y = position.y;\n        }\n        if (x == null) {\n          x = canvas.width / 2;\n        }\n        textWidth = this.measureText(text);\n        return this.drawText({\n          text: text,\n          color: color,\n          font: font,\n          x: x - textWidth / 2,\n          y: y\n        });\n      },\n      fillColor: function(color) {\n        if (color) {\n          if (color.channels) {\n            context.fillStyle = color.toString();\n          } else {\n            context.fillStyle = color;\n          }\n          return this;\n        } else {\n          return context.fillStyle;\n        }\n      },\n      strokeColor: function(color) {\n        if (color) {\n          if (color.channels) {\n            context.strokeStyle = color.toString();\n          } else {\n            context.strokeStyle = color;\n          }\n          return this;\n        } else {\n          return context.strokeStyle;\n        }\n      },\n      measureText: function(text) {\n        return context.measureText(text).width;\n      },\n      withTransform: function(matrix, block) {\n        context.save();\n        context.transform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n        try {\n          block(this);\n        } finally {\n          context.restore();\n        }\n        return this;\n      },\n      putImageData: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        context.putImageData.apply(context, args);\n        return this;\n      },\n      context: function() {\n        return context;\n      },\n      element: function() {\n        return canvas;\n      },\n      createPattern: function(image, repitition) {\n        return context.createPattern(image, repitition);\n      },\n      clip: function(x, y, width, height) {\n        context.beginPath();\n        context.rect(x, y, width, height);\n        context.clip();\n        return this;\n      }\n    };\n    contextAttrAccessor = function() {\n      var attrs;\n      attrs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return attrs.forEach(function(attr) {\n        return self[attr] = function(newVal) {\n          if (newVal != null) {\n            context[attr] = newVal;\n            return this;\n          } else {\n            return context[attr];\n          }\n        };\n      });\n    };\n    contextAttrAccessor(\"font\", \"globalAlpha\", \"globalCompositeOperation\", \"lineWidth\", \"textAlign\");\n    canvasAttrAccessor = function() {\n      var attrs;\n      attrs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return attrs.forEach(function(attr) {\n        return self[attr] = function(newVal) {\n          if (newVal != null) {\n            canvas[attr] = newVal;\n            return this;\n          } else {\n            return canvas[attr];\n          }\n        };\n      });\n    };\n    canvasAttrAccessor(\"height\", \"width\");\n    context = canvas.getContext('2d');\n    options.init(self);\n    return self;\n  };\n\n  defaults = function() {\n    var name, object, objects, target, _i, _len;\n    target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = objects.length; _i < _len; _i++) {\n      object = objects[_i];\n      for (name in object) {\n        if (!target.hasOwnProperty(name)) {\n          target[name] = object[name];\n        }\n      }\n    }\n    return target;\n  };\n\n}).call(this);\n\n//# sourceURL=pixie_canvas.coffee",
              "type": "blob"
            },
            "test/test": {
              "path": "test/test",
              "content": "(function() {\n  var Canvas;\n\n  Canvas = require(\"../pixie_canvas\");\n\n  describe(\"pixie canvas\", function() {\n    return it(\"Should create a canvas\", function() {\n      var canvas;\n      canvas = Canvas({\n        width: 400,\n        height: 150\n      });\n      assert(canvas);\n      return assert(canvas.width() === 400);\n    });\n  });\n\n}).call(this);\n\n//# sourceURL=test/test.coffee",
              "type": "blob"
            }
          },
          "progenitor": {
            "url": "http://strd6.github.io/editor/"
          },
          "version": "0.9.2",
          "entryPoint": "pixie_canvas",
          "repository": {
            "id": 12096899,
            "name": "pixie-canvas",
            "full_name": "distri/pixie-canvas",
            "owner": {
              "login": "distri",
              "id": 6005125,
              "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
              "gravatar_id": null,
              "url": "https://api.github.com/users/distri",
              "html_url": "https://github.com/distri",
              "followers_url": "https://api.github.com/users/distri/followers",
              "following_url": "https://api.github.com/users/distri/following{/other_user}",
              "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
              "organizations_url": "https://api.github.com/users/distri/orgs",
              "repos_url": "https://api.github.com/users/distri/repos",
              "events_url": "https://api.github.com/users/distri/events{/privacy}",
              "received_events_url": "https://api.github.com/users/distri/received_events",
              "type": "Organization",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/distri/pixie-canvas",
            "description": "A pretty ok HTML5 canvas wrapper",
            "fork": false,
            "url": "https://api.github.com/repos/distri/pixie-canvas",
            "forks_url": "https://api.github.com/repos/distri/pixie-canvas/forks",
            "keys_url": "https://api.github.com/repos/distri/pixie-canvas/keys{/key_id}",
            "collaborators_url": "https://api.github.com/repos/distri/pixie-canvas/collaborators{/collaborator}",
            "teams_url": "https://api.github.com/repos/distri/pixie-canvas/teams",
            "hooks_url": "https://api.github.com/repos/distri/pixie-canvas/hooks",
            "issue_events_url": "https://api.github.com/repos/distri/pixie-canvas/issues/events{/number}",
            "events_url": "https://api.github.com/repos/distri/pixie-canvas/events",
            "assignees_url": "https://api.github.com/repos/distri/pixie-canvas/assignees{/user}",
            "branches_url": "https://api.github.com/repos/distri/pixie-canvas/branches{/branch}",
            "tags_url": "https://api.github.com/repos/distri/pixie-canvas/tags",
            "blobs_url": "https://api.github.com/repos/distri/pixie-canvas/git/blobs{/sha}",
            "git_tags_url": "https://api.github.com/repos/distri/pixie-canvas/git/tags{/sha}",
            "git_refs_url": "https://api.github.com/repos/distri/pixie-canvas/git/refs{/sha}",
            "trees_url": "https://api.github.com/repos/distri/pixie-canvas/git/trees{/sha}",
            "statuses_url": "https://api.github.com/repos/distri/pixie-canvas/statuses/{sha}",
            "languages_url": "https://api.github.com/repos/distri/pixie-canvas/languages",
            "stargazers_url": "https://api.github.com/repos/distri/pixie-canvas/stargazers",
            "contributors_url": "https://api.github.com/repos/distri/pixie-canvas/contributors",
            "subscribers_url": "https://api.github.com/repos/distri/pixie-canvas/subscribers",
            "subscription_url": "https://api.github.com/repos/distri/pixie-canvas/subscription",
            "commits_url": "https://api.github.com/repos/distri/pixie-canvas/commits{/sha}",
            "git_commits_url": "https://api.github.com/repos/distri/pixie-canvas/git/commits{/sha}",
            "comments_url": "https://api.github.com/repos/distri/pixie-canvas/comments{/number}",
            "issue_comment_url": "https://api.github.com/repos/distri/pixie-canvas/issues/comments/{number}",
            "contents_url": "https://api.github.com/repos/distri/pixie-canvas/contents/{+path}",
            "compare_url": "https://api.github.com/repos/distri/pixie-canvas/compare/{base}...{head}",
            "merges_url": "https://api.github.com/repos/distri/pixie-canvas/merges",
            "archive_url": "https://api.github.com/repos/distri/pixie-canvas/{archive_format}{/ref}",
            "downloads_url": "https://api.github.com/repos/distri/pixie-canvas/downloads",
            "issues_url": "https://api.github.com/repos/distri/pixie-canvas/issues{/number}",
            "pulls_url": "https://api.github.com/repos/distri/pixie-canvas/pulls{/number}",
            "milestones_url": "https://api.github.com/repos/distri/pixie-canvas/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/distri/pixie-canvas/notifications{?since,all,participating}",
            "labels_url": "https://api.github.com/repos/distri/pixie-canvas/labels{/name}",
            "releases_url": "https://api.github.com/repos/distri/pixie-canvas/releases{/id}",
            "created_at": "2013-08-14T01:15:34Z",
            "updated_at": "2013-11-29T20:54:07Z",
            "pushed_at": "2013-11-29T20:54:07Z",
            "git_url": "git://github.com/distri/pixie-canvas.git",
            "ssh_url": "git@github.com:distri/pixie-canvas.git",
            "clone_url": "https://github.com/distri/pixie-canvas.git",
            "svn_url": "https://github.com/distri/pixie-canvas",
            "homepage": null,
            "size": 664,
            "stargazers_count": 0,
            "watchers_count": 0,
            "language": "CoffeeScript",
            "has_issues": true,
            "has_downloads": true,
            "has_wiki": true,
            "forks_count": 0,
            "mirror_url": null,
            "open_issues_count": 1,
            "forks": 0,
            "open_issues": 1,
            "watchers": 0,
            "default_branch": "master",
            "master_branch": "master",
            "permissions": {
              "admin": true,
              "push": true,
              "pull": true
            },
            "organization": {
              "login": "distri",
              "id": 6005125,
              "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
              "gravatar_id": null,
              "url": "https://api.github.com/users/distri",
              "html_url": "https://github.com/distri",
              "followers_url": "https://api.github.com/users/distri/followers",
              "following_url": "https://api.github.com/users/distri/following{/other_user}",
              "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
              "organizations_url": "https://api.github.com/users/distri/orgs",
              "repos_url": "https://api.github.com/users/distri/repos",
              "events_url": "https://api.github.com/users/distri/events{/privacy}",
              "received_events_url": "https://api.github.com/users/distri/received_events",
              "type": "Organization",
              "site_admin": false
            },
            "network_count": 0,
            "subscribers_count": 1,
            "branch": "v0.9.2",
            "publishBranch": "gh-pages"
          },
          "dependencies": {}
        }
      }
    }
  }
}